// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package coreblocklog

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type CoreBlockLogFunc struct {
	sc wasmlib.ScContractFunc
}

func NewCoreBlockLogFunc(ctx wasmlib.ScFuncContext) *CoreBlockLogFunc {
	return &CoreBlockLogFunc{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *CoreBlockLogFunc) Delay(seconds int64) *CoreBlockLogFunc {
	f.sc.Delay(seconds)
	return f
}

func (f *CoreBlockLogFunc) OfContract(contract wasmlib.ScHname) *CoreBlockLogFunc {
	f.sc.OfContract(contract)
	return f
}

func (f *CoreBlockLogFunc) Post() *CoreBlockLogFunc {
	f.sc.Post()
	return f
}

func (f *CoreBlockLogFunc) PostToChain(chainId wasmlib.ScChainId) *CoreBlockLogFunc {
	f.sc.PostToChain(chainId)
	return f
}

func (f *CoreBlockLogFunc) GetBlockInfo(params MutableViewGetBlockInfoParams) ImmutableViewGetBlockInfoResults {
	f.sc.Run(HViewGetBlockInfo, params.id, nil)
	return ImmutableViewGetBlockInfoResults{id: f.sc.ResultMapId()}
}

func (f *CoreBlockLogFunc) GetLatestBlockInfo() ImmutableViewGetLatestBlockInfoResults {
	f.sc.Run(HViewGetLatestBlockInfo, 0, nil)
	return ImmutableViewGetLatestBlockInfoResults{id: f.sc.ResultMapId()}
}

func (f *CoreBlockLogFunc) GetRequestIDsForBlock(params MutableViewGetRequestIDsForBlockParams) {
	f.sc.Run(HViewGetRequestIDsForBlock, params.id, nil)
}

func (f *CoreBlockLogFunc) GetRequestLogRecord(params MutableViewGetRequestLogRecordParams) ImmutableViewGetRequestLogRecordResults {
	f.sc.Run(HViewGetRequestLogRecord, params.id, nil)
	return ImmutableViewGetRequestLogRecordResults{id: f.sc.ResultMapId()}
}

func (f *CoreBlockLogFunc) GetRequestLogRecordsForBlock(params MutableViewGetRequestLogRecordsForBlockParams) {
	f.sc.Run(HViewGetRequestLogRecordsForBlock, params.id, nil)
}

func (f *CoreBlockLogFunc) IsRequestProcessed(params MutableViewIsRequestProcessedParams) ImmutableViewIsRequestProcessedResults {
	f.sc.Run(HViewIsRequestProcessed, params.id, nil)
	return ImmutableViewIsRequestProcessedResults{id: f.sc.ResultMapId()}
}

type CoreBlockLogView struct {
	sc wasmlib.ScContractView
}

func NewCoreBlockLogView(ctx wasmlib.ScViewContext) *CoreBlockLogView {
	return &CoreBlockLogView{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *CoreBlockLogView) OfContract(contract wasmlib.ScHname) *CoreBlockLogView {
	v.sc.OfContract(contract)
	return v
}

func (v *CoreBlockLogView) GetBlockInfo(params MutableViewGetBlockInfoParams) ImmutableViewGetBlockInfoResults {
	v.sc.Run(HViewGetBlockInfo, params.id)
	return ImmutableViewGetBlockInfoResults{id: v.sc.ResultMapId()}
}

func (v *CoreBlockLogView) GetLatestBlockInfo() ImmutableViewGetLatestBlockInfoResults {
	v.sc.Run(HViewGetLatestBlockInfo, 0)
	return ImmutableViewGetLatestBlockInfoResults{id: v.sc.ResultMapId()}
}

func (v *CoreBlockLogView) GetRequestIDsForBlock(params MutableViewGetRequestIDsForBlockParams) {
	v.sc.Run(HViewGetRequestIDsForBlock, params.id)
}

func (v *CoreBlockLogView) GetRequestLogRecord(params MutableViewGetRequestLogRecordParams) ImmutableViewGetRequestLogRecordResults {
	v.sc.Run(HViewGetRequestLogRecord, params.id)
	return ImmutableViewGetRequestLogRecordResults{id: v.sc.ResultMapId()}
}

func (v *CoreBlockLogView) GetRequestLogRecordsForBlock(params MutableViewGetRequestLogRecordsForBlockParams) {
	v.sc.Run(HViewGetRequestLogRecordsForBlock, params.id)
}

func (v *CoreBlockLogView) IsRequestProcessed(params MutableViewIsRequestProcessedParams) ImmutableViewIsRequestProcessedResults {
	v.sc.Run(HViewIsRequestProcessed, params.id)
	return ImmutableViewIsRequestProcessedResults{id: v.sc.ResultMapId()}
}
