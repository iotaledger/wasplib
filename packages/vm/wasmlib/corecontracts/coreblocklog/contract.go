// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package coreblocklog

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type ControlAddressesCall struct {
	Func    *wasmlib.ScView
	Results ImmutableControlAddressesResults
}

func NewControlAddressesCall(ctx wasmlib.ScFuncContext) *ControlAddressesCall {
	f := &ControlAddressesCall{Func: wasmlib.NewScView(HScName, HViewControlAddresses)}
	f.Func.SetPtrs(nil, &f.Results.id)
	return f
}

func NewControlAddressesCallFromView(ctx wasmlib.ScViewContext) *ControlAddressesCall {
	return NewControlAddressesCall(wasmlib.ScFuncContext{})
}

type GetBlockInfoCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetBlockInfoParams
	Results ImmutableGetBlockInfoResults
}

func NewGetBlockInfoCall(ctx wasmlib.ScFuncContext) *GetBlockInfoCall {
	f := &GetBlockInfoCall{Func: wasmlib.NewScView(HScName, HViewGetBlockInfo)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func NewGetBlockInfoCallFromView(ctx wasmlib.ScViewContext) *GetBlockInfoCall {
	return NewGetBlockInfoCall(wasmlib.ScFuncContext{})
}

type GetLatestBlockInfoCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetLatestBlockInfoResults
}

func NewGetLatestBlockInfoCall(ctx wasmlib.ScFuncContext) *GetLatestBlockInfoCall {
	f := &GetLatestBlockInfoCall{Func: wasmlib.NewScView(HScName, HViewGetLatestBlockInfo)}
	f.Func.SetPtrs(nil, &f.Results.id)
	return f
}

func NewGetLatestBlockInfoCallFromView(ctx wasmlib.ScViewContext) *GetLatestBlockInfoCall {
	return NewGetLatestBlockInfoCall(wasmlib.ScFuncContext{})
}

type GetRequestIDsForBlockCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetRequestIDsForBlockParams
	Results ImmutableGetRequestIDsForBlockResults
}

func NewGetRequestIDsForBlockCall(ctx wasmlib.ScFuncContext) *GetRequestIDsForBlockCall {
	f := &GetRequestIDsForBlockCall{Func: wasmlib.NewScView(HScName, HViewGetRequestIDsForBlock)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func NewGetRequestIDsForBlockCallFromView(ctx wasmlib.ScViewContext) *GetRequestIDsForBlockCall {
	return NewGetRequestIDsForBlockCall(wasmlib.ScFuncContext{})
}

type GetRequestLogRecordCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetRequestLogRecordParams
	Results ImmutableGetRequestLogRecordResults
}

func NewGetRequestLogRecordCall(ctx wasmlib.ScFuncContext) *GetRequestLogRecordCall {
	f := &GetRequestLogRecordCall{Func: wasmlib.NewScView(HScName, HViewGetRequestLogRecord)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func NewGetRequestLogRecordCallFromView(ctx wasmlib.ScViewContext) *GetRequestLogRecordCall {
	return NewGetRequestLogRecordCall(wasmlib.ScFuncContext{})
}

type GetRequestLogRecordsForBlockCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetRequestLogRecordsForBlockParams
	Results ImmutableGetRequestLogRecordsForBlockResults
}

func NewGetRequestLogRecordsForBlockCall(ctx wasmlib.ScFuncContext) *GetRequestLogRecordsForBlockCall {
	f := &GetRequestLogRecordsForBlockCall{Func: wasmlib.NewScView(HScName, HViewGetRequestLogRecordsForBlock)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func NewGetRequestLogRecordsForBlockCallFromView(ctx wasmlib.ScViewContext) *GetRequestLogRecordsForBlockCall {
	return NewGetRequestLogRecordsForBlockCall(wasmlib.ScFuncContext{})
}

type IsRequestProcessedCall struct {
	Func    *wasmlib.ScView
	Params  MutableIsRequestProcessedParams
	Results ImmutableIsRequestProcessedResults
}

func NewIsRequestProcessedCall(ctx wasmlib.ScFuncContext) *IsRequestProcessedCall {
	f := &IsRequestProcessedCall{Func: wasmlib.NewScView(HScName, HViewIsRequestProcessed)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func NewIsRequestProcessedCallFromView(ctx wasmlib.ScViewContext) *IsRequestProcessedCall {
	return NewIsRequestProcessedCall(wasmlib.ScFuncContext{})
}
