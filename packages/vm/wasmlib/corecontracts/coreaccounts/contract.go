// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package coreaccounts

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type CoreAccountsFunc struct {
	sc wasmlib.ScContractFunc
}

func NewCoreAccountsFunc(ctx wasmlib.ScFuncContext) *CoreAccountsFunc {
	return &CoreAccountsFunc{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *CoreAccountsFunc) Delay(seconds int32) *CoreAccountsFunc {
	f.sc.Delay(seconds)
	return f
}

func (f *CoreAccountsFunc) OfContract(contract wasmlib.ScHname) *CoreAccountsFunc {
	f.sc.OfContract(contract)
	return f
}

func (f *CoreAccountsFunc) Post() *CoreAccountsFunc {
	f.sc.Post()
	return f
}

func (f *CoreAccountsFunc) PostToChain(chainId wasmlib.ScChainId) *CoreAccountsFunc {
	f.sc.PostToChain(chainId)
	return f
}

func (f *CoreAccountsFunc) Deposit(params MutableFuncDepositParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncDeposit, params.id, &transfer)
}

func (f *CoreAccountsFunc) Withdraw(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncWithdraw, 0, &transfer)
}

func (f *CoreAccountsFunc) Accounts() {
	f.sc.Run(HViewAccounts, 0, nil)
}

func (f *CoreAccountsFunc) Balance(params MutableViewBalanceParams) {
	f.sc.Run(HViewBalance, params.id, nil)
}

func (f *CoreAccountsFunc) TotalAssets() {
	f.sc.Run(HViewTotalAssets, 0, nil)
}

type CoreAccountsView struct {
	sc wasmlib.ScContractView
}

func NewCoreAccountsView(ctx wasmlib.ScViewContext) *CoreAccountsView {
	return &CoreAccountsView{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *CoreAccountsView) OfContract(contract wasmlib.ScHname) *CoreAccountsView {
	v.sc.OfContract(contract)
	return v
}

func (v *CoreAccountsView) Accounts() {
	v.sc.Run(HViewAccounts, 0)
}

func (v *CoreAccountsView) Balance(params MutableViewBalanceParams) {
	v.sc.Run(HViewBalance, params.id)
}

func (v *CoreAccountsView) TotalAssets() {
	v.sc.Run(HViewTotalAssets, 0)
}
