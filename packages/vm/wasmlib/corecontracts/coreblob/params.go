// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package coreblob

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type MapStringToImmutableBytes struct {
	objId int32
}

func (m MapStringToImmutableBytes) GetBytes(key string) wasmlib.ScImmutableBytes {
	return wasmlib.NewScImmutableBytes(m.objId, wasmlib.Key(key).KeyId())
}

type ImmutableStoreBlobParams struct {
	id int32
}

func (s ImmutableStoreBlobParams) Blobs() MapStringToImmutableBytes {
	return MapStringToImmutableBytes{objId: s.id}
}

type MapStringToMutableBytes struct {
	objId int32
}

func (m MapStringToMutableBytes) Clear() {
	wasmlib.Clear(m.objId)
}

func (m MapStringToMutableBytes) GetBytes(key string) wasmlib.ScMutableBytes {
	return wasmlib.NewScMutableBytes(m.objId, wasmlib.Key(key).KeyId())
}

type MutableStoreBlobParams struct {
	id int32
}

func (s MutableStoreBlobParams) Blobs() MapStringToMutableBytes {
	return MapStringToMutableBytes{objId: s.id}
}

type ImmutableGetBlobFieldParams struct {
	id int32
}

func (s ImmutableGetBlobFieldParams) Field() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, ParamField.KeyId())
}

func (s ImmutableGetBlobFieldParams) Hash() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, ParamHash.KeyId())
}

type MutableGetBlobFieldParams struct {
	id int32
}

func (s MutableGetBlobFieldParams) Field() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, ParamField.KeyId())
}

func (s MutableGetBlobFieldParams) Hash() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, ParamHash.KeyId())
}

type ImmutableGetBlobInfoParams struct {
	id int32
}

func (s ImmutableGetBlobInfoParams) Hash() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, ParamHash.KeyId())
}

type MutableGetBlobInfoParams struct {
	id int32
}

func (s MutableGetBlobInfoParams) Hash() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, ParamHash.KeyId())
}
