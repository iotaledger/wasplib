// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package coreroot

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type ClaimChainOwnershipCall struct {
	Func *wasmlib.ScFunc
}

type DelegateChainOwnershipCall struct {
	Func   *wasmlib.ScFunc
	Params MutableDelegateChainOwnershipParams
}

type DeployContractCall struct {
	Func   *wasmlib.ScFunc
	Params MutableDeployContractParams
}

type GrantDeployPermissionCall struct {
	Func   *wasmlib.ScFunc
	Params MutableGrantDeployPermissionParams
}

type RevokeDeployPermissionCall struct {
	Func   *wasmlib.ScFunc
	Params MutableRevokeDeployPermissionParams
}

type SetContractFeeCall struct {
	Func   *wasmlib.ScFunc
	Params MutableSetContractFeeParams
}

type SetDefaultFeeCall struct {
	Func   *wasmlib.ScFunc
	Params MutableSetDefaultFeeParams
}

type FindContractCall struct {
	Func    *wasmlib.ScView
	Params  MutableFindContractParams
	Results ImmutableFindContractResults
}

type GetChainInfoCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetChainInfoResults
}

type GetFeeInfoCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetFeeInfoParams
	Results ImmutableGetFeeInfoResults
}

type corerootFuncs struct{}

var ScFuncs corerootFuncs

func (sc corerootFuncs) ClaimChainOwnership(ctx wasmlib.ScFuncCallContext) *ClaimChainOwnershipCall {
	return &ClaimChainOwnershipCall{Func: wasmlib.NewScFunc(HScName, HFuncClaimChainOwnership)}
}

func (sc corerootFuncs) DelegateChainOwnership(ctx wasmlib.ScFuncCallContext) *DelegateChainOwnershipCall {
	f := &DelegateChainOwnershipCall{Func: wasmlib.NewScFunc(HScName, HFuncDelegateChainOwnership)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc corerootFuncs) DeployContract(ctx wasmlib.ScFuncCallContext) *DeployContractCall {
	f := &DeployContractCall{Func: wasmlib.NewScFunc(HScName, HFuncDeployContract)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc corerootFuncs) GrantDeployPermission(ctx wasmlib.ScFuncCallContext) *GrantDeployPermissionCall {
	f := &GrantDeployPermissionCall{Func: wasmlib.NewScFunc(HScName, HFuncGrantDeployPermission)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc corerootFuncs) RevokeDeployPermission(ctx wasmlib.ScFuncCallContext) *RevokeDeployPermissionCall {
	f := &RevokeDeployPermissionCall{Func: wasmlib.NewScFunc(HScName, HFuncRevokeDeployPermission)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc corerootFuncs) SetContractFee(ctx wasmlib.ScFuncCallContext) *SetContractFeeCall {
	f := &SetContractFeeCall{Func: wasmlib.NewScFunc(HScName, HFuncSetContractFee)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc corerootFuncs) SetDefaultFee(ctx wasmlib.ScFuncCallContext) *SetDefaultFeeCall {
	f := &SetDefaultFeeCall{Func: wasmlib.NewScFunc(HScName, HFuncSetDefaultFee)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc corerootFuncs) FindContract(ctx wasmlib.ScViewCallContext) *FindContractCall {
	f := &FindContractCall{Func: wasmlib.NewScView(HScName, HViewFindContract)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func (sc corerootFuncs) GetChainInfo(ctx wasmlib.ScViewCallContext) *GetChainInfoCall {
	f := &GetChainInfoCall{Func: wasmlib.NewScView(HScName, HViewGetChainInfo)}
	f.Func.SetPtrs(nil, &f.Results.id)
	return f
}

func (sc corerootFuncs) GetFeeInfo(ctx wasmlib.ScViewCallContext) *GetFeeInfoCall {
	f := &GetFeeInfoCall{Func: wasmlib.NewScView(HScName, HViewGetFeeInfo)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}
