// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//@formatter:off

#![allow(dead_code)]

use std::ptr;

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct FinalizeAuctionCall {
    pub func:   ScFunc,
    pub params: MutableFinalizeAuctionParams,
}

impl FinalizeAuctionCall {
    pub fn new(_ctx: &ScFuncContext) -> FinalizeAuctionCall {
        let mut f = FinalizeAuctionCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_FINALIZE_AUCTION),
            params: MutableFinalizeAuctionParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct PlaceBidCall {
    pub func:   ScFunc,
    pub params: MutablePlaceBidParams,
}

impl PlaceBidCall {
    pub fn new(_ctx: &ScFuncContext) -> PlaceBidCall {
        let mut f = PlaceBidCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_PLACE_BID),
            params: MutablePlaceBidParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct SetOwnerMarginCall {
    pub func:   ScFunc,
    pub params: MutableSetOwnerMarginParams,
}

impl SetOwnerMarginCall {
    pub fn new(_ctx: &ScFuncContext) -> SetOwnerMarginCall {
        let mut f = SetOwnerMarginCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_SET_OWNER_MARGIN),
            params: MutableSetOwnerMarginParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct StartAuctionCall {
    pub func:   ScFunc,
    pub params: MutableStartAuctionParams,
}

impl StartAuctionCall {
    pub fn new(_ctx: &ScFuncContext) -> StartAuctionCall {
        let mut f = StartAuctionCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_START_AUCTION),
            params: MutableStartAuctionParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct GetInfoCall {
    pub func:    ScView,
    pub params:  MutableGetInfoParams,
    pub results: ImmutableGetInfoResults,
}

impl GetInfoCall {
    pub fn new(_ctx: &ScFuncContext) -> GetInfoCall {
        let mut f = GetInfoCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_INFO),
            params:  MutableGetInfoParams { id: 0 },
            results: ImmutableGetInfoResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> GetInfoCall {
        GetInfoCall::new(&ScFuncContext {})
    }
}

//@formatter:on
