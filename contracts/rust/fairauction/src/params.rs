// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncFinalizeAuctionParams {
    pub(crate) id: i32,
}

impl ImmutableFuncFinalizeAuctionParams {
    pub fn color(&self) -> ScImmutableColor {
        ScImmutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncFinalizeAuctionParams {
    pub(crate) id: i32,
}

impl MutableFuncFinalizeAuctionParams {
    pub fn new() -> MutableFuncFinalizeAuctionParams {
        MutableFuncFinalizeAuctionParams { id: ScMutableMap::new().map_id() }
    }

    pub fn color(&self) -> ScMutableColor {
        ScMutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncPlaceBidParams {
    pub(crate) id: i32,
}

impl ImmutableFuncPlaceBidParams {
    pub fn color(&self) -> ScImmutableColor {
        ScImmutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncPlaceBidParams {
    pub(crate) id: i32,
}

impl MutableFuncPlaceBidParams {
    pub fn new() -> MutableFuncPlaceBidParams {
        MutableFuncPlaceBidParams { id: ScMutableMap::new().map_id() }
    }

    pub fn color(&self) -> ScMutableColor {
        ScMutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncSetOwnerMarginParams {
    pub(crate) id: i32,
}

impl ImmutableFuncSetOwnerMarginParams {
    pub fn owner_margin(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_OWNER_MARGIN))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncSetOwnerMarginParams {
    pub(crate) id: i32,
}

impl MutableFuncSetOwnerMarginParams {
    pub fn new() -> MutableFuncSetOwnerMarginParams {
        MutableFuncSetOwnerMarginParams { id: ScMutableMap::new().map_id() }
    }

    pub fn owner_margin(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_OWNER_MARGIN))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncStartAuctionParams {
    pub(crate) id: i32,
}

impl ImmutableFuncStartAuctionParams {
    pub fn color(&self) -> ScImmutableColor {
        ScImmutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }

    pub fn description(&self) -> ScImmutableString {
        ScImmutableString::new(self.id, idx_map(IDX_PARAM_DESCRIPTION))
    }

    pub fn duration(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_DURATION))
    }

    pub fn minimum_bid(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_MINIMUM_BID))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncStartAuctionParams {
    pub(crate) id: i32,
}

impl MutableFuncStartAuctionParams {
    pub fn new() -> MutableFuncStartAuctionParams {
        MutableFuncStartAuctionParams { id: ScMutableMap::new().map_id() }
    }

    pub fn color(&self) -> ScMutableColor {
        ScMutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }

    pub fn description(&self) -> ScMutableString {
        ScMutableString::new(self.id, idx_map(IDX_PARAM_DESCRIPTION))
    }

    pub fn duration(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_PARAM_DURATION))
    }

    pub fn minimum_bid(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_MINIMUM_BID))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetInfoParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetInfoParams {
    pub fn color(&self) -> ScImmutableColor {
        ScImmutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetInfoParams {
    pub(crate) id: i32,
}

impl MutableViewGetInfoParams {
    pub fn new() -> MutableViewGetInfoParams {
        MutableViewGetInfoParams { id: ScMutableMap::new().map_id() }
    }

    pub fn color(&self) -> ScMutableColor {
        ScMutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }
}
