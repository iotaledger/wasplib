// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package fairauction

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type Auction struct {
	Color         wasmlib.ScColor   // color of tokens for sale
	Creator       wasmlib.ScAgentId // issuer of start_auction transaction
	Deposit       int64             // deposit by auction owner to cover the SC fees
	Description   string            // auction description
	Duration      int64             // auction duration in minutes
	HighestBid    int64             // the current highest bid amount
	HighestBidder wasmlib.ScAgentId // the current highest bidder
	MinimumBid    int64             // minimum bid amount
	NumTokens     int64             // number of tokens for sale
	OwnerMargin   int64             // auction owner's margin in promilles
	WhenStarted   int64             // timestamp when auction started
}

func NewAuctionFromBytes(bytes []byte) *Auction {
	decode := wasmlib.NewBytesDecoder(bytes)
	data := &Auction{}
	data.Color = decode.Color()
	data.Creator = decode.AgentId()
	data.Deposit = decode.Int64()
	data.Description = decode.String()
	data.Duration = decode.Int64()
	data.HighestBid = decode.Int64()
	data.HighestBidder = decode.AgentId()
	data.MinimumBid = decode.Int64()
	data.NumTokens = decode.Int64()
	data.OwnerMargin = decode.Int64()
	data.WhenStarted = decode.Int64()
	decode.Close()
	return data
}

func (o *Auction) Bytes() []byte {
	return wasmlib.NewBytesEncoder().
		Color(o.Color).
		AgentId(o.Creator).
		Int64(o.Deposit).
		String(o.Description).
		Int64(o.Duration).
		Int64(o.HighestBid).
		AgentId(o.HighestBidder).
		Int64(o.MinimumBid).
		Int64(o.NumTokens).
		Int64(o.OwnerMargin).
		Int64(o.WhenStarted).
		Data()
}

type Bid struct {
	Amount    int64 // cumulative amount of bids from same bidder
	Index     int64 // index of bidder in bidder list
	Timestamp int64 // timestamp of most recent bid
}

func NewBidFromBytes(bytes []byte) *Bid {
	decode := wasmlib.NewBytesDecoder(bytes)
	data := &Bid{}
	data.Amount = decode.Int64()
	data.Index = decode.Int64()
	data.Timestamp = decode.Int64()
	decode.Close()
	return data
}

func (o *Bid) Bytes() []byte {
	return wasmlib.NewBytesEncoder().
		Int64(o.Amount).
		Int64(o.Index).
		Int64(o.Timestamp).
		Data()
}
