// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package fairauction

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncFinalizeAuction, funcFinalizeAuctionThunk)
	exports.AddFunc(FuncPlaceBid, funcPlaceBidThunk)
	exports.AddFunc(FuncSetOwnerMargin, funcSetOwnerMarginThunk)
	exports.AddFunc(FuncStartAuction, funcStartAuctionThunk)
	exports.AddView(ViewGetInfo, viewGetInfoThunk)
}

type FuncFinalizeAuctionParams struct {
	Color wasmlib.ScImmutableColor // color identifies the auction
}

func funcFinalizeAuctionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcFinalizeAuction")
	// only SC itself can invoke this function
	ctx.Require(ctx.Caller() == ctx.AccountId(), "no permission")

	p := ctx.Params()
	params := &FuncFinalizeAuctionParams{
		Color: p.GetColor(ParamColor),
	}
	ctx.Require(params.Color.Exists(), "missing mandatory color")
	funcFinalizeAuction(ctx, params)
	ctx.Log("fairauction.funcFinalizeAuction ok")
}

type FuncPlaceBidParams struct {
	Color wasmlib.ScImmutableColor // color identifies the auction
}

func funcPlaceBidThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcPlaceBid")
	p := ctx.Params()
	params := &FuncPlaceBidParams{
		Color: p.GetColor(ParamColor),
	}
	ctx.Require(params.Color.Exists(), "missing mandatory color")
	funcPlaceBid(ctx, params)
	ctx.Log("fairauction.funcPlaceBid ok")
}

type FuncSetOwnerMarginParams struct {
	OwnerMargin wasmlib.ScImmutableInt64 // new SC owner margin in promilles
}

func funcSetOwnerMarginThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcSetOwnerMargin")
	// only SC creator can set owner margin
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	p := ctx.Params()
	params := &FuncSetOwnerMarginParams{
		OwnerMargin: p.GetInt64(ParamOwnerMargin),
	}
	ctx.Require(params.OwnerMargin.Exists(), "missing mandatory ownerMargin")
	funcSetOwnerMargin(ctx, params)
	ctx.Log("fairauction.funcSetOwnerMargin ok")
}

type FuncStartAuctionParams struct {
	Color       wasmlib.ScImmutableColor  // color of the tokens being auctioned
	Description wasmlib.ScImmutableString // description of the tokens being auctioned
	Duration    wasmlib.ScImmutableInt64  // duration of auction in minutes
	MinimumBid  wasmlib.ScImmutableInt64  // minimum required amount for any bid
}

func funcStartAuctionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcStartAuction")
	p := ctx.Params()
	params := &FuncStartAuctionParams{
		Color:       p.GetColor(ParamColor),
		Description: p.GetString(ParamDescription),
		Duration:    p.GetInt64(ParamDuration),
		MinimumBid:  p.GetInt64(ParamMinimumBid),
	}
	ctx.Require(params.Color.Exists(), "missing mandatory color")
	ctx.Require(params.MinimumBid.Exists(), "missing mandatory minimumBid")
	funcStartAuction(ctx, params)
	ctx.Log("fairauction.funcStartAuction ok")
}

type ViewGetInfoParams struct {
	Color wasmlib.ScImmutableColor // color identifies the auction
}

func viewGetInfoThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("fairauction.viewGetInfo")
	p := ctx.Params()
	params := &ViewGetInfoParams{
		Color: p.GetColor(ParamColor),
	}
	ctx.Require(params.Color.Exists(), "missing mandatory color")
	viewGetInfo(ctx, params)
	ctx.Log("fairauction.viewGetInfo ok")
}
