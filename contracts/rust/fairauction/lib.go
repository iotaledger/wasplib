// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package fairauction

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncFinalizeAuction, funcFinalizeAuctionThunk)
	exports.AddFunc(FuncPlaceBid, funcPlaceBidThunk)
	exports.AddFunc(FuncSetOwnerMargin, funcSetOwnerMarginThunk)
	exports.AddFunc(FuncStartAuction, funcStartAuctionThunk)
	exports.AddView(ViewGetInfo, viewGetInfoThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyId()
	}
}

type FuncFinalizeAuctionContext struct {
	Params ImmutableFuncFinalizeAuctionParams
	State  MutableFairAuctionState
}

func funcFinalizeAuctionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcFinalizeAuction")
	// only SC itself can invoke this function
	ctx.Require(ctx.Caller() == ctx.AccountId(), "no permission")

	f := &FuncFinalizeAuctionContext{
		Params: ImmutableFuncFinalizeAuctionParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableFairAuctionState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Color().Exists(), "missing mandatory color")
	funcFinalizeAuction(ctx, f)
	ctx.Log("fairauction.funcFinalizeAuction ok")
}

type FuncPlaceBidContext struct {
	Params ImmutableFuncPlaceBidParams
	State  MutableFairAuctionState
}

func funcPlaceBidThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcPlaceBid")
	f := &FuncPlaceBidContext{
		Params: ImmutableFuncPlaceBidParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableFairAuctionState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Color().Exists(), "missing mandatory color")
	funcPlaceBid(ctx, f)
	ctx.Log("fairauction.funcPlaceBid ok")
}

type FuncSetOwnerMarginContext struct {
	Params ImmutableFuncSetOwnerMarginParams
	State  MutableFairAuctionState
}

func funcSetOwnerMarginThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcSetOwnerMargin")
	// only SC creator can set owner margin
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	f := &FuncSetOwnerMarginContext{
		Params: ImmutableFuncSetOwnerMarginParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableFairAuctionState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.OwnerMargin().Exists(), "missing mandatory ownerMargin")
	funcSetOwnerMargin(ctx, f)
	ctx.Log("fairauction.funcSetOwnerMargin ok")
}

type FuncStartAuctionContext struct {
	Params ImmutableFuncStartAuctionParams
	State  MutableFairAuctionState
}

func funcStartAuctionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("fairauction.funcStartAuction")
	f := &FuncStartAuctionContext{
		Params: ImmutableFuncStartAuctionParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableFairAuctionState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Color().Exists(), "missing mandatory color")
	ctx.Require(f.Params.MinimumBid().Exists(), "missing mandatory minimumBid")
	funcStartAuction(ctx, f)
	ctx.Log("fairauction.funcStartAuction ok")
}

type ViewGetInfoContext struct {
	Params  ImmutableViewGetInfoParams
	Results MutableViewGetInfoResults
	State   ImmutableFairAuctionState
}

func viewGetInfoThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("fairauction.viewGetInfo")
	f := &ViewGetInfoContext{
		Params: ImmutableViewGetInfoParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		Results: MutableViewGetInfoResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableFairAuctionState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Color().Exists(), "missing mandatory color")
	viewGetInfo(ctx, f)
	ctx.Log("fairauction.viewGetInfo ok")
}
