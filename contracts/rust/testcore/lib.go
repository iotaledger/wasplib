// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package testcore

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCallOnChain, funcCallOnChainThunk)
	exports.AddFunc(FuncCheckContextFromFullEP, funcCheckContextFromFullEPThunk)
	exports.AddFunc(FuncDoNothing, funcDoNothingThunk)
	exports.AddFunc(FuncGetMintedSupply, funcGetMintedSupplyThunk)
	exports.AddFunc(FuncIncCounter, funcIncCounterThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncPassTypesFull, funcPassTypesFullThunk)
	exports.AddFunc(FuncRunRecursion, funcRunRecursionThunk)
	exports.AddFunc(FuncSendToAddress, funcSendToAddressThunk)
	exports.AddFunc(FuncSetInt, funcSetIntThunk)
	exports.AddFunc(FuncTestCallPanicFullEP, funcTestCallPanicFullEPThunk)
	exports.AddFunc(FuncTestCallPanicViewEPFromFull, funcTestCallPanicViewEPFromFullThunk)
	exports.AddFunc(FuncTestChainOwnerIDFull, funcTestChainOwnerIDFullThunk)
	exports.AddFunc(FuncTestEventLogDeploy, funcTestEventLogDeployThunk)
	exports.AddFunc(FuncTestEventLogEventData, funcTestEventLogEventDataThunk)
	exports.AddFunc(FuncTestEventLogGenericData, funcTestEventLogGenericDataThunk)
	exports.AddFunc(FuncTestPanicFullEP, funcTestPanicFullEPThunk)
	exports.AddFunc(FuncWithdrawToChain, funcWithdrawToChainThunk)
	exports.AddView(ViewCheckContextFromViewEP, viewCheckContextFromViewEPThunk)
	exports.AddView(ViewFibonacci, viewFibonacciThunk)
	exports.AddView(ViewGetCounter, viewGetCounterThunk)
	exports.AddView(ViewGetInt, viewGetIntThunk)
	exports.AddView(ViewJustView, viewJustViewThunk)
	exports.AddView(ViewPassTypesView, viewPassTypesViewThunk)
	exports.AddView(ViewTestCallPanicViewEPFromView, viewTestCallPanicViewEPFromViewThunk)
	exports.AddView(ViewTestChainOwnerIDView, viewTestChainOwnerIDViewThunk)
	exports.AddView(ViewTestPanicViewEP, viewTestPanicViewEPThunk)
	exports.AddView(ViewTestSandboxCall, viewTestSandboxCallThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyId()
	}
}

type FuncCallOnChainContext struct {
	Params  ImmutableFuncCallOnChainParams
	Results MutableFuncCallOnChainResults
	State   MutableTestCoreState
}

func funcCallOnChainThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcCallOnChain")
	f := &FuncCallOnChainContext{
		Params: ImmutableFuncCallOnChainParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		Results: MutableFuncCallOnChainResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.IntValue().Exists(), "missing mandatory intValue")
	funcCallOnChain(ctx, f)
	ctx.Log("testcore.funcCallOnChain ok")
}

type FuncCheckContextFromFullEPContext struct {
	Params ImmutableFuncCheckContextFromFullEPParams
	State  MutableTestCoreState
}

func funcCheckContextFromFullEPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcCheckContextFromFullEP")
	f := &FuncCheckContextFromFullEPContext{
		Params: ImmutableFuncCheckContextFromFullEPParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.AgentId().Exists(), "missing mandatory agentId")
	ctx.Require(f.Params.Caller().Exists(), "missing mandatory caller")
	ctx.Require(f.Params.ChainId().Exists(), "missing mandatory chainId")
	ctx.Require(f.Params.ChainOwnerId().Exists(), "missing mandatory chainOwnerId")
	ctx.Require(f.Params.ContractCreator().Exists(), "missing mandatory contractCreator")
	funcCheckContextFromFullEP(ctx, f)
	ctx.Log("testcore.funcCheckContextFromFullEP ok")
}

type FuncDoNothingContext struct {
	State MutableTestCoreState
}

func funcDoNothingThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcDoNothing")
	f := &FuncDoNothingContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcDoNothing(ctx, f)
	ctx.Log("testcore.funcDoNothing ok")
}

type FuncGetMintedSupplyContext struct {
	Results MutableFuncGetMintedSupplyResults
	State   MutableTestCoreState
}

func funcGetMintedSupplyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcGetMintedSupply")
	f := &FuncGetMintedSupplyContext{
		Results: MutableFuncGetMintedSupplyResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcGetMintedSupply(ctx, f)
	ctx.Log("testcore.funcGetMintedSupply ok")
}

type FuncIncCounterContext struct {
	State MutableTestCoreState
}

func funcIncCounterThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcIncCounter")
	f := &FuncIncCounterContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcIncCounter(ctx, f)
	ctx.Log("testcore.funcIncCounter ok")
}

type FuncInitContext struct {
	State MutableTestCoreState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcInit")
	f := &FuncInitContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcInit(ctx, f)
	ctx.Log("testcore.funcInit ok")
}

type FuncPassTypesFullContext struct {
	Params ImmutableFuncPassTypesFullParams
	State  MutableTestCoreState
}

func funcPassTypesFullThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcPassTypesFull")
	f := &FuncPassTypesFullContext{
		Params: ImmutableFuncPassTypesFullParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Hash().Exists(), "missing mandatory hash")
	ctx.Require(f.Params.Hname().Exists(), "missing mandatory hname")
	ctx.Require(f.Params.HnameZero().Exists(), "missing mandatory hnameZero")
	ctx.Require(f.Params.Int64().Exists(), "missing mandatory int64")
	ctx.Require(f.Params.Int64Zero().Exists(), "missing mandatory int64Zero")
	ctx.Require(f.Params.String().Exists(), "missing mandatory string")
	ctx.Require(f.Params.StringZero().Exists(), "missing mandatory stringZero")
	funcPassTypesFull(ctx, f)
	ctx.Log("testcore.funcPassTypesFull ok")
}

type FuncRunRecursionContext struct {
	Params  ImmutableFuncRunRecursionParams
	Results MutableFuncRunRecursionResults
	State   MutableTestCoreState
}

func funcRunRecursionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcRunRecursion")
	f := &FuncRunRecursionContext{
		Params: ImmutableFuncRunRecursionParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		Results: MutableFuncRunRecursionResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.IntValue().Exists(), "missing mandatory intValue")
	funcRunRecursion(ctx, f)
	ctx.Log("testcore.funcRunRecursion ok")
}

type FuncSendToAddressContext struct {
	Params ImmutableFuncSendToAddressParams
	State  MutableTestCoreState
}

func funcSendToAddressThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcSendToAddress")
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	f := &FuncSendToAddressContext{
		Params: ImmutableFuncSendToAddressParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Address().Exists(), "missing mandatory address")
	funcSendToAddress(ctx, f)
	ctx.Log("testcore.funcSendToAddress ok")
}

type FuncSetIntContext struct {
	Params ImmutableFuncSetIntParams
	State  MutableTestCoreState
}

func funcSetIntThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcSetInt")
	f := &FuncSetIntContext{
		Params: ImmutableFuncSetIntParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.IntValue().Exists(), "missing mandatory intValue")
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	funcSetInt(ctx, f)
	ctx.Log("testcore.funcSetInt ok")
}

type FuncTestCallPanicFullEPContext struct {
	State MutableTestCoreState
}

func funcTestCallPanicFullEPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestCallPanicFullEP")
	f := &FuncTestCallPanicFullEPContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcTestCallPanicFullEP(ctx, f)
	ctx.Log("testcore.funcTestCallPanicFullEP ok")
}

type FuncTestCallPanicViewEPFromFullContext struct {
	State MutableTestCoreState
}

func funcTestCallPanicViewEPFromFullThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestCallPanicViewEPFromFull")
	f := &FuncTestCallPanicViewEPFromFullContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcTestCallPanicViewEPFromFull(ctx, f)
	ctx.Log("testcore.funcTestCallPanicViewEPFromFull ok")
}

type FuncTestChainOwnerIDFullContext struct {
	Results MutableFuncTestChainOwnerIDFullResults
	State   MutableTestCoreState
}

func funcTestChainOwnerIDFullThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestChainOwnerIDFull")
	f := &FuncTestChainOwnerIDFullContext{
		Results: MutableFuncTestChainOwnerIDFullResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcTestChainOwnerIDFull(ctx, f)
	ctx.Log("testcore.funcTestChainOwnerIDFull ok")
}

type FuncTestEventLogDeployContext struct {
	State MutableTestCoreState
}

func funcTestEventLogDeployThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestEventLogDeploy")
	f := &FuncTestEventLogDeployContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcTestEventLogDeploy(ctx, f)
	ctx.Log("testcore.funcTestEventLogDeploy ok")
}

type FuncTestEventLogEventDataContext struct {
	State MutableTestCoreState
}

func funcTestEventLogEventDataThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestEventLogEventData")
	f := &FuncTestEventLogEventDataContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcTestEventLogEventData(ctx, f)
	ctx.Log("testcore.funcTestEventLogEventData ok")
}

type FuncTestEventLogGenericDataContext struct {
	Params ImmutableFuncTestEventLogGenericDataParams
	State  MutableTestCoreState
}

func funcTestEventLogGenericDataThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestEventLogGenericData")
	f := &FuncTestEventLogGenericDataContext{
		Params: ImmutableFuncTestEventLogGenericDataParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Counter().Exists(), "missing mandatory counter")
	funcTestEventLogGenericData(ctx, f)
	ctx.Log("testcore.funcTestEventLogGenericData ok")
}

type FuncTestPanicFullEPContext struct {
	State MutableTestCoreState
}

func funcTestPanicFullEPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestPanicFullEP")
	f := &FuncTestPanicFullEPContext{
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcTestPanicFullEP(ctx, f)
	ctx.Log("testcore.funcTestPanicFullEP ok")
}

type FuncWithdrawToChainContext struct {
	Params ImmutableFuncWithdrawToChainParams
	State  MutableTestCoreState
}

func funcWithdrawToChainThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcWithdrawToChain")
	f := &FuncWithdrawToChainContext{
		Params: ImmutableFuncWithdrawToChainParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.ChainId().Exists(), "missing mandatory chainId")
	funcWithdrawToChain(ctx, f)
	ctx.Log("testcore.funcWithdrawToChain ok")
}

type ViewCheckContextFromViewEPContext struct {
	Params ImmutableViewCheckContextFromViewEPParams
	State  ImmutableTestCoreState
}

func viewCheckContextFromViewEPThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewCheckContextFromViewEP")
	f := &ViewCheckContextFromViewEPContext{
		Params: ImmutableViewCheckContextFromViewEPParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.AgentId().Exists(), "missing mandatory agentId")
	ctx.Require(f.Params.ChainId().Exists(), "missing mandatory chainId")
	ctx.Require(f.Params.ChainOwnerId().Exists(), "missing mandatory chainOwnerId")
	ctx.Require(f.Params.ContractCreator().Exists(), "missing mandatory contractCreator")
	viewCheckContextFromViewEP(ctx, f)
	ctx.Log("testcore.viewCheckContextFromViewEP ok")
}

type ViewFibonacciContext struct {
	Params  ImmutableViewFibonacciParams
	Results MutableViewFibonacciResults
	State   ImmutableTestCoreState
}

func viewFibonacciThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewFibonacci")
	f := &ViewFibonacciContext{
		Params: ImmutableViewFibonacciParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		Results: MutableViewFibonacciResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.IntValue().Exists(), "missing mandatory intValue")
	viewFibonacci(ctx, f)
	ctx.Log("testcore.viewFibonacci ok")
}

type ViewGetCounterContext struct {
	Results MutableViewGetCounterResults
	State   ImmutableTestCoreState
}

func viewGetCounterThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewGetCounter")
	f := &ViewGetCounterContext{
		Results: MutableViewGetCounterResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewGetCounter(ctx, f)
	ctx.Log("testcore.viewGetCounter ok")
}

type ViewGetIntContext struct {
	Params ImmutableViewGetIntParams
	State  ImmutableTestCoreState
}

func viewGetIntThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewGetInt")
	f := &ViewGetIntContext{
		Params: ImmutableViewGetIntParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	viewGetInt(ctx, f)
	ctx.Log("testcore.viewGetInt ok")
}

type ViewJustViewContext struct {
	State ImmutableTestCoreState
}

func viewJustViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewJustView")
	f := &ViewJustViewContext{
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewJustView(ctx, f)
	ctx.Log("testcore.viewJustView ok")
}

type ViewPassTypesViewContext struct {
	Params ImmutableViewPassTypesViewParams
	State  ImmutableTestCoreState
}

func viewPassTypesViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewPassTypesView")
	f := &ViewPassTypesViewContext{
		Params: ImmutableViewPassTypesViewParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Hash().Exists(), "missing mandatory hash")
	ctx.Require(f.Params.Hname().Exists(), "missing mandatory hname")
	ctx.Require(f.Params.HnameZero().Exists(), "missing mandatory hnameZero")
	ctx.Require(f.Params.Int64().Exists(), "missing mandatory int64")
	ctx.Require(f.Params.Int64Zero().Exists(), "missing mandatory int64Zero")
	ctx.Require(f.Params.String().Exists(), "missing mandatory string")
	ctx.Require(f.Params.StringZero().Exists(), "missing mandatory stringZero")
	viewPassTypesView(ctx, f)
	ctx.Log("testcore.viewPassTypesView ok")
}

type ViewTestCallPanicViewEPFromViewContext struct {
	State ImmutableTestCoreState
}

func viewTestCallPanicViewEPFromViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestCallPanicViewEPFromView")
	f := &ViewTestCallPanicViewEPFromViewContext{
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewTestCallPanicViewEPFromView(ctx, f)
	ctx.Log("testcore.viewTestCallPanicViewEPFromView ok")
}

type ViewTestChainOwnerIDViewContext struct {
	Results MutableViewTestChainOwnerIDViewResults
	State   ImmutableTestCoreState
}

func viewTestChainOwnerIDViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestChainOwnerIDView")
	f := &ViewTestChainOwnerIDViewContext{
		Results: MutableViewTestChainOwnerIDViewResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewTestChainOwnerIDView(ctx, f)
	ctx.Log("testcore.viewTestChainOwnerIDView ok")
}

type ViewTestPanicViewEPContext struct {
	State ImmutableTestCoreState
}

func viewTestPanicViewEPThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestPanicViewEP")
	f := &ViewTestPanicViewEPContext{
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewTestPanicViewEP(ctx, f)
	ctx.Log("testcore.viewTestPanicViewEP ok")
}

type ViewTestSandboxCallContext struct {
	Results MutableViewTestSandboxCallResults
	State   ImmutableTestCoreState
}

func viewTestSandboxCallThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestSandboxCall")
	f := &ViewTestSandboxCallContext{
		Results: MutableViewTestSandboxCallResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableTestCoreState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewTestSandboxCall(ctx, f)
	ctx.Log("testcore.viewTestSandboxCall ok")
}
