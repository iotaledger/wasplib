// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package testcore

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCallOnChain, funcCallOnChainThunk)
	exports.AddFunc(FuncCheckContextFromFullEP, funcCheckContextFromFullEPThunk)
	exports.AddFunc(FuncDoNothing, funcDoNothingThunk)
	exports.AddFunc(FuncGetMintedSupply, funcGetMintedSupplyThunk)
	exports.AddFunc(FuncIncCounter, funcIncCounterThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncPassTypesFull, funcPassTypesFullThunk)
	exports.AddFunc(FuncRunRecursion, funcRunRecursionThunk)
	exports.AddFunc(FuncSendToAddress, funcSendToAddressThunk)
	exports.AddFunc(FuncSetInt, funcSetIntThunk)
	exports.AddFunc(FuncTestCallPanicFullEP, funcTestCallPanicFullEPThunk)
	exports.AddFunc(FuncTestCallPanicViewEPFromFull, funcTestCallPanicViewEPFromFullThunk)
	exports.AddFunc(FuncTestChainOwnerIDFull, funcTestChainOwnerIDFullThunk)
	exports.AddFunc(FuncTestContractIDFull, funcTestContractIDFullThunk)
	exports.AddFunc(FuncTestEventLogDeploy, funcTestEventLogDeployThunk)
	exports.AddFunc(FuncTestEventLogEventData, funcTestEventLogEventDataThunk)
	exports.AddFunc(FuncTestEventLogGenericData, funcTestEventLogGenericDataThunk)
	exports.AddFunc(FuncTestPanicFullEP, funcTestPanicFullEPThunk)
	exports.AddFunc(FuncWithdrawToChain, funcWithdrawToChainThunk)
	exports.AddView(ViewCheckContextFromViewEP, viewCheckContextFromViewEPThunk)
	exports.AddView(ViewFibonacci, viewFibonacciThunk)
	exports.AddView(ViewGetCounter, viewGetCounterThunk)
	exports.AddView(ViewGetInt, viewGetIntThunk)
	exports.AddView(ViewJustView, viewJustViewThunk)
	exports.AddView(ViewPassTypesView, viewPassTypesViewThunk)
	exports.AddView(ViewTestCallPanicViewEPFromView, viewTestCallPanicViewEPFromViewThunk)
	exports.AddView(ViewTestChainOwnerIDView, viewTestChainOwnerIDViewThunk)
	exports.AddView(ViewTestContractIDView, viewTestContractIDViewThunk)
	exports.AddView(ViewTestPanicViewEP, viewTestPanicViewEPThunk)
	exports.AddView(ViewTestSandboxCall, viewTestSandboxCallThunk)
}

type FuncCallOnChainParams struct {
	HnameContract wasmlib.ScImmutableHname
	HnameEP       wasmlib.ScImmutableHname
	IntValue      wasmlib.ScImmutableInt64
}

func funcCallOnChainThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcCallOnChain")
	p := ctx.Params()
	params := &FuncCallOnChainParams{
		HnameContract: p.GetHname(ParamHnameContract),
		HnameEP:       p.GetHname(ParamHnameEP),
		IntValue:      p.GetInt64(ParamIntValue),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	funcCallOnChain(ctx, params)
	ctx.Log("testcore.funcCallOnChain ok")
}

type FuncCheckContextFromFullEPParams struct {
	AgentId         wasmlib.ScImmutableAgentId
	Caller          wasmlib.ScImmutableAgentId
	ChainId         wasmlib.ScImmutableChainId
	ChainOwnerId    wasmlib.ScImmutableAgentId
	ContractCreator wasmlib.ScImmutableAgentId
	ContractId      wasmlib.ScImmutableContractId
}

func funcCheckContextFromFullEPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcCheckContextFromFullEP")
	p := ctx.Params()
	params := &FuncCheckContextFromFullEPParams{
		AgentId:         p.GetAgentId(ParamAgentId),
		Caller:          p.GetAgentId(ParamCaller),
		ChainId:         p.GetChainId(ParamChainId),
		ChainOwnerId:    p.GetAgentId(ParamChainOwnerId),
		ContractCreator: p.GetAgentId(ParamContractCreator),
		ContractId:      p.GetContractId(ParamContractId),
	}
	ctx.Require(params.AgentId.Exists(), "missing mandatory agentId")
	ctx.Require(params.Caller.Exists(), "missing mandatory caller")
	ctx.Require(params.ChainId.Exists(), "missing mandatory chainId")
	ctx.Require(params.ChainOwnerId.Exists(), "missing mandatory chainOwnerId")
	ctx.Require(params.ContractCreator.Exists(), "missing mandatory contractCreator")
	ctx.Require(params.ContractId.Exists(), "missing mandatory contractId")
	funcCheckContextFromFullEP(ctx, params)
	ctx.Log("testcore.funcCheckContextFromFullEP ok")
}

type FuncDoNothingParams struct {
}

func funcDoNothingThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcDoNothing")
	params := &FuncDoNothingParams{
	}
	funcDoNothing(ctx, params)
	ctx.Log("testcore.funcDoNothing ok")
}

type FuncGetMintedSupplyParams struct {
}

func funcGetMintedSupplyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcGetMintedSupply")
	params := &FuncGetMintedSupplyParams{
	}
	funcGetMintedSupply(ctx, params)
	ctx.Log("testcore.funcGetMintedSupply ok")
}

type FuncIncCounterParams struct {
}

func funcIncCounterThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcIncCounter")
	params := &FuncIncCounterParams{
	}
	funcIncCounter(ctx, params)
	ctx.Log("testcore.funcIncCounter ok")
}

type FuncInitParams struct {
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcInit")
	params := &FuncInitParams{
	}
	funcInit(ctx, params)
	ctx.Log("testcore.funcInit ok")
}

type FuncPassTypesFullParams struct {
	Hash       wasmlib.ScImmutableHash
	Hname      wasmlib.ScImmutableHname
	HnameZero  wasmlib.ScImmutableHname
	Int64      wasmlib.ScImmutableInt64
	Int64Zero  wasmlib.ScImmutableInt64
	String     wasmlib.ScImmutableString
	StringZero wasmlib.ScImmutableString
}

func funcPassTypesFullThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcPassTypesFull")
	p := ctx.Params()
	params := &FuncPassTypesFullParams{
		Hash:       p.GetHash(ParamHash),
		Hname:      p.GetHname(ParamHname),
		HnameZero:  p.GetHname(ParamHnameZero),
		Int64:      p.GetInt64(ParamInt64),
		Int64Zero:  p.GetInt64(ParamInt64Zero),
		String:     p.GetString(ParamString),
		StringZero: p.GetString(ParamStringZero),
	}
	ctx.Require(params.Hash.Exists(), "missing mandatory hash")
	ctx.Require(params.Hname.Exists(), "missing mandatory hname")
	ctx.Require(params.HnameZero.Exists(), "missing mandatory hnameZero")
	ctx.Require(params.Int64.Exists(), "missing mandatory int64")
	ctx.Require(params.Int64Zero.Exists(), "missing mandatory int64Zero")
	ctx.Require(params.String.Exists(), "missing mandatory string")
	ctx.Require(params.StringZero.Exists(), "missing mandatory stringZero")
	funcPassTypesFull(ctx, params)
	ctx.Log("testcore.funcPassTypesFull ok")
}

type FuncRunRecursionParams struct {
	IntValue wasmlib.ScImmutableInt64
}

func funcRunRecursionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcRunRecursion")
	p := ctx.Params()
	params := &FuncRunRecursionParams{
		IntValue: p.GetInt64(ParamIntValue),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	funcRunRecursion(ctx, params)
	ctx.Log("testcore.funcRunRecursion ok")
}

type FuncSendToAddressParams struct {
	Address wasmlib.ScImmutableAddress
}

func funcSendToAddressThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcSendToAddress")
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	p := ctx.Params()
	params := &FuncSendToAddressParams{
		Address: p.GetAddress(ParamAddress),
	}
	ctx.Require(params.Address.Exists(), "missing mandatory address")
	funcSendToAddress(ctx, params)
	ctx.Log("testcore.funcSendToAddress ok")
}

type FuncSetIntParams struct {
	IntValue wasmlib.ScImmutableInt64
	Name     wasmlib.ScImmutableString
}

func funcSetIntThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcSetInt")
	p := ctx.Params()
	params := &FuncSetIntParams{
		IntValue: p.GetInt64(ParamIntValue),
		Name:     p.GetString(ParamName),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	ctx.Require(params.Name.Exists(), "missing mandatory name")
	funcSetInt(ctx, params)
	ctx.Log("testcore.funcSetInt ok")
}

type FuncTestCallPanicFullEPParams struct {
}

func funcTestCallPanicFullEPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestCallPanicFullEP")
	params := &FuncTestCallPanicFullEPParams{
	}
	funcTestCallPanicFullEP(ctx, params)
	ctx.Log("testcore.funcTestCallPanicFullEP ok")
}

type FuncTestCallPanicViewEPFromFullParams struct {
}

func funcTestCallPanicViewEPFromFullThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestCallPanicViewEPFromFull")
	params := &FuncTestCallPanicViewEPFromFullParams{
	}
	funcTestCallPanicViewEPFromFull(ctx, params)
	ctx.Log("testcore.funcTestCallPanicViewEPFromFull ok")
}

type FuncTestChainOwnerIDFullParams struct {
}

func funcTestChainOwnerIDFullThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestChainOwnerIDFull")
	params := &FuncTestChainOwnerIDFullParams{
	}
	funcTestChainOwnerIDFull(ctx, params)
	ctx.Log("testcore.funcTestChainOwnerIDFull ok")
}

type FuncTestContractIDFullParams struct {
}

func funcTestContractIDFullThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestContractIDFull")
	params := &FuncTestContractIDFullParams{
	}
	funcTestContractIDFull(ctx, params)
	ctx.Log("testcore.funcTestContractIDFull ok")
}

type FuncTestEventLogDeployParams struct {
}

func funcTestEventLogDeployThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestEventLogDeploy")
	params := &FuncTestEventLogDeployParams{
	}
	funcTestEventLogDeploy(ctx, params)
	ctx.Log("testcore.funcTestEventLogDeploy ok")
}

type FuncTestEventLogEventDataParams struct {
}

func funcTestEventLogEventDataThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestEventLogEventData")
	params := &FuncTestEventLogEventDataParams{
	}
	funcTestEventLogEventData(ctx, params)
	ctx.Log("testcore.funcTestEventLogEventData ok")
}

type FuncTestEventLogGenericDataParams struct {
	Counter wasmlib.ScImmutableInt64
}

func funcTestEventLogGenericDataThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestEventLogGenericData")
	p := ctx.Params()
	params := &FuncTestEventLogGenericDataParams{
		Counter: p.GetInt64(ParamCounter),
	}
	ctx.Require(params.Counter.Exists(), "missing mandatory counter")
	funcTestEventLogGenericData(ctx, params)
	ctx.Log("testcore.funcTestEventLogGenericData ok")
}

type FuncTestPanicFullEPParams struct {
}

func funcTestPanicFullEPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcTestPanicFullEP")
	params := &FuncTestPanicFullEPParams{
	}
	funcTestPanicFullEP(ctx, params)
	ctx.Log("testcore.funcTestPanicFullEP ok")
}

type FuncWithdrawToChainParams struct {
	ChainId wasmlib.ScImmutableChainId
}

func funcWithdrawToChainThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testcore.funcWithdrawToChain")
	p := ctx.Params()
	params := &FuncWithdrawToChainParams{
		ChainId: p.GetChainId(ParamChainId),
	}
	ctx.Require(params.ChainId.Exists(), "missing mandatory chainId")
	funcWithdrawToChain(ctx, params)
	ctx.Log("testcore.funcWithdrawToChain ok")
}

type ViewCheckContextFromViewEPParams struct {
	AgentId         wasmlib.ScImmutableAgentId
	ChainId         wasmlib.ScImmutableChainId
	ChainOwnerId    wasmlib.ScImmutableAgentId
	ContractCreator wasmlib.ScImmutableAgentId
	ContractId      wasmlib.ScImmutableContractId
}

func viewCheckContextFromViewEPThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewCheckContextFromViewEP")
	p := ctx.Params()
	params := &ViewCheckContextFromViewEPParams{
		AgentId:         p.GetAgentId(ParamAgentId),
		ChainId:         p.GetChainId(ParamChainId),
		ChainOwnerId:    p.GetAgentId(ParamChainOwnerId),
		ContractCreator: p.GetAgentId(ParamContractCreator),
		ContractId:      p.GetContractId(ParamContractId),
	}
	ctx.Require(params.AgentId.Exists(), "missing mandatory agentId")
	ctx.Require(params.ChainId.Exists(), "missing mandatory chainId")
	ctx.Require(params.ChainOwnerId.Exists(), "missing mandatory chainOwnerId")
	ctx.Require(params.ContractCreator.Exists(), "missing mandatory contractCreator")
	ctx.Require(params.ContractId.Exists(), "missing mandatory contractId")
	viewCheckContextFromViewEP(ctx, params)
	ctx.Log("testcore.viewCheckContextFromViewEP ok")
}

type ViewFibonacciParams struct {
	IntValue wasmlib.ScImmutableInt64
}

func viewFibonacciThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewFibonacci")
	p := ctx.Params()
	params := &ViewFibonacciParams{
		IntValue: p.GetInt64(ParamIntValue),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	viewFibonacci(ctx, params)
	ctx.Log("testcore.viewFibonacci ok")
}

type ViewGetCounterParams struct {
}

func viewGetCounterThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewGetCounter")
	params := &ViewGetCounterParams{
	}
	viewGetCounter(ctx, params)
	ctx.Log("testcore.viewGetCounter ok")
}

type ViewGetIntParams struct {
	Name wasmlib.ScImmutableString
}

func viewGetIntThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewGetInt")
	p := ctx.Params()
	params := &ViewGetIntParams{
		Name: p.GetString(ParamName),
	}
	ctx.Require(params.Name.Exists(), "missing mandatory name")
	viewGetInt(ctx, params)
	ctx.Log("testcore.viewGetInt ok")
}

type ViewJustViewParams struct {
}

func viewJustViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewJustView")
	params := &ViewJustViewParams{
	}
	viewJustView(ctx, params)
	ctx.Log("testcore.viewJustView ok")
}

type ViewPassTypesViewParams struct {
	Hash       wasmlib.ScImmutableHash
	Hname      wasmlib.ScImmutableHname
	HnameZero  wasmlib.ScImmutableHname
	Int64      wasmlib.ScImmutableInt64
	Int64Zero  wasmlib.ScImmutableInt64
	String     wasmlib.ScImmutableString
	StringZero wasmlib.ScImmutableString
}

func viewPassTypesViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewPassTypesView")
	p := ctx.Params()
	params := &ViewPassTypesViewParams{
		Hash:       p.GetHash(ParamHash),
		Hname:      p.GetHname(ParamHname),
		HnameZero:  p.GetHname(ParamHnameZero),
		Int64:      p.GetInt64(ParamInt64),
		Int64Zero:  p.GetInt64(ParamInt64Zero),
		String:     p.GetString(ParamString),
		StringZero: p.GetString(ParamStringZero),
	}
	ctx.Require(params.Hash.Exists(), "missing mandatory hash")
	ctx.Require(params.Hname.Exists(), "missing mandatory hname")
	ctx.Require(params.HnameZero.Exists(), "missing mandatory hnameZero")
	ctx.Require(params.Int64.Exists(), "missing mandatory int64")
	ctx.Require(params.Int64Zero.Exists(), "missing mandatory int64Zero")
	ctx.Require(params.String.Exists(), "missing mandatory string")
	ctx.Require(params.StringZero.Exists(), "missing mandatory stringZero")
	viewPassTypesView(ctx, params)
	ctx.Log("testcore.viewPassTypesView ok")
}

type ViewTestCallPanicViewEPFromViewParams struct {
}

func viewTestCallPanicViewEPFromViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestCallPanicViewEPFromView")
	params := &ViewTestCallPanicViewEPFromViewParams{
	}
	viewTestCallPanicViewEPFromView(ctx, params)
	ctx.Log("testcore.viewTestCallPanicViewEPFromView ok")
}

type ViewTestChainOwnerIDViewParams struct {
}

func viewTestChainOwnerIDViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestChainOwnerIDView")
	params := &ViewTestChainOwnerIDViewParams{
	}
	viewTestChainOwnerIDView(ctx, params)
	ctx.Log("testcore.viewTestChainOwnerIDView ok")
}

type ViewTestContractIDViewParams struct {
}

func viewTestContractIDViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestContractIDView")
	params := &ViewTestContractIDViewParams{
	}
	viewTestContractIDView(ctx, params)
	ctx.Log("testcore.viewTestContractIDView ok")
}

type ViewTestPanicViewEPParams struct {
}

func viewTestPanicViewEPThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestPanicViewEP")
	params := &ViewTestPanicViewEPParams{
	}
	viewTestPanicViewEP(ctx, params)
	ctx.Log("testcore.viewTestPanicViewEP ok")
}

type ViewTestSandboxCallParams struct {
}

func viewTestSandboxCallThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("testcore.viewTestSandboxCall")
	params := &ViewTestSandboxCallParams{
	}
	viewTestSandboxCall(ctx, params)
	ctx.Log("testcore.viewTestSandboxCall ok")
}
