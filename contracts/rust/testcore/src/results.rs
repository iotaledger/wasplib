// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

pub struct MutableFuncCallOnChainResults {
    pub(crate) id: i32,
}

impl MutableFuncCallOnChainResults {
    pub fn int_value(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_INT_VALUE))
    }
}

pub struct ImmutableFuncCallOnChainResults {
    pub(crate) id: i32,
}

impl ImmutableFuncCallOnChainResults {
    pub fn int_value(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_INT_VALUE))
    }
}

pub struct MutableFuncCheckContextFromFullEPResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncCheckContextFromFullEPResults {
    pub(crate) id: i32,
}

pub struct MutableFuncDoNothingResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncDoNothingResults {
    pub(crate) id: i32,
}

pub struct MutableFuncGetMintedSupplyResults {
    pub(crate) id: i32,
}

impl MutableFuncGetMintedSupplyResults {
    pub fn minted_color(&self) -> ScMutableColor {
        ScMutableColor::new(self.id, idx_map(IDX_RESULT_MINTED_COLOR))
    }

    pub fn minted_supply(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_MINTED_SUPPLY))
    }
}

pub struct ImmutableFuncGetMintedSupplyResults {
    pub(crate) id: i32,
}

impl ImmutableFuncGetMintedSupplyResults {
    pub fn minted_color(&self) -> ScImmutableColor {
        ScImmutableColor::new(self.id, idx_map(IDX_RESULT_MINTED_COLOR))
    }

    pub fn minted_supply(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_MINTED_SUPPLY))
    }
}

pub struct MutableFuncIncCounterResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncIncCounterResults {
    pub(crate) id: i32,
}

pub struct MutableFuncInitResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncInitResults {
    pub(crate) id: i32,
}

pub struct MutableFuncPassTypesFullResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncPassTypesFullResults {
    pub(crate) id: i32,
}

pub struct MutableFuncRunRecursionResults {
    pub(crate) id: i32,
}

impl MutableFuncRunRecursionResults {
    pub fn int_value(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_INT_VALUE))
    }
}

pub struct ImmutableFuncRunRecursionResults {
    pub(crate) id: i32,
}

impl ImmutableFuncRunRecursionResults {
    pub fn int_value(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_INT_VALUE))
    }
}

pub struct MutableFuncSendToAddressResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncSendToAddressResults {
    pub(crate) id: i32,
}

pub struct MutableFuncSetIntResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncSetIntResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTestCallPanicFullEPResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTestCallPanicFullEPResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTestCallPanicViewEPFromFullResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTestCallPanicViewEPFromFullResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTestChainOwnerIDFullResults {
    pub(crate) id: i32,
}

impl MutableFuncTestChainOwnerIDFullResults {
    pub fn chain_owner_id(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_RESULT_CHAIN_OWNER_ID))
    }
}

pub struct ImmutableFuncTestChainOwnerIDFullResults {
    pub(crate) id: i32,
}

impl ImmutableFuncTestChainOwnerIDFullResults {
    pub fn chain_owner_id(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_RESULT_CHAIN_OWNER_ID))
    }
}

pub struct MutableFuncTestEventLogDeployResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTestEventLogDeployResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTestEventLogEventDataResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTestEventLogEventDataResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTestEventLogGenericDataResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTestEventLogGenericDataResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTestPanicFullEPResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTestPanicFullEPResults {
    pub(crate) id: i32,
}

pub struct MutableFuncWithdrawToChainResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncWithdrawToChainResults {
    pub(crate) id: i32,
}

pub struct MutableViewCheckContextFromViewEPResults {
    pub(crate) id: i32,
}

pub struct ImmutableViewCheckContextFromViewEPResults {
    pub(crate) id: i32,
}

pub struct MutableViewFibonacciResults {
    pub(crate) id: i32,
}

impl MutableViewFibonacciResults {
    pub fn int_value(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_INT_VALUE))
    }
}

pub struct ImmutableViewFibonacciResults {
    pub(crate) id: i32,
}

impl ImmutableViewFibonacciResults {
    pub fn int_value(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_INT_VALUE))
    }
}

pub struct MutableViewGetCounterResults {
    pub(crate) id: i32,
}

impl MutableViewGetCounterResults {
    pub fn counter(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_COUNTER))
    }
}

pub struct ImmutableViewGetCounterResults {
    pub(crate) id: i32,
}

impl ImmutableViewGetCounterResults {
    pub fn counter(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_COUNTER))
    }
}

pub struct MutableViewGetIntResults {
    pub(crate) id: i32,
}

pub struct ImmutableViewGetIntResults {
    pub(crate) id: i32,
}

pub struct MutableViewJustViewResults {
    pub(crate) id: i32,
}

pub struct ImmutableViewJustViewResults {
    pub(crate) id: i32,
}

pub struct MutableViewPassTypesViewResults {
    pub(crate) id: i32,
}

pub struct ImmutableViewPassTypesViewResults {
    pub(crate) id: i32,
}

pub struct MutableViewTestCallPanicViewEPFromViewResults {
    pub(crate) id: i32,
}

pub struct ImmutableViewTestCallPanicViewEPFromViewResults {
    pub(crate) id: i32,
}

pub struct MutableViewTestChainOwnerIDViewResults {
    pub(crate) id: i32,
}

impl MutableViewTestChainOwnerIDViewResults {
    pub fn chain_owner_id(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_RESULT_CHAIN_OWNER_ID))
    }
}

pub struct ImmutableViewTestChainOwnerIDViewResults {
    pub(crate) id: i32,
}

impl ImmutableViewTestChainOwnerIDViewResults {
    pub fn chain_owner_id(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_RESULT_CHAIN_OWNER_ID))
    }
}

pub struct MutableViewTestPanicViewEPResults {
    pub(crate) id: i32,
}

pub struct ImmutableViewTestPanicViewEPResults {
    pub(crate) id: i32,
}

pub struct MutableViewTestSandboxCallResults {
    pub(crate) id: i32,
}

impl MutableViewTestSandboxCallResults {
    pub fn sandbox_call(&self) -> ScMutableString {
        ScMutableString::new(self.id, idx_map(IDX_RESULT_SANDBOX_CALL))
    }
}

pub struct ImmutableViewTestSandboxCallResults {
    pub(crate) id: i32,
}

impl ImmutableViewTestSandboxCallResults {
    pub fn sandbox_call(&self) -> ScImmutableString {
        ScImmutableString::new(self.id, idx_map(IDX_RESULT_SANDBOX_CALL))
    }
}
