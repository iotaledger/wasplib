// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use std::ptr;

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct CallOnChainCall {
    pub func: ScFunc,
    pub params: MutableCallOnChainParams,
    pub results: ImmutableCallOnChainResults,
}

impl CallOnChainCall {
    pub fn new(_ctx: &ScFuncContext) -> CallOnChainCall {
        let mut f = CallOnChainCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CALL_ON_CHAIN),
            params: MutableCallOnChainParams { id: 0 },
            results: ImmutableCallOnChainResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
}

pub struct CheckContextFromFullEPCall {
    pub func: ScFunc,
    pub params: MutableCheckContextFromFullEPParams,
}

impl CheckContextFromFullEPCall {
    pub fn new(_ctx: &ScFuncContext) -> CheckContextFromFullEPCall {
        let mut f = CheckContextFromFullEPCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CHECK_CONTEXT_FROM_FULL_EP),
            params: MutableCheckContextFromFullEPParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct DoNothingCall {
    pub func: ScFunc,
}

impl DoNothingCall {
    pub fn new(_ctx: &ScFuncContext) -> DoNothingCall {
        DoNothingCall {
            func: ScFunc::new(HSC_NAME, HFUNC_DO_NOTHING),
        }
    }
}

pub struct GetMintedSupplyCall {
    pub func: ScFunc,
    pub results: ImmutableGetMintedSupplyResults,
}

impl GetMintedSupplyCall {
    pub fn new(_ctx: &ScFuncContext) -> GetMintedSupplyCall {
        let mut f = GetMintedSupplyCall {
            func: ScFunc::new(HSC_NAME, HFUNC_GET_MINTED_SUPPLY),
            results: ImmutableGetMintedSupplyResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
}

pub struct IncCounterCall {
    pub func: ScFunc,
}

impl IncCounterCall {
    pub fn new(_ctx: &ScFuncContext) -> IncCounterCall {
        IncCounterCall {
            func: ScFunc::new(HSC_NAME, HFUNC_INC_COUNTER),
        }
    }
}

pub struct InitCall {
    pub func: ScFunc,
}

impl InitCall {
    pub fn new(_ctx: &ScFuncContext) -> InitCall {
        InitCall {
            func: ScFunc::new(HSC_NAME, HFUNC_INIT),
        }
    }
}

pub struct PassTypesFullCall {
    pub func: ScFunc,
    pub params: MutablePassTypesFullParams,
}

impl PassTypesFullCall {
    pub fn new(_ctx: &ScFuncContext) -> PassTypesFullCall {
        let mut f = PassTypesFullCall {
            func: ScFunc::new(HSC_NAME, HFUNC_PASS_TYPES_FULL),
            params: MutablePassTypesFullParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct RunRecursionCall {
    pub func: ScFunc,
    pub params: MutableRunRecursionParams,
    pub results: ImmutableRunRecursionResults,
}

impl RunRecursionCall {
    pub fn new(_ctx: &ScFuncContext) -> RunRecursionCall {
        let mut f = RunRecursionCall {
            func: ScFunc::new(HSC_NAME, HFUNC_RUN_RECURSION),
            params: MutableRunRecursionParams { id: 0 },
            results: ImmutableRunRecursionResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
}

pub struct SendToAddressCall {
    pub func: ScFunc,
    pub params: MutableSendToAddressParams,
}

impl SendToAddressCall {
    pub fn new(_ctx: &ScFuncContext) -> SendToAddressCall {
        let mut f = SendToAddressCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SEND_TO_ADDRESS),
            params: MutableSendToAddressParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct SetIntCall {
    pub func: ScFunc,
    pub params: MutableSetIntParams,
}

impl SetIntCall {
    pub fn new(_ctx: &ScFuncContext) -> SetIntCall {
        let mut f = SetIntCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_INT),
            params: MutableSetIntParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct TestCallPanicFullEPCall {
    pub func: ScFunc,
}

impl TestCallPanicFullEPCall {
    pub fn new(_ctx: &ScFuncContext) -> TestCallPanicFullEPCall {
        TestCallPanicFullEPCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TEST_CALL_PANIC_FULL_EP),
        }
    }
}

pub struct TestCallPanicViewEPFromFullCall {
    pub func: ScFunc,
}

impl TestCallPanicViewEPFromFullCall {
    pub fn new(_ctx: &ScFuncContext) -> TestCallPanicViewEPFromFullCall {
        TestCallPanicViewEPFromFullCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TEST_CALL_PANIC_VIEW_EP_FROM_FULL),
        }
    }
}

pub struct TestChainOwnerIDFullCall {
    pub func: ScFunc,
    pub results: ImmutableTestChainOwnerIDFullResults,
}

impl TestChainOwnerIDFullCall {
    pub fn new(_ctx: &ScFuncContext) -> TestChainOwnerIDFullCall {
        let mut f = TestChainOwnerIDFullCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TEST_CHAIN_OWNER_ID_FULL),
            results: ImmutableTestChainOwnerIDFullResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
}

pub struct TestEventLogDeployCall {
    pub func: ScFunc,
}

impl TestEventLogDeployCall {
    pub fn new(_ctx: &ScFuncContext) -> TestEventLogDeployCall {
        TestEventLogDeployCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TEST_EVENT_LOG_DEPLOY),
        }
    }
}

pub struct TestEventLogEventDataCall {
    pub func: ScFunc,
}

impl TestEventLogEventDataCall {
    pub fn new(_ctx: &ScFuncContext) -> TestEventLogEventDataCall {
        TestEventLogEventDataCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TEST_EVENT_LOG_EVENT_DATA),
        }
    }
}

pub struct TestEventLogGenericDataCall {
    pub func: ScFunc,
    pub params: MutableTestEventLogGenericDataParams,
}

impl TestEventLogGenericDataCall {
    pub fn new(_ctx: &ScFuncContext) -> TestEventLogGenericDataCall {
        let mut f = TestEventLogGenericDataCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TEST_EVENT_LOG_GENERIC_DATA),
            params: MutableTestEventLogGenericDataParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct TestPanicFullEPCall {
    pub func: ScFunc,
}

impl TestPanicFullEPCall {
    pub fn new(_ctx: &ScFuncContext) -> TestPanicFullEPCall {
        TestPanicFullEPCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TEST_PANIC_FULL_EP),
        }
    }
}

pub struct WithdrawToChainCall {
    pub func: ScFunc,
    pub params: MutableWithdrawToChainParams,
}

impl WithdrawToChainCall {
    pub fn new(_ctx: &ScFuncContext) -> WithdrawToChainCall {
        let mut f = WithdrawToChainCall {
            func: ScFunc::new(HSC_NAME, HFUNC_WITHDRAW_TO_CHAIN),
            params: MutableWithdrawToChainParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct CheckContextFromViewEPCall {
    pub func: ScView,
    pub params: MutableCheckContextFromViewEPParams,
}

impl CheckContextFromViewEPCall {
    pub fn new(_ctx: &ScFuncContext) -> CheckContextFromViewEPCall {
        let mut f = CheckContextFromViewEPCall {
            func: ScView::new(HSC_NAME, HVIEW_CHECK_CONTEXT_FROM_VIEW_EP),
            params: MutableCheckContextFromViewEPParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> CheckContextFromViewEPCall {
        CheckContextFromViewEPCall::new(&ScFuncContext {})
    }
}

pub struct FibonacciCall {
    pub func: ScView,
    pub params: MutableFibonacciParams,
    pub results: ImmutableFibonacciResults,
}

impl FibonacciCall {
    pub fn new(_ctx: &ScFuncContext) -> FibonacciCall {
        let mut f = FibonacciCall {
            func: ScView::new(HSC_NAME, HVIEW_FIBONACCI),
            params: MutableFibonacciParams { id: 0 },
            results: ImmutableFibonacciResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> FibonacciCall {
        FibonacciCall::new(&ScFuncContext {})
    }
}

pub struct GetCounterCall {
    pub func: ScView,
    pub results: ImmutableGetCounterResults,
}

impl GetCounterCall {
    pub fn new(_ctx: &ScFuncContext) -> GetCounterCall {
        let mut f = GetCounterCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_COUNTER),
            results: ImmutableGetCounterResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> GetCounterCall {
        GetCounterCall::new(&ScFuncContext {})
    }
}

pub struct GetIntCall {
    pub func: ScView,
    pub params: MutableGetIntParams,
    pub results: ImmutableGetIntResults,
}

impl GetIntCall {
    pub fn new(_ctx: &ScFuncContext) -> GetIntCall {
        let mut f = GetIntCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_INT),
            params: MutableGetIntParams { id: 0 },
            results: ImmutableGetIntResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> GetIntCall {
        GetIntCall::new(&ScFuncContext {})
    }
}

pub struct JustViewCall {
    pub func: ScView,
}

impl JustViewCall {
    pub fn new(_ctx: &ScFuncContext) -> JustViewCall {
        JustViewCall {
            func: ScView::new(HSC_NAME, HVIEW_JUST_VIEW),
        }
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> JustViewCall {
        JustViewCall::new(&ScFuncContext {})
    }
}

pub struct PassTypesViewCall {
    pub func: ScView,
    pub params: MutablePassTypesViewParams,
}

impl PassTypesViewCall {
    pub fn new(_ctx: &ScFuncContext) -> PassTypesViewCall {
        let mut f = PassTypesViewCall {
            func: ScView::new(HSC_NAME, HVIEW_PASS_TYPES_VIEW),
            params: MutablePassTypesViewParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> PassTypesViewCall {
        PassTypesViewCall::new(&ScFuncContext {})
    }
}

pub struct TestCallPanicViewEPFromViewCall {
    pub func: ScView,
}

impl TestCallPanicViewEPFromViewCall {
    pub fn new(_ctx: &ScFuncContext) -> TestCallPanicViewEPFromViewCall {
        TestCallPanicViewEPFromViewCall {
            func: ScView::new(HSC_NAME, HVIEW_TEST_CALL_PANIC_VIEW_EP_FROM_VIEW),
        }
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> TestCallPanicViewEPFromViewCall {
        TestCallPanicViewEPFromViewCall::new(&ScFuncContext {})
    }
}

pub struct TestChainOwnerIDViewCall {
    pub func: ScView,
    pub results: ImmutableTestChainOwnerIDViewResults,
}

impl TestChainOwnerIDViewCall {
    pub fn new(_ctx: &ScFuncContext) -> TestChainOwnerIDViewCall {
        let mut f = TestChainOwnerIDViewCall {
            func: ScView::new(HSC_NAME, HVIEW_TEST_CHAIN_OWNER_ID_VIEW),
            results: ImmutableTestChainOwnerIDViewResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> TestChainOwnerIDViewCall {
        TestChainOwnerIDViewCall::new(&ScFuncContext {})
    }
}

pub struct TestPanicViewEPCall {
    pub func: ScView,
}

impl TestPanicViewEPCall {
    pub fn new(_ctx: &ScFuncContext) -> TestPanicViewEPCall {
        TestPanicViewEPCall {
            func: ScView::new(HSC_NAME, HVIEW_TEST_PANIC_VIEW_EP),
        }
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> TestPanicViewEPCall {
        TestPanicViewEPCall::new(&ScFuncContext {})
    }
}

pub struct TestSandboxCallCall {
    pub func: ScView,
    pub results: ImmutableTestSandboxCallResults,
}

impl TestSandboxCallCall {
    pub fn new(_ctx: &ScFuncContext) -> TestSandboxCallCall {
        let mut f = TestSandboxCallCall {
            func: ScView::new(HSC_NAME, HVIEW_TEST_SANDBOX_CALL),
            results: ImmutableTestSandboxCallResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> TestSandboxCallCall {
        TestSandboxCallCall::new(&ScFuncContext {})
    }
}
