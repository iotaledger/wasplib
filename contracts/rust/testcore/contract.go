// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package testcore

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type TestCoreFunc struct {
	sc wasmlib.ScContractFunc
}

func NewTestCoreFunc(ctx wasmlib.ScFuncContext) *TestCoreFunc {
	return &TestCoreFunc{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *TestCoreFunc) Delay(seconds int64) *TestCoreFunc {
	f.sc.Delay(seconds)
	return f
}

func (f *TestCoreFunc) OfContract(contract wasmlib.ScHname) *TestCoreFunc {
	f.sc.OfContract(contract)
	return f
}

func (f *TestCoreFunc) Post() *TestCoreFunc {
	f.sc.Post()
	return f
}

func (f *TestCoreFunc) PostToChain(chainId wasmlib.ScChainId) *TestCoreFunc {
	f.sc.PostToChain(chainId)
	return f
}

func (f *TestCoreFunc) CallOnChain(params MutableFuncCallOnChainParams, transfer wasmlib.ScTransfers) ImmutableFuncCallOnChainResults {
	f.sc.Run(HFuncCallOnChain, params.id, &transfer)
	return ImmutableFuncCallOnChainResults{id: f.sc.ResultMapId()}
}

func (f *TestCoreFunc) CheckContextFromFullEP(params MutableFuncCheckContextFromFullEPParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncCheckContextFromFullEP, params.id, &transfer)
}

func (f *TestCoreFunc) DoNothing(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncDoNothing, 0, &transfer)
}

func (f *TestCoreFunc) GetMintedSupply(transfer wasmlib.ScTransfers) ImmutableFuncGetMintedSupplyResults {
	f.sc.Run(HFuncGetMintedSupply, 0, &transfer)
	return ImmutableFuncGetMintedSupplyResults{id: f.sc.ResultMapId()}
}

func (f *TestCoreFunc) IncCounter(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncIncCounter, 0, &transfer)
}

func (f *TestCoreFunc) Init(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncInit, 0, &transfer)
}

func (f *TestCoreFunc) PassTypesFull(params MutableFuncPassTypesFullParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncPassTypesFull, params.id, &transfer)
}

func (f *TestCoreFunc) RunRecursion(params MutableFuncRunRecursionParams, transfer wasmlib.ScTransfers) ImmutableFuncRunRecursionResults {
	f.sc.Run(HFuncRunRecursion, params.id, &transfer)
	return ImmutableFuncRunRecursionResults{id: f.sc.ResultMapId()}
}

func (f *TestCoreFunc) SendToAddress(params MutableFuncSendToAddressParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncSendToAddress, params.id, &transfer)
}

func (f *TestCoreFunc) SetInt(params MutableFuncSetIntParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncSetInt, params.id, &transfer)
}

func (f *TestCoreFunc) TestCallPanicFullEP(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTestCallPanicFullEP, 0, &transfer)
}

func (f *TestCoreFunc) TestCallPanicViewEPFromFull(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTestCallPanicViewEPFromFull, 0, &transfer)
}

func (f *TestCoreFunc) TestChainOwnerIDFull(transfer wasmlib.ScTransfers) ImmutableFuncTestChainOwnerIDFullResults {
	f.sc.Run(HFuncTestChainOwnerIDFull, 0, &transfer)
	return ImmutableFuncTestChainOwnerIDFullResults{id: f.sc.ResultMapId()}
}

func (f *TestCoreFunc) TestEventLogDeploy(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTestEventLogDeploy, 0, &transfer)
}

func (f *TestCoreFunc) TestEventLogEventData(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTestEventLogEventData, 0, &transfer)
}

func (f *TestCoreFunc) TestEventLogGenericData(params MutableFuncTestEventLogGenericDataParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTestEventLogGenericData, params.id, &transfer)
}

func (f *TestCoreFunc) TestPanicFullEP(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTestPanicFullEP, 0, &transfer)
}

func (f *TestCoreFunc) WithdrawToChain(params MutableFuncWithdrawToChainParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncWithdrawToChain, params.id, &transfer)
}

func (f *TestCoreFunc) CheckContextFromViewEP(params MutableViewCheckContextFromViewEPParams) {
	f.sc.Run(HViewCheckContextFromViewEP, params.id, nil)
}

func (f *TestCoreFunc) Fibonacci(params MutableViewFibonacciParams) ImmutableViewFibonacciResults {
	f.sc.Run(HViewFibonacci, params.id, nil)
	return ImmutableViewFibonacciResults{id: f.sc.ResultMapId()}
}

func (f *TestCoreFunc) GetCounter() ImmutableViewGetCounterResults {
	f.sc.Run(HViewGetCounter, 0, nil)
	return ImmutableViewGetCounterResults{id: f.sc.ResultMapId()}
}

func (f *TestCoreFunc) GetInt(params MutableViewGetIntParams) {
	f.sc.Run(HViewGetInt, params.id, nil)
}

func (f *TestCoreFunc) JustView() {
	f.sc.Run(HViewJustView, 0, nil)
}

func (f *TestCoreFunc) PassTypesView(params MutableViewPassTypesViewParams) {
	f.sc.Run(HViewPassTypesView, params.id, nil)
}

func (f *TestCoreFunc) TestCallPanicViewEPFromView() {
	f.sc.Run(HViewTestCallPanicViewEPFromView, 0, nil)
}

func (f *TestCoreFunc) TestChainOwnerIDView() ImmutableViewTestChainOwnerIDViewResults {
	f.sc.Run(HViewTestChainOwnerIDView, 0, nil)
	return ImmutableViewTestChainOwnerIDViewResults{id: f.sc.ResultMapId()}
}

func (f *TestCoreFunc) TestPanicViewEP() {
	f.sc.Run(HViewTestPanicViewEP, 0, nil)
}

func (f *TestCoreFunc) TestSandboxCall() ImmutableViewTestSandboxCallResults {
	f.sc.Run(HViewTestSandboxCall, 0, nil)
	return ImmutableViewTestSandboxCallResults{id: f.sc.ResultMapId()}
}

type TestCoreView struct {
	sc wasmlib.ScContractView
}

func NewTestCoreView(ctx wasmlib.ScViewContext) *TestCoreView {
	return &TestCoreView{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *TestCoreView) OfContract(contract wasmlib.ScHname) *TestCoreView {
	v.sc.OfContract(contract)
	return v
}

func (v *TestCoreView) CheckContextFromViewEP(params MutableViewCheckContextFromViewEPParams) {
	v.sc.Run(HViewCheckContextFromViewEP, params.id)
}

func (v *TestCoreView) Fibonacci(params MutableViewFibonacciParams) ImmutableViewFibonacciResults {
	v.sc.Run(HViewFibonacci, params.id)
	return ImmutableViewFibonacciResults{id: v.sc.ResultMapId()}
}

func (v *TestCoreView) GetCounter() ImmutableViewGetCounterResults {
	v.sc.Run(HViewGetCounter, 0)
	return ImmutableViewGetCounterResults{id: v.sc.ResultMapId()}
}

func (v *TestCoreView) GetInt(params MutableViewGetIntParams) {
	v.sc.Run(HViewGetInt, params.id)
}

func (v *TestCoreView) JustView() {
	v.sc.Run(HViewJustView, 0)
}

func (v *TestCoreView) PassTypesView(params MutableViewPassTypesViewParams) {
	v.sc.Run(HViewPassTypesView, params.id)
}

func (v *TestCoreView) TestCallPanicViewEPFromView() {
	v.sc.Run(HViewTestCallPanicViewEPFromView, 0)
}

func (v *TestCoreView) TestChainOwnerIDView() ImmutableViewTestChainOwnerIDViewResults {
	v.sc.Run(HViewTestChainOwnerIDView, 0)
	return ImmutableViewTestChainOwnerIDViewResults{id: v.sc.ResultMapId()}
}

func (v *TestCoreView) TestPanicViewEP() {
	v.sc.Run(HViewTestPanicViewEP, 0)
}

func (v *TestCoreView) TestSandboxCall() ImmutableViewTestSandboxCallResults {
	v.sc.Run(HViewTestSandboxCall, 0)
	return ImmutableViewTestSandboxCallResults{id: v.sc.ResultMapId()}
}
