// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package testcore

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type CallOnChainCall struct {
	Func    wasmlib.ScFunc
	Params  MutableCallOnChainParams
	Results ImmutableCallOnChainResults
}

func NewCallOnChainCall(ctx wasmlib.ScFuncContext) *CallOnChainCall {
	f := &CallOnChainCall{}
	f.Func.Init(HScName, HFuncCallOnChain, &f.Params.id, &f.Results.id)
	return f
}

type CheckContextFromFullEPCall struct {
	Func   wasmlib.ScFunc
	Params MutableCheckContextFromFullEPParams
}

func NewCheckContextFromFullEPCall(ctx wasmlib.ScFuncContext) *CheckContextFromFullEPCall {
	f := &CheckContextFromFullEPCall{}
	f.Func.Init(HScName, HFuncCheckContextFromFullEP, &f.Params.id, nil)
	return f
}

type DoNothingCall struct {
	Func wasmlib.ScFunc
}

func NewDoNothingCall(ctx wasmlib.ScFuncContext) *DoNothingCall {
	f := &DoNothingCall{}
	f.Func.Init(HScName, HFuncDoNothing, nil, nil)
	return f
}

type GetMintedSupplyCall struct {
	Func    wasmlib.ScFunc
	Results ImmutableGetMintedSupplyResults
}

func NewGetMintedSupplyCall(ctx wasmlib.ScFuncContext) *GetMintedSupplyCall {
	f := &GetMintedSupplyCall{}
	f.Func.Init(HScName, HFuncGetMintedSupply, nil, &f.Results.id)
	return f
}

type IncCounterCall struct {
	Func wasmlib.ScFunc
}

func NewIncCounterCall(ctx wasmlib.ScFuncContext) *IncCounterCall {
	f := &IncCounterCall{}
	f.Func.Init(HScName, HFuncIncCounter, nil, nil)
	return f
}

type InitCall struct {
	Func wasmlib.ScFunc
}

func NewInitCall(ctx wasmlib.ScFuncContext) *InitCall {
	f := &InitCall{}
	f.Func.Init(HScName, HFuncInit, nil, nil)
	return f
}

type PassTypesFullCall struct {
	Func   wasmlib.ScFunc
	Params MutablePassTypesFullParams
}

func NewPassTypesFullCall(ctx wasmlib.ScFuncContext) *PassTypesFullCall {
	f := &PassTypesFullCall{}
	f.Func.Init(HScName, HFuncPassTypesFull, &f.Params.id, nil)
	return f
}

type RunRecursionCall struct {
	Func    wasmlib.ScFunc
	Params  MutableRunRecursionParams
	Results ImmutableRunRecursionResults
}

func NewRunRecursionCall(ctx wasmlib.ScFuncContext) *RunRecursionCall {
	f := &RunRecursionCall{}
	f.Func.Init(HScName, HFuncRunRecursion, &f.Params.id, &f.Results.id)
	return f
}

type SendToAddressCall struct {
	Func   wasmlib.ScFunc
	Params MutableSendToAddressParams
}

func NewSendToAddressCall(ctx wasmlib.ScFuncContext) *SendToAddressCall {
	f := &SendToAddressCall{}
	f.Func.Init(HScName, HFuncSendToAddress, &f.Params.id, nil)
	return f
}

type SetIntCall struct {
	Func   wasmlib.ScFunc
	Params MutableSetIntParams
}

func NewSetIntCall(ctx wasmlib.ScFuncContext) *SetIntCall {
	f := &SetIntCall{}
	f.Func.Init(HScName, HFuncSetInt, &f.Params.id, nil)
	return f
}

type TestCallPanicFullEPCall struct {
	Func wasmlib.ScFunc
}

func NewTestCallPanicFullEPCall(ctx wasmlib.ScFuncContext) *TestCallPanicFullEPCall {
	f := &TestCallPanicFullEPCall{}
	f.Func.Init(HScName, HFuncTestCallPanicFullEP, nil, nil)
	return f
}

type TestCallPanicViewEPFromFullCall struct {
	Func wasmlib.ScFunc
}

func NewTestCallPanicViewEPFromFullCall(ctx wasmlib.ScFuncContext) *TestCallPanicViewEPFromFullCall {
	f := &TestCallPanicViewEPFromFullCall{}
	f.Func.Init(HScName, HFuncTestCallPanicViewEPFromFull, nil, nil)
	return f
}

type TestChainOwnerIDFullCall struct {
	Func    wasmlib.ScFunc
	Results ImmutableTestChainOwnerIDFullResults
}

func NewTestChainOwnerIDFullCall(ctx wasmlib.ScFuncContext) *TestChainOwnerIDFullCall {
	f := &TestChainOwnerIDFullCall{}
	f.Func.Init(HScName, HFuncTestChainOwnerIDFull, nil, &f.Results.id)
	return f
}

type TestEventLogDeployCall struct {
	Func wasmlib.ScFunc
}

func NewTestEventLogDeployCall(ctx wasmlib.ScFuncContext) *TestEventLogDeployCall {
	f := &TestEventLogDeployCall{}
	f.Func.Init(HScName, HFuncTestEventLogDeploy, nil, nil)
	return f
}

type TestEventLogEventDataCall struct {
	Func wasmlib.ScFunc
}

func NewTestEventLogEventDataCall(ctx wasmlib.ScFuncContext) *TestEventLogEventDataCall {
	f := &TestEventLogEventDataCall{}
	f.Func.Init(HScName, HFuncTestEventLogEventData, nil, nil)
	return f
}

type TestEventLogGenericDataCall struct {
	Func   wasmlib.ScFunc
	Params MutableTestEventLogGenericDataParams
}

func NewTestEventLogGenericDataCall(ctx wasmlib.ScFuncContext) *TestEventLogGenericDataCall {
	f := &TestEventLogGenericDataCall{}
	f.Func.Init(HScName, HFuncTestEventLogGenericData, &f.Params.id, nil)
	return f
}

type TestPanicFullEPCall struct {
	Func wasmlib.ScFunc
}

func NewTestPanicFullEPCall(ctx wasmlib.ScFuncContext) *TestPanicFullEPCall {
	f := &TestPanicFullEPCall{}
	f.Func.Init(HScName, HFuncTestPanicFullEP, nil, nil)
	return f
}

type WithdrawToChainCall struct {
	Func   wasmlib.ScFunc
	Params MutableWithdrawToChainParams
}

func NewWithdrawToChainCall(ctx wasmlib.ScFuncContext) *WithdrawToChainCall {
	f := &WithdrawToChainCall{}
	f.Func.Init(HScName, HFuncWithdrawToChain, &f.Params.id, nil)
	return f
}

type CheckContextFromViewEPCall struct {
	Func   wasmlib.ScView
	Params MutableCheckContextFromViewEPParams
}

func NewCheckContextFromViewEPCall(ctx wasmlib.ScFuncContext) *CheckContextFromViewEPCall {
	f := &CheckContextFromViewEPCall{}
	f.Func.Init(HScName, HViewCheckContextFromViewEP, &f.Params.id, nil)
	return f
}

func NewCheckContextFromViewEPCallFromView(ctx wasmlib.ScViewContext) *CheckContextFromViewEPCall {
	f := &CheckContextFromViewEPCall{}
	f.Func.Init(HScName, HViewCheckContextFromViewEP, &f.Params.id, nil)
	return f
}

type FibonacciCall struct {
	Func    wasmlib.ScView
	Params  MutableFibonacciParams
	Results ImmutableFibonacciResults
}

func NewFibonacciCall(ctx wasmlib.ScFuncContext) *FibonacciCall {
	f := &FibonacciCall{}
	f.Func.Init(HScName, HViewFibonacci, &f.Params.id, &f.Results.id)
	return f
}

func NewFibonacciCallFromView(ctx wasmlib.ScViewContext) *FibonacciCall {
	f := &FibonacciCall{}
	f.Func.Init(HScName, HViewFibonacci, &f.Params.id, &f.Results.id)
	return f
}

type GetCounterCall struct {
	Func    wasmlib.ScView
	Results ImmutableGetCounterResults
}

func NewGetCounterCall(ctx wasmlib.ScFuncContext) *GetCounterCall {
	f := &GetCounterCall{}
	f.Func.Init(HScName, HViewGetCounter, nil, &f.Results.id)
	return f
}

func NewGetCounterCallFromView(ctx wasmlib.ScViewContext) *GetCounterCall {
	f := &GetCounterCall{}
	f.Func.Init(HScName, HViewGetCounter, nil, &f.Results.id)
	return f
}

type GetIntCall struct {
	Func   wasmlib.ScView
	Params MutableGetIntParams
}

func NewGetIntCall(ctx wasmlib.ScFuncContext) *GetIntCall {
	f := &GetIntCall{}
	f.Func.Init(HScName, HViewGetInt, &f.Params.id, nil)
	return f
}

func NewGetIntCallFromView(ctx wasmlib.ScViewContext) *GetIntCall {
	f := &GetIntCall{}
	f.Func.Init(HScName, HViewGetInt, &f.Params.id, nil)
	return f
}

type JustViewCall struct {
	Func wasmlib.ScView
}

func NewJustViewCall(ctx wasmlib.ScFuncContext) *JustViewCall {
	f := &JustViewCall{}
	f.Func.Init(HScName, HViewJustView, nil, nil)
	return f
}

func NewJustViewCallFromView(ctx wasmlib.ScViewContext) *JustViewCall {
	f := &JustViewCall{}
	f.Func.Init(HScName, HViewJustView, nil, nil)
	return f
}

type PassTypesViewCall struct {
	Func   wasmlib.ScView
	Params MutablePassTypesViewParams
}

func NewPassTypesViewCall(ctx wasmlib.ScFuncContext) *PassTypesViewCall {
	f := &PassTypesViewCall{}
	f.Func.Init(HScName, HViewPassTypesView, &f.Params.id, nil)
	return f
}

func NewPassTypesViewCallFromView(ctx wasmlib.ScViewContext) *PassTypesViewCall {
	f := &PassTypesViewCall{}
	f.Func.Init(HScName, HViewPassTypesView, &f.Params.id, nil)
	return f
}

type TestCallPanicViewEPFromViewCall struct {
	Func wasmlib.ScView
}

func NewTestCallPanicViewEPFromViewCall(ctx wasmlib.ScFuncContext) *TestCallPanicViewEPFromViewCall {
	f := &TestCallPanicViewEPFromViewCall{}
	f.Func.Init(HScName, HViewTestCallPanicViewEPFromView, nil, nil)
	return f
}

func NewTestCallPanicViewEPFromViewCallFromView(ctx wasmlib.ScViewContext) *TestCallPanicViewEPFromViewCall {
	f := &TestCallPanicViewEPFromViewCall{}
	f.Func.Init(HScName, HViewTestCallPanicViewEPFromView, nil, nil)
	return f
}

type TestChainOwnerIDViewCall struct {
	Func    wasmlib.ScView
	Results ImmutableTestChainOwnerIDViewResults
}

func NewTestChainOwnerIDViewCall(ctx wasmlib.ScFuncContext) *TestChainOwnerIDViewCall {
	f := &TestChainOwnerIDViewCall{}
	f.Func.Init(HScName, HViewTestChainOwnerIDView, nil, &f.Results.id)
	return f
}

func NewTestChainOwnerIDViewCallFromView(ctx wasmlib.ScViewContext) *TestChainOwnerIDViewCall {
	f := &TestChainOwnerIDViewCall{}
	f.Func.Init(HScName, HViewTestChainOwnerIDView, nil, &f.Results.id)
	return f
}

type TestPanicViewEPCall struct {
	Func wasmlib.ScView
}

func NewTestPanicViewEPCall(ctx wasmlib.ScFuncContext) *TestPanicViewEPCall {
	f := &TestPanicViewEPCall{}
	f.Func.Init(HScName, HViewTestPanicViewEP, nil, nil)
	return f
}

func NewTestPanicViewEPCallFromView(ctx wasmlib.ScViewContext) *TestPanicViewEPCall {
	f := &TestPanicViewEPCall{}
	f.Func.Init(HScName, HViewTestPanicViewEP, nil, nil)
	return f
}

type TestSandboxCallCall struct {
	Func    wasmlib.ScView
	Results ImmutableTestSandboxCallResults
}

func NewTestSandboxCallCall(ctx wasmlib.ScFuncContext) *TestSandboxCallCall {
	f := &TestSandboxCallCall{}
	f.Func.Init(HScName, HViewTestSandboxCall, nil, &f.Results.id)
	return f
}

func NewTestSandboxCallCallFromView(ctx wasmlib.ScViewContext) *TestSandboxCallCall {
	f := &TestSandboxCallCall{}
	f.Func.Init(HScName, HViewTestSandboxCall, nil, &f.Results.id)
	return f
}
