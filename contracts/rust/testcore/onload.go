// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package testcore

import "github.com/iotaledger/wasp/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCallOnChain, funcCallOnChainThunk)
	exports.AddFunc(FuncCheckContextFromFullEP, funcCheckContextFromFullEPThunk)
	exports.AddFunc(FuncDoNothing, funcDoNothingThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncPassTypesFull, funcPassTypesFullThunk)
	exports.AddFunc(FuncRunRecursion, funcRunRecursionThunk)
	exports.AddFunc(FuncSendToAddress, funcSendToAddressThunk)
	exports.AddFunc(FuncSetInt, funcSetIntThunk)
	exports.AddFunc(FuncTestCallPanicFullEP, funcTestCallPanicFullEPThunk)
	exports.AddFunc(FuncTestCallPanicViewEPFromFull, funcTestCallPanicViewEPFromFullThunk)
	exports.AddFunc(FuncTestChainOwnerIDFull, funcTestChainOwnerIDFullThunk)
	exports.AddFunc(FuncTestContractIDFull, funcTestContractIDFullThunk)
	exports.AddFunc(FuncTestEventLogDeploy, funcTestEventLogDeployThunk)
	exports.AddFunc(FuncTestEventLogEventData, funcTestEventLogEventDataThunk)
	exports.AddFunc(FuncTestEventLogGenericData, funcTestEventLogGenericDataThunk)
	exports.AddFunc(FuncTestPanicFullEP, funcTestPanicFullEPThunk)
	exports.AddFunc(FuncWithdrawToChain, funcWithdrawToChainThunk)
	exports.AddView(ViewCheckContextFromViewEP, viewCheckContextFromViewEPThunk)
	exports.AddView(ViewFibonacci, viewFibonacciThunk)
	exports.AddView(ViewGetCounter, viewGetCounterThunk)
	exports.AddView(ViewGetInt, viewGetIntThunk)
	exports.AddView(ViewJustView, viewJustViewThunk)
	exports.AddView(ViewPassTypesView, viewPassTypesViewThunk)
	exports.AddView(ViewTestCallPanicViewEPFromView, viewTestCallPanicViewEPFromViewThunk)
	exports.AddView(ViewTestChainOwnerIDView, viewTestChainOwnerIDViewThunk)
	exports.AddView(ViewTestContractIDView, viewTestContractIDViewThunk)
	exports.AddView(ViewTestPanicViewEP, viewTestPanicViewEPThunk)
	exports.AddView(ViewTestSandboxCall, viewTestSandboxCallThunk)
}

type FuncCallOnChainParams struct {
	HnameContract wasmlib.ScImmutableHname
	HnameEP       wasmlib.ScImmutableHname
	IntValue      wasmlib.ScImmutableInt
}

func funcCallOnChainThunk(ctx *wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncCallOnChainParams{
		HnameContract: p.GetHname(ParamHnameContract),
		HnameEP:       p.GetHname(ParamHnameEP),
		IntValue:      p.GetInt(ParamIntValue),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	funcCallOnChain(ctx, params)
}

type FuncCheckContextFromFullEPParams struct {
	AgentId         wasmlib.ScImmutableAgentId
	Caller          wasmlib.ScImmutableAgentId
	ChainId         wasmlib.ScImmutableChainId
	ChainOwnerId    wasmlib.ScImmutableAgentId
	ContractCreator wasmlib.ScImmutableAgentId
	ContractId      wasmlib.ScImmutableContractId
}

func funcCheckContextFromFullEPThunk(ctx *wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncCheckContextFromFullEPParams{
		AgentId:         p.GetAgentId(ParamAgentId),
		Caller:          p.GetAgentId(ParamCaller),
		ChainId:         p.GetChainId(ParamChainId),
		ChainOwnerId:    p.GetAgentId(ParamChainOwnerId),
		ContractCreator: p.GetAgentId(ParamContractCreator),
		ContractId:      p.GetContractId(ParamContractId),
	}
	ctx.Require(params.AgentId.Exists(), "missing mandatory agentId")
	ctx.Require(params.Caller.Exists(), "missing mandatory caller")
	ctx.Require(params.ChainId.Exists(), "missing mandatory chainId")
	ctx.Require(params.ChainOwnerId.Exists(), "missing mandatory chainOwnerId")
	ctx.Require(params.ContractCreator.Exists(), "missing mandatory contractCreator")
	ctx.Require(params.ContractId.Exists(), "missing mandatory contractId")
	funcCheckContextFromFullEP(ctx, params)
}

type FuncDoNothingParams struct {
}

func funcDoNothingThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncDoNothingParams{
	}
	funcDoNothing(ctx, params)
}

type FuncInitParams struct {
}

func funcInitThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncInitParams{
	}
	funcInit(ctx, params)
}

type FuncPassTypesFullParams struct {
	Hash       wasmlib.ScImmutableHash
	Hname      wasmlib.ScImmutableHname
	HnameZero  wasmlib.ScImmutableHname
	Int64      wasmlib.ScImmutableInt
	Int64Zero  wasmlib.ScImmutableInt
	String     wasmlib.ScImmutableString
	StringZero wasmlib.ScImmutableString
}

func funcPassTypesFullThunk(ctx *wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncPassTypesFullParams{
		Hash:       p.GetHash(ParamHash),
		Hname:      p.GetHname(ParamHname),
		HnameZero:  p.GetHname(ParamHnameZero),
		Int64:      p.GetInt(ParamInt64),
		Int64Zero:  p.GetInt(ParamInt64Zero),
		String:     p.GetString(ParamString),
		StringZero: p.GetString(ParamStringZero),
	}
	ctx.Require(params.Hash.Exists(), "missing mandatory hash")
	ctx.Require(params.Hname.Exists(), "missing mandatory hname")
	ctx.Require(params.HnameZero.Exists(), "missing mandatory hnameZero")
	ctx.Require(params.Int64.Exists(), "missing mandatory int64")
	ctx.Require(params.Int64Zero.Exists(), "missing mandatory int64Zero")
	ctx.Require(params.String.Exists(), "missing mandatory string")
	ctx.Require(params.StringZero.Exists(), "missing mandatory stringZero")
	funcPassTypesFull(ctx, params)
}

type FuncRunRecursionParams struct {
	IntValue wasmlib.ScImmutableInt
}

func funcRunRecursionThunk(ctx *wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncRunRecursionParams{
		IntValue: p.GetInt(ParamIntValue),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	funcRunRecursion(ctx, params)
}

type FuncSendToAddressParams struct {
	Address wasmlib.ScImmutableAddress
}

func funcSendToAddressThunk(ctx *wasmlib.ScFuncContext) {
	ctx.Require(ctx.From(ctx.ContractCreator()), "no permission")

	p := ctx.Params()
	params := &FuncSendToAddressParams{
		Address: p.GetAddress(ParamAddress),
	}
	ctx.Require(params.Address.Exists(), "missing mandatory address")
	funcSendToAddress(ctx, params)
}

type FuncSetIntParams struct {
	IntValue wasmlib.ScImmutableInt
	Name     wasmlib.ScImmutableString
}

func funcSetIntThunk(ctx *wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncSetIntParams{
		IntValue: p.GetInt(ParamIntValue),
		Name:     p.GetString(ParamName),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	ctx.Require(params.Name.Exists(), "missing mandatory name")
	funcSetInt(ctx, params)
}

type FuncTestCallPanicFullEPParams struct {
}

func funcTestCallPanicFullEPThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncTestCallPanicFullEPParams{
	}
	funcTestCallPanicFullEP(ctx, params)
}

type FuncTestCallPanicViewEPFromFullParams struct {
}

func funcTestCallPanicViewEPFromFullThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncTestCallPanicViewEPFromFullParams{
	}
	funcTestCallPanicViewEPFromFull(ctx, params)
}

type FuncTestChainOwnerIDFullParams struct {
}

func funcTestChainOwnerIDFullThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncTestChainOwnerIDFullParams{
	}
	funcTestChainOwnerIDFull(ctx, params)
}

type FuncTestContractIDFullParams struct {
}

func funcTestContractIDFullThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncTestContractIDFullParams{
	}
	funcTestContractIDFull(ctx, params)
}

type FuncTestEventLogDeployParams struct {
}

func funcTestEventLogDeployThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncTestEventLogDeployParams{
	}
	funcTestEventLogDeploy(ctx, params)
}

type FuncTestEventLogEventDataParams struct {
}

func funcTestEventLogEventDataThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncTestEventLogEventDataParams{
	}
	funcTestEventLogEventData(ctx, params)
}

type FuncTestEventLogGenericDataParams struct {
	Counter wasmlib.ScImmutableInt
}

func funcTestEventLogGenericDataThunk(ctx *wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncTestEventLogGenericDataParams{
		Counter: p.GetInt(ParamCounter),
	}
	ctx.Require(params.Counter.Exists(), "missing mandatory counter")
	funcTestEventLogGenericData(ctx, params)
}

type FuncTestPanicFullEPParams struct {
}

func funcTestPanicFullEPThunk(ctx *wasmlib.ScFuncContext) {
	params := &FuncTestPanicFullEPParams{
	}
	funcTestPanicFullEP(ctx, params)
}

type FuncWithdrawToChainParams struct {
	ChainId wasmlib.ScImmutableChainId
}

func funcWithdrawToChainThunk(ctx *wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncWithdrawToChainParams{
		ChainId: p.GetChainId(ParamChainId),
	}
	ctx.Require(params.ChainId.Exists(), "missing mandatory chainId")
	funcWithdrawToChain(ctx, params)
}

type ViewCheckContextFromViewEPParams struct {
	AgentId         wasmlib.ScImmutableAgentId
	ChainId         wasmlib.ScImmutableChainId
	ChainOwnerId    wasmlib.ScImmutableAgentId
	ContractCreator wasmlib.ScImmutableAgentId
	ContractId      wasmlib.ScImmutableContractId
}

func viewCheckContextFromViewEPThunk(ctx *wasmlib.ScViewContext) {
	p := ctx.Params()
	params := &ViewCheckContextFromViewEPParams{
		AgentId:         p.GetAgentId(ParamAgentId),
		ChainId:         p.GetChainId(ParamChainId),
		ChainOwnerId:    p.GetAgentId(ParamChainOwnerId),
		ContractCreator: p.GetAgentId(ParamContractCreator),
		ContractId:      p.GetContractId(ParamContractId),
	}
	ctx.Require(params.AgentId.Exists(), "missing mandatory agentId")
	ctx.Require(params.ChainId.Exists(), "missing mandatory chainId")
	ctx.Require(params.ChainOwnerId.Exists(), "missing mandatory chainOwnerId")
	ctx.Require(params.ContractCreator.Exists(), "missing mandatory contractCreator")
	ctx.Require(params.ContractId.Exists(), "missing mandatory contractId")
	viewCheckContextFromViewEP(ctx, params)
}

type ViewFibonacciParams struct {
	IntValue wasmlib.ScImmutableInt
}

func viewFibonacciThunk(ctx *wasmlib.ScViewContext) {
	p := ctx.Params()
	params := &ViewFibonacciParams{
		IntValue: p.GetInt(ParamIntValue),
	}
	ctx.Require(params.IntValue.Exists(), "missing mandatory intValue")
	viewFibonacci(ctx, params)
}

type ViewGetCounterParams struct {
}

func viewGetCounterThunk(ctx *wasmlib.ScViewContext) {
	params := &ViewGetCounterParams{
	}
	viewGetCounter(ctx, params)
}

type ViewGetIntParams struct {
	Name wasmlib.ScImmutableString
}

func viewGetIntThunk(ctx *wasmlib.ScViewContext) {
	p := ctx.Params()
	params := &ViewGetIntParams{
		Name: p.GetString(ParamName),
	}
	ctx.Require(params.Name.Exists(), "missing mandatory name")
	viewGetInt(ctx, params)
}

type ViewJustViewParams struct {
}

func viewJustViewThunk(ctx *wasmlib.ScViewContext) {
	params := &ViewJustViewParams{
	}
	viewJustView(ctx, params)
}

type ViewPassTypesViewParams struct {
	Hash       wasmlib.ScImmutableHash
	Hname      wasmlib.ScImmutableHname
	HnameZero  wasmlib.ScImmutableHname
	Int64      wasmlib.ScImmutableInt
	Int64Zero  wasmlib.ScImmutableInt
	String     wasmlib.ScImmutableString
	StringZero wasmlib.ScImmutableString
}

func viewPassTypesViewThunk(ctx *wasmlib.ScViewContext) {
	p := ctx.Params()
	params := &ViewPassTypesViewParams{
		Hash:       p.GetHash(ParamHash),
		Hname:      p.GetHname(ParamHname),
		HnameZero:  p.GetHname(ParamHnameZero),
		Int64:      p.GetInt(ParamInt64),
		Int64Zero:  p.GetInt(ParamInt64Zero),
		String:     p.GetString(ParamString),
		StringZero: p.GetString(ParamStringZero),
	}
	ctx.Require(params.Hash.Exists(), "missing mandatory hash")
	ctx.Require(params.Hname.Exists(), "missing mandatory hname")
	ctx.Require(params.HnameZero.Exists(), "missing mandatory hnameZero")
	ctx.Require(params.Int64.Exists(), "missing mandatory int64")
	ctx.Require(params.Int64Zero.Exists(), "missing mandatory int64Zero")
	ctx.Require(params.String.Exists(), "missing mandatory string")
	ctx.Require(params.StringZero.Exists(), "missing mandatory stringZero")
	viewPassTypesView(ctx, params)
}

type ViewTestCallPanicViewEPFromViewParams struct {
}

func viewTestCallPanicViewEPFromViewThunk(ctx *wasmlib.ScViewContext) {
	params := &ViewTestCallPanicViewEPFromViewParams{
	}
	viewTestCallPanicViewEPFromView(ctx, params)
}

type ViewTestChainOwnerIDViewParams struct {
}

func viewTestChainOwnerIDViewThunk(ctx *wasmlib.ScViewContext) {
	params := &ViewTestChainOwnerIDViewParams{
	}
	viewTestChainOwnerIDView(ctx, params)
}

type ViewTestContractIDViewParams struct {
}

func viewTestContractIDViewThunk(ctx *wasmlib.ScViewContext) {
	params := &ViewTestContractIDViewParams{
	}
	viewTestContractIDView(ctx, params)
}

type ViewTestPanicViewEPParams struct {
}

func viewTestPanicViewEPThunk(ctx *wasmlib.ScViewContext) {
	params := &ViewTestPanicViewEPParams{
	}
	viewTestPanicViewEP(ctx, params)
}

type ViewTestSandboxCallParams struct {
}

func viewTestSandboxCallThunk(ctx *wasmlib.ScViewContext) {
	params := &ViewTestSandboxCallParams{
	}
	viewTestSandboxCall(ctx, params)
}
