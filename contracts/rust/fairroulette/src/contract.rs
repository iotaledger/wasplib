// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use std::ptr;

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct LockBetsCall {
    pub func: ScFunc,
}

impl LockBetsCall {
    pub fn new(_ctx: &ScFuncContext) -> LockBetsCall {
        let mut f = LockBetsCall {
            func: ScFunc::zero(),
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_LOCK_BETS, ptr::null_mut(), ptr::null_mut());
        f
    }
}

pub struct PayWinnersCall {
    pub func: ScFunc,
}

impl PayWinnersCall {
    pub fn new(_ctx: &ScFuncContext) -> PayWinnersCall {
        let mut f = PayWinnersCall {
            func: ScFunc::zero(),
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_PAY_WINNERS, ptr::null_mut(), ptr::null_mut());
        f
    }
}

pub struct PlaceBetCall {
    pub func: ScFunc,
    pub params: MutablePlaceBetParams,
}

impl PlaceBetCall {
    pub fn new(_ctx: &ScFuncContext) -> PlaceBetCall {
        let mut f = PlaceBetCall {
            func: ScFunc::zero(),
            params: MutablePlaceBetParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_PLACE_BET, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct PlayPeriodCall {
    pub func: ScFunc,
    pub params: MutablePlayPeriodParams,
}

impl PlayPeriodCall {
    pub fn new(_ctx: &ScFuncContext) -> PlayPeriodCall {
        let mut f = PlayPeriodCall {
            func: ScFunc::zero(),
            params: MutablePlayPeriodParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_PLAY_PERIOD, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct LastWinningNumberCall {
    pub func: ScView,
    pub results: ImmutableLastWinningNumberResults,
}

impl LastWinningNumberCall {
    pub fn new(_ctx: &ScFuncContext) -> LastWinningNumberCall {
        let mut f = LastWinningNumberCall {
            func: ScView::zero(),
            results: ImmutableLastWinningNumberResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_LAST_WINNING_NUMBER, ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> LastWinningNumberCall {
        let mut f = LastWinningNumberCall {
            func: ScView::zero(),
            results: ImmutableLastWinningNumberResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_LAST_WINNING_NUMBER, ptr::null_mut(), &mut f.results.id);
        f
    }
}
