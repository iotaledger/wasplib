// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

use consts::*;
use fairroulette::*;
use wasmlib::*;

mod consts;
mod types;
mod fairroulette;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_LOCK_BETS, func_lock_bets_thunk);
    exports.add_func(FUNC_PAY_WINNERS, func_pay_winners_thunk);
    exports.add_func(FUNC_PLACE_BET, func_place_bet_thunk);
    exports.add_func(FUNC_PLAY_PERIOD, func_play_period_thunk);
    exports.add_view(VIEW_LAST_WINNING_NUMBER, view_last_winning_number_thunk);
}

pub struct FuncLockBetsParams {}

fn func_lock_bets_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcLockBets");
    // only SC itself can invoke this function
    ctx.require(ctx.caller() == ctx.account_id(), "no permission");

    let params = FuncLockBetsParams {};
    func_lock_bets(ctx, &params);
    ctx.log("fairroulette.funcLockBets ok");
}

pub struct FuncPayWinnersParams {}

fn func_pay_winners_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcPayWinners");
    // only SC itself can invoke this function
    ctx.require(ctx.caller() == ctx.account_id(), "no permission");

    let params = FuncPayWinnersParams {};
    func_pay_winners(ctx, &params);
    ctx.log("fairroulette.funcPayWinners ok");
}

pub struct FuncPlaceBetParams {
    pub number: ScImmutableInt64, // the number a better bets on
}

fn func_place_bet_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcPlaceBet");
    let p = ctx.params();
    let params = FuncPlaceBetParams {
        number: p.get_int64(PARAM_NUMBER),
    };
    ctx.require(params.number.exists(), "missing mandatory number");
    func_place_bet(ctx, &params);
    ctx.log("fairroulette.funcPlaceBet ok");
}

pub struct FuncPlayPeriodParams {
    pub play_period: ScImmutableInt64, // number of minutes in one playing round
}

fn func_play_period_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcPlayPeriod");
    // only SC creator can update the play period
    ctx.require(ctx.caller() == ctx.contract_creator(), "no permission");

    let p = ctx.params();
    let params = FuncPlayPeriodParams {
        play_period: p.get_int64(PARAM_PLAY_PERIOD),
    };
    ctx.require(params.play_period.exists(), "missing mandatory playPeriod");
    func_play_period(ctx, &params);
    ctx.log("fairroulette.funcPlayPeriod ok");
}

pub struct ViewLastWinningNumberParams {}

fn view_last_winning_number_thunk(ctx: &ScViewContext) {
    ctx.log("fairroulette.viewLastWinningNumber");
    let params = ViewLastWinningNumberParams {};
    view_last_winning_number(ctx, &params);
    ctx.log("fairroulette.viewLastWinningNumber ok");
}
