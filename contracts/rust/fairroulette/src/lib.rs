// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

#![allow(unused_imports)]

use fairroulette::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod keys;
mod params;
mod results;
mod state;
mod types;
mod fairroulette;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_LOCK_BETS, func_lock_bets_thunk);
    exports.add_func(FUNC_PAY_WINNERS, func_pay_winners_thunk);
    exports.add_func(FUNC_PLACE_BET, func_place_bet_thunk);
    exports.add_func(FUNC_PLAY_PERIOD, func_play_period_thunk);
    exports.add_view(VIEW_LAST_WINNING_NUMBER, view_last_winning_number_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct LockBetsContext {
    state: MutableFairRouletteState,
}

fn func_lock_bets_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcLockBets");
    // only SC itself can invoke this function
    ctx.require(ctx.caller() == ctx.account_id(), "no permission");

    let f = LockBetsContext {
        state: MutableFairRouletteState {
            id: OBJ_ID_STATE,
        },
    };
    func_lock_bets(ctx, &f);
    ctx.log("fairroulette.funcLockBets ok");
}

pub struct PayWinnersContext {
    state: MutableFairRouletteState,
}

fn func_pay_winners_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcPayWinners");
    // only SC itself can invoke this function
    ctx.require(ctx.caller() == ctx.account_id(), "no permission");

    let f = PayWinnersContext {
        state: MutableFairRouletteState {
            id: OBJ_ID_STATE,
        },
    };
    func_pay_winners(ctx, &f);
    ctx.log("fairroulette.funcPayWinners ok");
}

pub struct PlaceBetContext {
    params: ImmutablePlaceBetParams,
    state:  MutableFairRouletteState,
}

fn func_place_bet_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcPlaceBet");
    let f = PlaceBetContext {
        params: ImmutablePlaceBetParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutableFairRouletteState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.number().exists(), "missing mandatory number");
    func_place_bet(ctx, &f);
    ctx.log("fairroulette.funcPlaceBet ok");
}

pub struct PlayPeriodContext {
    params: ImmutablePlayPeriodParams,
    state:  MutableFairRouletteState,
}

fn func_play_period_thunk(ctx: &ScFuncContext) {
    ctx.log("fairroulette.funcPlayPeriod");
    // only SC creator can update the play period
    ctx.require(ctx.caller() == ctx.contract_creator(), "no permission");

    let f = PlayPeriodContext {
        params: ImmutablePlayPeriodParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutableFairRouletteState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.play_period().exists(), "missing mandatory playPeriod");
    func_play_period(ctx, &f);
    ctx.log("fairroulette.funcPlayPeriod ok");
}

pub struct LastWinningNumberContext {
    results: MutableLastWinningNumberResults,
    state:   ImmutableFairRouletteState,
}

fn view_last_winning_number_thunk(ctx: &ScViewContext) {
    ctx.log("fairroulette.viewLastWinningNumber");
    let f = LastWinningNumberContext {
        results: MutableLastWinningNumberResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutableFairRouletteState {
            id: OBJ_ID_STATE,
        },
    };
    view_last_winning_number(ctx, &f);
    ctx.log("fairroulette.viewLastWinningNumber ok");
}

// @formatter:on
