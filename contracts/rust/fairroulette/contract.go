// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package fairroulette

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type FairRouletteFunc struct {
	sc wasmlib.ScContractFunc
}

func NewFairRouletteFunc(ctx wasmlib.ScFuncContext) *FairRouletteFunc {
	return &FairRouletteFunc{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *FairRouletteFunc) Delay(seconds int64) *FairRouletteFunc {
	f.sc.Delay(seconds)
	return f
}

func (f *FairRouletteFunc) OfContract(contract wasmlib.ScHname) *FairRouletteFunc {
	f.sc.OfContract(contract)
	return f
}

func (f *FairRouletteFunc) Post() *FairRouletteFunc {
	f.sc.Post()
	return f
}

func (f *FairRouletteFunc) PostToChain(chainId wasmlib.ScChainId) *FairRouletteFunc {
	f.sc.PostToChain(chainId)
	return f
}

func (f *FairRouletteFunc) LockBets(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncLockBets, 0, &transfer)
}

func (f *FairRouletteFunc) PayWinners(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncPayWinners, 0, &transfer)
}

func (f *FairRouletteFunc) PlaceBet(params MutableFuncPlaceBetParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncPlaceBet, params.id, &transfer)
}

func (f *FairRouletteFunc) PlayPeriod(params MutableFuncPlayPeriodParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncPlayPeriod, params.id, &transfer)
}

func (f *FairRouletteFunc) LastWinningNumber() ImmutableViewLastWinningNumberResults {
	f.sc.Run(HViewLastWinningNumber, 0, nil)
	return ImmutableViewLastWinningNumberResults{id: f.sc.ResultMapId()}
}

type FairRouletteView struct {
	sc wasmlib.ScContractView
}

func NewFairRouletteView(ctx wasmlib.ScViewContext) *FairRouletteView {
	return &FairRouletteView{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *FairRouletteView) OfContract(contract wasmlib.ScHname) *FairRouletteView {
	v.sc.OfContract(contract)
	return v
}

func (v *FairRouletteView) LastWinningNumber() ImmutableViewLastWinningNumberResults {
	v.sc.Run(HViewLastWinningNumber, 0)
	return ImmutableViewLastWinningNumberResults{id: v.sc.ResultMapId()}
}
