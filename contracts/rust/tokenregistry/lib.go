// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package tokenregistry

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncMintSupply, funcMintSupplyThunk)
	exports.AddFunc(FuncTransferOwnership, funcTransferOwnershipThunk)
	exports.AddFunc(FuncUpdateMetadata, funcUpdateMetadataThunk)
	exports.AddView(ViewGetInfo, viewGetInfoThunk)
}

type FuncMintSupplyParams struct {
	Description wasmlib.ScImmutableString // description what minted token represents
	UserDefined wasmlib.ScImmutableString // any user defined text
}

func funcMintSupplyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("tokenregistry.funcMintSupply")
	p := ctx.Params()
	params := &FuncMintSupplyParams{
		Description: p.GetString(ParamDescription),
		UserDefined: p.GetString(ParamUserDefined),
	}
	funcMintSupply(ctx, params)
	ctx.Log("tokenregistry.funcMintSupply ok")
}

type FuncTransferOwnershipParams struct {
	Color wasmlib.ScImmutableColor // color of token to transfer ownership of
}

func funcTransferOwnershipThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("tokenregistry.funcTransferOwnership")
	//TODO the one who can transfer token ownership
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	p := ctx.Params()
	params := &FuncTransferOwnershipParams{
		Color: p.GetColor(ParamColor),
	}
	ctx.Require(params.Color.Exists(), "missing mandatory color")
	funcTransferOwnership(ctx, params)
	ctx.Log("tokenregistry.funcTransferOwnership ok")
}

type FuncUpdateMetadataParams struct {
	Color wasmlib.ScImmutableColor // color of token to update metadata for
}

func funcUpdateMetadataThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("tokenregistry.funcUpdateMetadata")
	//TODO the one who can change the token info
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	p := ctx.Params()
	params := &FuncUpdateMetadataParams{
		Color: p.GetColor(ParamColor),
	}
	ctx.Require(params.Color.Exists(), "missing mandatory color")
	funcUpdateMetadata(ctx, params)
	ctx.Log("tokenregistry.funcUpdateMetadata ok")
}

type ViewGetInfoParams struct {
	Color wasmlib.ScImmutableColor // color of token to view registry info of
}

func viewGetInfoThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("tokenregistry.viewGetInfo")
	p := ctx.Params()
	params := &ViewGetInfoParams{
		Color: p.GetColor(ParamColor),
	}
	ctx.Require(params.Color.Exists(), "missing mandatory color")
	viewGetInfo(ctx, params)
	ctx.Log("tokenregistry.viewGetInfo ok")
}
