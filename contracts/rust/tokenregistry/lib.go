// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package tokenregistry

import "github.com/iotaledger/wasp/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncMintSupply, funcMintSupplyThunk)
	exports.AddFunc(FuncTransferOwnership, funcTransferOwnershipThunk)
	exports.AddFunc(FuncUpdateMetadata, funcUpdateMetadataThunk)
	exports.AddView(ViewGetInfo, viewGetInfoThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type MintSupplyContext struct {
	Params ImmutableMintSupplyParams
	State  MutableTokenRegistryState
}

func funcMintSupplyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("tokenregistry.funcMintSupply")
	f := &MintSupplyContext{
		Params: ImmutableMintSupplyParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableTokenRegistryState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcMintSupply(ctx, f)
	ctx.Log("tokenregistry.funcMintSupply ok")
}

type TransferOwnershipContext struct {
	Params ImmutableTransferOwnershipParams
	State  MutableTokenRegistryState
}

func funcTransferOwnershipThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("tokenregistry.funcTransferOwnership")
	// TODO the one who can transfer token ownership
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	f := &TransferOwnershipContext{
		Params: ImmutableTransferOwnershipParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableTokenRegistryState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Color().Exists(), "missing mandatory color")
	funcTransferOwnership(ctx, f)
	ctx.Log("tokenregistry.funcTransferOwnership ok")
}

type UpdateMetadataContext struct {
	Params ImmutableUpdateMetadataParams
	State  MutableTokenRegistryState
}

func funcUpdateMetadataThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("tokenregistry.funcUpdateMetadata")
	// TODO the one who can change the token info
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	f := &UpdateMetadataContext{
		Params: ImmutableUpdateMetadataParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableTokenRegistryState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Color().Exists(), "missing mandatory color")
	funcUpdateMetadata(ctx, f)
	ctx.Log("tokenregistry.funcUpdateMetadata ok")
}

type GetInfoContext struct {
	Params ImmutableGetInfoParams
	State  ImmutableTokenRegistryState
}

func viewGetInfoThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("tokenregistry.viewGetInfo")
	f := &GetInfoContext{
		Params: ImmutableGetInfoParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: ImmutableTokenRegistryState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Color().Exists(), "missing mandatory color")
	viewGetInfo(ctx, f)
	ctx.Log("tokenregistry.viewGetInfo ok")
}
