// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package tokenregistry

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type TokenRegistryFunc struct {
	sc wasmlib.ScContractFunc
}

func NewTokenRegistryFunc(ctx wasmlib.ScFuncContext) *TokenRegistryFunc {
	return &TokenRegistryFunc{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *TokenRegistryFunc) Delay(seconds int32) *TokenRegistryFunc {
	f.sc.Delay(seconds)
	return f
}

func (f *TokenRegistryFunc) OfContract(contract wasmlib.ScHname) *TokenRegistryFunc {
	f.sc.OfContract(contract)
	return f
}

func (f *TokenRegistryFunc) Post() *TokenRegistryFunc {
	f.sc.Post()
	return f
}

func (f *TokenRegistryFunc) PostToChain(chainId wasmlib.ScChainId) *TokenRegistryFunc {
	f.sc.PostToChain(chainId)
	return f
}

func (f *TokenRegistryFunc) MintSupply(params MutableFuncMintSupplyParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncMintSupply, params.id, &transfer)
}

func (f *TokenRegistryFunc) TransferOwnership(params MutableFuncTransferOwnershipParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTransferOwnership, params.id, &transfer)
}

func (f *TokenRegistryFunc) UpdateMetadata(params MutableFuncUpdateMetadataParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncUpdateMetadata, params.id, &transfer)
}

func (f *TokenRegistryFunc) GetInfo(params MutableViewGetInfoParams) {
	f.sc.Run(HViewGetInfo, params.id, nil)
}

type TokenRegistryView struct {
	sc wasmlib.ScContractView
}

func NewTokenRegistryView(ctx wasmlib.ScViewContext) *TokenRegistryView {
	return &TokenRegistryView{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *TokenRegistryView) OfContract(contract wasmlib.ScHname) *TokenRegistryView {
	v.sc.OfContract(contract)
	return v
}

func (v *TokenRegistryView) GetInfo(params MutableViewGetInfoParams) {
	v.sc.Run(HViewGetInfo, params.id)
}
