// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct TokenRegistryFunc {
    sc: ScContractFunc,
}

impl TokenRegistryFunc {
    pub fn new(ctx: &ScFuncContext) -> TokenRegistryFunc {
        TokenRegistryFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i64) -> &mut TokenRegistryFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut TokenRegistryFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut TokenRegistryFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut TokenRegistryFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn mint_supply(&mut self, params: MutableFuncMintSupplyParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_MINT_SUPPLY, params.id, Some(transfer));
    }

    pub fn transfer_ownership(&mut self, params: MutableFuncTransferOwnershipParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_TRANSFER_OWNERSHIP, params.id, Some(transfer));
    }

    pub fn update_metadata(&mut self, params: MutableFuncUpdateMetadataParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_UPDATE_METADATA, params.id, Some(transfer));
    }

    pub fn get_info(&mut self, params: MutableViewGetInfoParams) {
        self.sc.run(HVIEW_GET_INFO, params.id, None);
    }
}

pub struct TokenRegistryView {
    sc: ScContractView,
}

impl TokenRegistryView {
    pub fn new(ctx: &ScViewContext) -> TokenRegistryView {
        TokenRegistryView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut TokenRegistryView {
        self.sc.of_contract(contract);
        self
    }

    pub fn get_info(&mut self, params: MutableViewGetInfoParams) {
        self.sc.run(HVIEW_GET_INFO, params.id);
    }
}
