// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package erc20

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type Erc20Func struct {
	sc wasmlib.ScContractFunc
}

func NewErc20Func(ctx wasmlib.ScFuncContext) *Erc20Func {
	return &Erc20Func{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *Erc20Func) Delay(seconds int32) *Erc20Func {
	f.sc.Delay(seconds)
	return f
}

func (f *Erc20Func) OfContract(contract wasmlib.ScHname) *Erc20Func {
	f.sc.OfContract(contract)
	return f
}

func (f *Erc20Func) Post() *Erc20Func {
	f.sc.Post()
	return f
}

func (f *Erc20Func) PostToChain(chainId wasmlib.ScChainId) *Erc20Func {
	f.sc.PostToChain(chainId)
	return f
}

func (f *Erc20Func) Approve(params MutableFuncApproveParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncApprove, params.id, &transfer)
}

func (f *Erc20Func) Init(params MutableFuncInitParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncInit, params.id, &transfer)
}

func (f *Erc20Func) Transfer(params MutableFuncTransferParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTransfer, params.id, &transfer)
}

func (f *Erc20Func) TransferFrom(params MutableFuncTransferFromParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTransferFrom, params.id, &transfer)
}

func (f *Erc20Func) Allowance(params MutableViewAllowanceParams) ImmutableViewAllowanceResults {
	f.sc.Run(HViewAllowance, params.id, nil)
	return ImmutableViewAllowanceResults{id: f.sc.ResultMapId()}
}

func (f *Erc20Func) BalanceOf(params MutableViewBalanceOfParams) ImmutableViewBalanceOfResults {
	f.sc.Run(HViewBalanceOf, params.id, nil)
	return ImmutableViewBalanceOfResults{id: f.sc.ResultMapId()}
}

func (f *Erc20Func) TotalSupply() ImmutableViewTotalSupplyResults {
	f.sc.Run(HViewTotalSupply, 0, nil)
	return ImmutableViewTotalSupplyResults{id: f.sc.ResultMapId()}
}

type Erc20View struct {
	sc wasmlib.ScContractView
}

func NewErc20View(ctx wasmlib.ScViewContext) *Erc20View {
	return &Erc20View{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *Erc20View) OfContract(contract wasmlib.ScHname) *Erc20View {
	v.sc.OfContract(contract)
	return v
}

func (v *Erc20View) Allowance(params MutableViewAllowanceParams) ImmutableViewAllowanceResults {
	v.sc.Run(HViewAllowance, params.id)
	return ImmutableViewAllowanceResults{id: v.sc.ResultMapId()}
}

func (v *Erc20View) BalanceOf(params MutableViewBalanceOfParams) ImmutableViewBalanceOfResults {
	v.sc.Run(HViewBalanceOf, params.id)
	return ImmutableViewBalanceOfResults{id: v.sc.ResultMapId()}
}

func (v *Erc20View) TotalSupply() ImmutableViewTotalSupplyResults {
	v.sc.Run(HViewTotalSupply, 0)
	return ImmutableViewTotalSupplyResults{id: v.sc.ResultMapId()}
}
