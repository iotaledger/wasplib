// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package erc20

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncApprove, funcApproveThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncTransfer, funcTransferThunk)
	exports.AddFunc(FuncTransferFrom, funcTransferFromThunk)
	exports.AddView(ViewAllowance, viewAllowanceThunk)
	exports.AddView(ViewBalanceOf, viewBalanceOfThunk)
	exports.AddView(ViewTotalSupply, viewTotalSupplyThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyId()
	}
}

type FuncApproveContext struct {
	Params ImmutableFuncApproveParams
	State  MutableErc20State
}

func funcApproveThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("erc20.funcApprove")
	f := &FuncApproveContext{
		Params: ImmutableFuncApproveParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableErc20State{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Amount().Exists(), "missing mandatory amount")
	ctx.Require(f.Params.Delegation().Exists(), "missing mandatory delegation")
	funcApprove(ctx, f)
	ctx.Log("erc20.funcApprove ok")
}

type FuncInitContext struct {
	Params ImmutableFuncInitParams
	State  MutableErc20State
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("erc20.funcInit")
	f := &FuncInitContext{
		Params: ImmutableFuncInitParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableErc20State{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Creator().Exists(), "missing mandatory creator")
	ctx.Require(f.Params.Supply().Exists(), "missing mandatory supply")
	funcInit(ctx, f)
	ctx.Log("erc20.funcInit ok")
}

type FuncTransferContext struct {
	Params ImmutableFuncTransferParams
	State  MutableErc20State
}

func funcTransferThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("erc20.funcTransfer")
	f := &FuncTransferContext{
		Params: ImmutableFuncTransferParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableErc20State{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Account().Exists(), "missing mandatory account")
	ctx.Require(f.Params.Amount().Exists(), "missing mandatory amount")
	funcTransfer(ctx, f)
	ctx.Log("erc20.funcTransfer ok")
}

type FuncTransferFromContext struct {
	Params ImmutableFuncTransferFromParams
	State  MutableErc20State
}

func funcTransferFromThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("erc20.funcTransferFrom")
	f := &FuncTransferFromContext{
		Params: ImmutableFuncTransferFromParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableErc20State{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Account().Exists(), "missing mandatory account")
	ctx.Require(f.Params.Amount().Exists(), "missing mandatory amount")
	ctx.Require(f.Params.Recipient().Exists(), "missing mandatory recipient")
	funcTransferFrom(ctx, f)
	ctx.Log("erc20.funcTransferFrom ok")
}

type ViewAllowanceContext struct {
	Params  ImmutableViewAllowanceParams
	Results MutableViewAllowanceResults
	State   ImmutableErc20State
}

func viewAllowanceThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("erc20.viewAllowance")
	f := &ViewAllowanceContext{
		Params: ImmutableViewAllowanceParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		Results: MutableViewAllowanceResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableErc20State{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Account().Exists(), "missing mandatory account")
	ctx.Require(f.Params.Delegation().Exists(), "missing mandatory delegation")
	viewAllowance(ctx, f)
	ctx.Log("erc20.viewAllowance ok")
}

type ViewBalanceOfContext struct {
	Params  ImmutableViewBalanceOfParams
	Results MutableViewBalanceOfResults
	State   ImmutableErc20State
}

func viewBalanceOfThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("erc20.viewBalanceOf")
	f := &ViewBalanceOfContext{
		Params: ImmutableViewBalanceOfParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		Results: MutableViewBalanceOfResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableErc20State{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Account().Exists(), "missing mandatory account")
	viewBalanceOf(ctx, f)
	ctx.Log("erc20.viewBalanceOf ok")
}

type ViewTotalSupplyContext struct {
	Results MutableViewTotalSupplyResults
	State   ImmutableErc20State
}

func viewTotalSupplyThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("erc20.viewTotalSupply")
	f := &ViewTotalSupplyContext{
		Results: MutableViewTotalSupplyResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableErc20State{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewTotalSupply(ctx, f)
	ctx.Log("erc20.viewTotalSupply ok")
}
