// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use std::ptr;
use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct ApproveCall {
    pub func: ScFunc,
    pub params: MutableApproveParams,
}

impl ApproveCall {
    pub fn new(_ctx: &ScFuncContext) -> ApproveCall {
        let mut f = ApproveCall {
            func: ScFunc::zero(),
            params: MutableApproveParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_APPROVE, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct InitCall {
    pub func: ScFunc,
    pub params: MutableInitParams,
}

impl InitCall {
    pub fn new(_ctx: &ScFuncContext) -> InitCall {
        let mut f = InitCall {
            func: ScFunc::zero(),
            params: MutableInitParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_INIT, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct TransferCall {
    pub func: ScFunc,
    pub params: MutableTransferParams,
}

impl TransferCall {
    pub fn new(_ctx: &ScFuncContext) -> TransferCall {
        let mut f = TransferCall {
            func: ScFunc::zero(),
            params: MutableTransferParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_TRANSFER, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct TransferFromCall {
    pub func: ScFunc,
    pub params: MutableTransferFromParams,
}

impl TransferFromCall {
    pub fn new(_ctx: &ScFuncContext) -> TransferFromCall {
        let mut f = TransferFromCall {
            func: ScFunc::zero(),
            params: MutableTransferFromParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_TRANSFER_FROM, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct AllowanceCall {
    pub func: ScView,
    pub params: MutableAllowanceParams,
    pub results: ImmutableAllowanceResults,
}

impl AllowanceCall {
    pub fn new(_ctx: &ScFuncContext) -> AllowanceCall {
        let mut f = AllowanceCall {
            func: ScView::zero(),
            params: MutableAllowanceParams { id: 0 },
            results: ImmutableAllowanceResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_ALLOWANCE, &mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> AllowanceCall {
        let mut f = AllowanceCall {
            func: ScView::zero(),
            params: MutableAllowanceParams { id: 0 },
            results: ImmutableAllowanceResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_ALLOWANCE, &mut f.params.id, &mut f.results.id);
        f
    }
}

pub struct BalanceOfCall {
    pub func: ScView,
    pub params: MutableBalanceOfParams,
    pub results: ImmutableBalanceOfResults,
}

impl BalanceOfCall {
    pub fn new(_ctx: &ScFuncContext) -> BalanceOfCall {
        let mut f = BalanceOfCall {
            func: ScView::zero(),
            params: MutableBalanceOfParams { id: 0 },
            results: ImmutableBalanceOfResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_BALANCE_OF, &mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> BalanceOfCall {
        let mut f = BalanceOfCall {
            func: ScView::zero(),
            params: MutableBalanceOfParams { id: 0 },
            results: ImmutableBalanceOfResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_BALANCE_OF, &mut f.params.id, &mut f.results.id);
        f
    }
}

pub struct TotalSupplyCall {
    pub func: ScView,
    pub results: ImmutableTotalSupplyResults,
}

impl TotalSupplyCall {
    pub fn new(_ctx: &ScFuncContext) -> TotalSupplyCall {
        let mut f = TotalSupplyCall {
            func: ScView::zero(),
            results: ImmutableTotalSupplyResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_TOTAL_SUPPLY, ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> TotalSupplyCall {
        let mut f = TotalSupplyCall {
            func: ScView::zero(),
            results: ImmutableTotalSupplyResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_TOTAL_SUPPLY, ptr::null_mut(), &mut f.results.id);
        f
    }
}
