// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

use consts::*;
use erc20::*;
use wasmlib::*;

mod consts;
mod erc20;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_APPROVE, func_approve_thunk);
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_TRANSFER, func_transfer_thunk);
    exports.add_func(FUNC_TRANSFER_FROM, func_transfer_from_thunk);
    exports.add_view(VIEW_ALLOWANCE, view_allowance_thunk);
    exports.add_view(VIEW_BALANCE_OF, view_balance_of_thunk);
    exports.add_view(VIEW_TOTAL_SUPPLY, view_total_supply_thunk);
}

//@formatter:off
pub struct FuncApproveParams {
    pub amount:     ScImmutableInt64,     // allowance value for delegated account
    pub delegation: ScImmutableAgentId,   // delegated account
}
//@formatter:on

fn func_approve_thunk(ctx: &ScFuncContext) {
    let p = ctx.params();
    let params = FuncApproveParams {
        amount: p.get_int64(PARAM_AMOUNT),
        delegation: p.get_agent_id(PARAM_DELEGATION),
    };
    ctx.require(params.amount.exists(), "missing mandatory amount");
    ctx.require(params.delegation.exists(), "missing mandatory delegation");
    ctx.log("erc20.funcApprove");
    func_approve(ctx, &params);
    ctx.log("erc20.funcApprove ok");
}

//@formatter:off
pub struct FuncInitParams {
    pub creator: ScImmutableAgentId,   // creator/owner of the initial supply
    pub supply:  ScImmutableInt64,     // initial token supply
}
//@formatter:on

fn func_init_thunk(ctx: &ScFuncContext) {
    let p = ctx.params();
    let params = FuncInitParams {
        creator: p.get_agent_id(PARAM_CREATOR),
        supply: p.get_int64(PARAM_SUPPLY),
    };
    ctx.require(params.creator.exists(), "missing mandatory creator");
    ctx.require(params.supply.exists(), "missing mandatory supply");
    ctx.log("erc20.funcInit");
    func_init(ctx, &params);
    ctx.log("erc20.funcInit ok");
}

//@formatter:off
pub struct FuncTransferParams {
    pub account: ScImmutableAgentId,   // target account
    pub amount:  ScImmutableInt64,     // amount of tokens to transfer
}
//@formatter:on

fn func_transfer_thunk(ctx: &ScFuncContext) {
    let p = ctx.params();
    let params = FuncTransferParams {
        account: p.get_agent_id(PARAM_ACCOUNT),
        amount: p.get_int64(PARAM_AMOUNT),
    };
    ctx.require(params.account.exists(), "missing mandatory account");
    ctx.require(params.amount.exists(), "missing mandatory amount");
    ctx.log("erc20.funcTransfer");
    func_transfer(ctx, &params);
    ctx.log("erc20.funcTransfer ok");
}

//@formatter:off
pub struct FuncTransferFromParams {
    pub account:   ScImmutableAgentId,   // sender account
    pub amount:    ScImmutableInt64,     // amount of tokens to transfer
    pub recipient: ScImmutableAgentId,   // recipient account
}
//@formatter:on

fn func_transfer_from_thunk(ctx: &ScFuncContext) {
    let p = ctx.params();
    let params = FuncTransferFromParams {
        account: p.get_agent_id(PARAM_ACCOUNT),
        amount: p.get_int64(PARAM_AMOUNT),
        recipient: p.get_agent_id(PARAM_RECIPIENT),
    };
    ctx.require(params.account.exists(), "missing mandatory account");
    ctx.require(params.amount.exists(), "missing mandatory amount");
    ctx.require(params.recipient.exists(), "missing mandatory recipient");
    ctx.log("erc20.funcTransferFrom");
    func_transfer_from(ctx, &params);
    ctx.log("erc20.funcTransferFrom ok");
}

//@formatter:off
pub struct ViewAllowanceParams {
    pub account:    ScImmutableAgentId,   // sender account
    pub delegation: ScImmutableAgentId,   // delegated account
}
//@formatter:on

fn view_allowance_thunk(ctx: &ScViewContext) {
    let p = ctx.params();
    let params = ViewAllowanceParams {
        account: p.get_agent_id(PARAM_ACCOUNT),
        delegation: p.get_agent_id(PARAM_DELEGATION),
    };
    ctx.require(params.account.exists(), "missing mandatory account");
    ctx.require(params.delegation.exists(), "missing mandatory delegation");
    ctx.log("erc20.viewAllowance");
    view_allowance(ctx, &params);
    ctx.log("erc20.viewAllowance ok");
}

pub struct ViewBalanceOfParams {
    pub account: ScImmutableAgentId,   // sender account
}

fn view_balance_of_thunk(ctx: &ScViewContext) {
    let p = ctx.params();
    let params = ViewBalanceOfParams {
        account: p.get_agent_id(PARAM_ACCOUNT),
    };
    ctx.require(params.account.exists(), "missing mandatory account");
    ctx.log("erc20.viewBalanceOf");
    view_balance_of(ctx, &params);
    ctx.log("erc20.viewBalanceOf ok");
}

pub struct ViewTotalSupplyParams {}

fn view_total_supply_thunk(ctx: &ScViewContext) {
    let params = ViewTotalSupplyParams {};
    ctx.log("erc20.viewTotalSupply");
    view_total_supply(ctx, &params);
    ctx.log("erc20.viewTotalSupply ok");
}
