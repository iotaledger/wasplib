// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

//@formatter:off

#![allow(dead_code)]

#![allow(unused_imports)]

use erc20::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod keys;
mod params;
mod results;
mod state;
mod subtypes;
mod erc20;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_APPROVE, func_approve_thunk);
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_TRANSFER, func_transfer_thunk);
    exports.add_func(FUNC_TRANSFER_FROM, func_transfer_from_thunk);
    exports.add_view(VIEW_ALLOWANCE, view_allowance_thunk);
    exports.add_view(VIEW_BALANCE_OF, view_balance_of_thunk);
    exports.add_view(VIEW_TOTAL_SUPPLY, view_total_supply_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct FuncApproveContext {
    params: ImmutableFuncApproveParams,
    state:  MutableErc20State,
}

fn func_approve_thunk(ctx: &ScFuncContext) {
    ctx.log("erc20.funcApprove");
    let f = FuncApproveContext {
        params: ImmutableFuncApproveParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        state: MutableErc20State {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.amount().exists(), "missing mandatory amount");
    ctx.require(f.params.delegation().exists(), "missing mandatory delegation");
    func_approve(ctx, &f);
    ctx.log("erc20.funcApprove ok");
}

pub struct FuncInitContext {
    params: ImmutableFuncInitParams,
    state:  MutableErc20State,
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("erc20.funcInit");
    let f = FuncInitContext {
        params: ImmutableFuncInitParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        state: MutableErc20State {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.creator().exists(), "missing mandatory creator");
    ctx.require(f.params.supply().exists(), "missing mandatory supply");
    func_init(ctx, &f);
    ctx.log("erc20.funcInit ok");
}

pub struct FuncTransferContext {
    params: ImmutableFuncTransferParams,
    state:  MutableErc20State,
}

fn func_transfer_thunk(ctx: &ScFuncContext) {
    ctx.log("erc20.funcTransfer");
    let f = FuncTransferContext {
        params: ImmutableFuncTransferParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        state: MutableErc20State {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.account().exists(), "missing mandatory account");
    ctx.require(f.params.amount().exists(), "missing mandatory amount");
    func_transfer(ctx, &f);
    ctx.log("erc20.funcTransfer ok");
}

pub struct FuncTransferFromContext {
    params: ImmutableFuncTransferFromParams,
    state:  MutableErc20State,
}

fn func_transfer_from_thunk(ctx: &ScFuncContext) {
    ctx.log("erc20.funcTransferFrom");
    let f = FuncTransferFromContext {
        params: ImmutableFuncTransferFromParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        state: MutableErc20State {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.account().exists(), "missing mandatory account");
    ctx.require(f.params.amount().exists(), "missing mandatory amount");
    ctx.require(f.params.recipient().exists(), "missing mandatory recipient");
    func_transfer_from(ctx, &f);
    ctx.log("erc20.funcTransferFrom ok");
}

pub struct ViewAllowanceContext {
    params:  ImmutableViewAllowanceParams,
    results: MutableViewAllowanceResults,
    state:   ImmutableErc20State,
}

fn view_allowance_thunk(ctx: &ScViewContext) {
    ctx.log("erc20.viewAllowance");
    let f = ViewAllowanceContext {
        params: ImmutableViewAllowanceParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        results: MutableViewAllowanceResults {
            id: get_object_id(1, KEY_RESULTS, TYPE_MAP),
        },
        state: ImmutableErc20State {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.account().exists(), "missing mandatory account");
    ctx.require(f.params.delegation().exists(), "missing mandatory delegation");
    view_allowance(ctx, &f);
    ctx.log("erc20.viewAllowance ok");
}

pub struct ViewBalanceOfContext {
    params:  ImmutableViewBalanceOfParams,
    results: MutableViewBalanceOfResults,
    state:   ImmutableErc20State,
}

fn view_balance_of_thunk(ctx: &ScViewContext) {
    ctx.log("erc20.viewBalanceOf");
    let f = ViewBalanceOfContext {
        params: ImmutableViewBalanceOfParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        results: MutableViewBalanceOfResults {
            id: get_object_id(1, KEY_RESULTS, TYPE_MAP),
        },
        state: ImmutableErc20State {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.account().exists(), "missing mandatory account");
    view_balance_of(ctx, &f);
    ctx.log("erc20.viewBalanceOf ok");
}

pub struct ViewTotalSupplyContext {
    results: MutableViewTotalSupplyResults,
    state:   ImmutableErc20State,
}

fn view_total_supply_thunk(ctx: &ScViewContext) {
    ctx.log("erc20.viewTotalSupply");
    let f = ViewTotalSupplyContext {
        results: MutableViewTotalSupplyResults {
            id: get_object_id(1, KEY_RESULTS, TYPE_MAP),
        },
        state: ImmutableErc20State {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    view_total_supply(ctx, &f);
    ctx.log("erc20.viewTotalSupply ok");
}

//@formatter:on
