// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncApproveParams {
    pub(crate) id: i32,
}

impl ImmutableFuncApproveParams {
    pub fn amount(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_AMOUNT))
    }

    pub fn delegation(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_DELEGATION))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncApproveParams {
    pub(crate) id: i32,
}

impl MutableFuncApproveParams {
    pub fn new() -> MutableFuncApproveParams {
        MutableFuncApproveParams { id: ScMutableMap::new().map_id() }
    }

    pub fn amount(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_AMOUNT))
    }

    pub fn delegation(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_DELEGATION))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncInitParams {
    pub(crate) id: i32,
}

impl ImmutableFuncInitParams {
    pub fn creator(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_CREATOR))
    }

    pub fn supply(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_SUPPLY))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncInitParams {
    pub(crate) id: i32,
}

impl MutableFuncInitParams {
    pub fn new() -> MutableFuncInitParams {
        MutableFuncInitParams { id: ScMutableMap::new().map_id() }
    }

    pub fn creator(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_CREATOR))
    }

    pub fn supply(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_SUPPLY))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncTransferParams {
    pub(crate) id: i32,
}

impl ImmutableFuncTransferParams {
    pub fn account(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }

    pub fn amount(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_AMOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncTransferParams {
    pub(crate) id: i32,
}

impl MutableFuncTransferParams {
    pub fn new() -> MutableFuncTransferParams {
        MutableFuncTransferParams { id: ScMutableMap::new().map_id() }
    }

    pub fn account(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }

    pub fn amount(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_AMOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncTransferFromParams {
    pub(crate) id: i32,
}

impl ImmutableFuncTransferFromParams {
    pub fn account(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }

    pub fn amount(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_AMOUNT))
    }

    pub fn recipient(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_RECIPIENT))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncTransferFromParams {
    pub(crate) id: i32,
}

impl MutableFuncTransferFromParams {
    pub fn new() -> MutableFuncTransferFromParams {
        MutableFuncTransferFromParams { id: ScMutableMap::new().map_id() }
    }

    pub fn account(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }

    pub fn amount(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_AMOUNT))
    }

    pub fn recipient(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_RECIPIENT))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewAllowanceParams {
    pub(crate) id: i32,
}

impl ImmutableViewAllowanceParams {
    pub fn account(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }

    pub fn delegation(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_DELEGATION))
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewAllowanceParams {
    pub(crate) id: i32,
}

impl MutableViewAllowanceParams {
    pub fn new() -> MutableViewAllowanceParams {
        MutableViewAllowanceParams { id: ScMutableMap::new().map_id() }
    }

    pub fn account(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }

    pub fn delegation(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_DELEGATION))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewBalanceOfParams {
    pub(crate) id: i32,
}

impl ImmutableViewBalanceOfParams {
    pub fn account(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewBalanceOfParams {
    pub(crate) id: i32,
}

impl MutableViewBalanceOfParams {
    pub fn new() -> MutableViewBalanceOfParams {
        MutableViewBalanceOfParams { id: ScMutableMap::new().map_id() }
    }

    pub fn account(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_ACCOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewTotalSupplyParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewTotalSupplyParams {
    pub(crate) id: i32,
}

impl MutableViewTotalSupplyParams {
    pub fn new() -> MutableViewTotalSupplyParams {
        MutableViewTotalSupplyParams { id: ScMutableMap::new().map_id() }
    }
}
