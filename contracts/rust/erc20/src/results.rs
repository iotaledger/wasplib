// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

pub struct MutableFuncApproveResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncApproveResults {
    pub(crate) id: i32,
}

pub struct MutableFuncInitResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncInitResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTransferResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTransferResults {
    pub(crate) id: i32,
}

pub struct MutableFuncTransferFromResults {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTransferFromResults {
    pub(crate) id: i32,
}

pub struct MutableViewAllowanceResults {
    pub(crate) id: i32,
}

impl MutableViewAllowanceResults {
    pub fn amount(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

pub struct ImmutableViewAllowanceResults {
    pub(crate) id: i32,
}

impl ImmutableViewAllowanceResults {
    pub fn amount(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

pub struct MutableViewBalanceOfResults {
    pub(crate) id: i32,
}

impl MutableViewBalanceOfResults {
    pub fn amount(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

pub struct ImmutableViewBalanceOfResults {
    pub(crate) id: i32,
}

impl ImmutableViewBalanceOfResults {
    pub fn amount(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

pub struct MutableViewTotalSupplyResults {
    pub(crate) id: i32,
}

impl MutableViewTotalSupplyResults {
    pub fn supply(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_SUPPLY))
    }
}

pub struct ImmutableViewTotalSupplyResults {
    pub(crate) id: i32,
}

impl ImmutableViewTotalSupplyResults {
    pub fn supply(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_SUPPLY))
    }
}
