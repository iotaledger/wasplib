// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableAllowanceResults {
    pub(crate) id: i32,
}

impl ImmutableAllowanceResults {
    pub fn amount(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct MutableAllowanceResults {
    pub(crate) id: i32,
}

impl MutableAllowanceResults {
    pub fn amount(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableBalanceOfResults {
    pub(crate) id: i32,
}

impl ImmutableBalanceOfResults {
    pub fn amount(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct MutableBalanceOfResults {
    pub(crate) id: i32,
}

impl MutableBalanceOfResults {
    pub fn amount(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_AMOUNT))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableTotalSupplyResults {
    pub(crate) id: i32,
}

impl ImmutableTotalSupplyResults {
    pub fn supply(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_SUPPLY))
    }
}

#[derive(Clone, Copy)]
pub struct MutableTotalSupplyResults {
    pub(crate) id: i32,
}

impl MutableTotalSupplyResults {
    pub fn supply(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_SUPPLY))
    }
}
