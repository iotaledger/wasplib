// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::subtypes::*;

pub struct MapAgentIdToMutableAllowancesForAgent {
    pub(crate) obj_id: i32,
}

impl MapAgentIdToMutableAllowancesForAgent {
    pub fn clear(&self) {
        clear(self.obj_id)
    }

    pub fn get_allowances_for_agent(&self, key: &ScAgentId) -> MutableAllowancesForAgent {
        let sub_id = get_object_id(self.obj_id, key.get_key_id(), TYPE_MAP);
        MutableAllowancesForAgent { obj_id: sub_id }
    }
}

pub struct Erc20FuncState {
    pub(crate) state_id: i32,
}

impl Erc20FuncState {
    pub fn all_allowances(&self) -> MapAgentIdToMutableAllowancesForAgent {
        let map_id = get_object_id(self.state_id, idx_map(IDX_VAR_ALL_ALLOWANCES), TYPE_MAP);
        MapAgentIdToMutableAllowancesForAgent { obj_id: map_id }
    }

    pub fn balances(&self) -> MapAgentIdToMutableInt64 {
        let map_id = get_object_id(self.state_id, idx_map(IDX_VAR_BALANCES), TYPE_MAP);
        MapAgentIdToMutableInt64 { obj_id: map_id }
    }

    pub fn supply(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.state_id, idx_map(IDX_VAR_SUPPLY))
    }
}

pub struct MapAgentIdToImmutableAllowancesForAgent {
    pub(crate) obj_id: i32,
}

impl MapAgentIdToImmutableAllowancesForAgent {
    pub fn get_allowances_for_agent(&self, key: &ScAgentId) -> ImmutableAllowancesForAgent {
        let sub_id = get_object_id(self.obj_id, key.get_key_id(), TYPE_MAP);
        ImmutableAllowancesForAgent { obj_id: sub_id }
    }
}

pub struct Erc20ViewState {
    pub(crate) state_id: i32,
}

impl Erc20ViewState {
    pub fn all_allowances(&self) -> MapAgentIdToImmutableAllowancesForAgent {
        let map_id = get_object_id(self.state_id, idx_map(IDX_VAR_ALL_ALLOWANCES), TYPE_MAP);
        MapAgentIdToImmutableAllowancesForAgent { obj_id: map_id }
    }

    pub fn balances(&self) -> MapAgentIdToImmutableInt64 {
        let map_id = get_object_id(self.state_id, idx_map(IDX_VAR_BALANCES), TYPE_MAP);
        MapAgentIdToImmutableInt64 { obj_id: map_id }
    }

    pub fn supply(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.state_id, idx_map(IDX_VAR_SUPPLY))
    }
}
