// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package donatewithfeedback

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type ArrayOfMutableDonation struct {
	objId int32
}

func (a ArrayOfMutableDonation) Clear() {
	wasmlib.Clear(a.objId)
}

func (a ArrayOfMutableDonation) Length() int32 {
	return wasmlib.GetLength(a.objId)
}

func (a ArrayOfMutableDonation) GetDonation(index int32) MutableDonation {
	return MutableDonation{objId: a.objId, keyId: wasmlib.Key32(index)}
}

type MutableDonateWithFeedbackState struct {
	id int32
}

func (s MutableDonateWithFeedbackState) Log() ArrayOfMutableDonation {
	arrId := wasmlib.GetObjectId(s.id, idxMap[IdxStateLog], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableDonation{objId: arrId}
}

func (s MutableDonateWithFeedbackState) MaxDonation() wasmlib.ScMutableInt64 {
	return wasmlib.NewScMutableInt64(s.id, idxMap[IdxStateMaxDonation])
}

func (s MutableDonateWithFeedbackState) TotalDonation() wasmlib.ScMutableInt64 {
	return wasmlib.NewScMutableInt64(s.id, idxMap[IdxStateTotalDonation])
}

type ArrayOfImmutableDonation struct {
	objId int32
}

func (a ArrayOfImmutableDonation) Length() int32 {
	return wasmlib.GetLength(a.objId)
}

func (a ArrayOfImmutableDonation) GetDonation(index int32) ImmutableDonation {
	return ImmutableDonation{objId: a.objId, keyId: wasmlib.Key32(index)}
}

type ImmutableDonateWithFeedbackState struct {
	id int32
}

func (s ImmutableDonateWithFeedbackState) Log() ArrayOfImmutableDonation {
	arrId := wasmlib.GetObjectId(s.id, idxMap[IdxStateLog], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableDonation{objId: arrId}
}

func (s ImmutableDonateWithFeedbackState) MaxDonation() wasmlib.ScImmutableInt64 {
	return wasmlib.NewScImmutableInt64(s.id, idxMap[IdxStateMaxDonation])
}

func (s ImmutableDonateWithFeedbackState) TotalDonation() wasmlib.ScImmutableInt64 {
	return wasmlib.NewScImmutableInt64(s.id, idxMap[IdxStateTotalDonation])
}
