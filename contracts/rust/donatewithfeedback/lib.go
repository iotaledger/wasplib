// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package donatewithfeedback

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncDonate, funcDonateThunk)
	exports.AddFunc(FuncWithdraw, funcWithdrawThunk)
	exports.AddView(ViewDonations, viewDonationsThunk)
}

type FuncDonateParams struct {
	Feedback wasmlib.ScImmutableString // feedback for the person you donate to
}

func funcDonateThunk(ctx wasmlib.ScFuncContext) {
	p := ctx.Params()
	params := &FuncDonateParams{
		Feedback: p.GetString(ParamFeedback),
	}
	ctx.Log("donatewithfeedback.funcDonate")
	funcDonate(ctx, params)
	ctx.Log("donatewithfeedback.funcDonate ok")
}

type FuncWithdrawParams struct {
	Amount wasmlib.ScImmutableInt64 // amount to withdraw
}

func funcWithdrawThunk(ctx wasmlib.ScFuncContext) {
	// only SC creator can withdraw donated funds
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	p := ctx.Params()
	params := &FuncWithdrawParams{
		Amount: p.GetInt64(ParamAmount),
	}
	ctx.Log("donatewithfeedback.funcWithdraw")
	funcWithdraw(ctx, params)
	ctx.Log("donatewithfeedback.funcWithdraw ok")
}

type ViewDonationsParams struct {
}

func viewDonationsThunk(ctx wasmlib.ScViewContext) {
	params := &ViewDonationsParams{
	}
	ctx.Log("donatewithfeedback.viewDonations")
	viewDonations(ctx, params)
	ctx.Log("donatewithfeedback.viewDonations ok")
}
