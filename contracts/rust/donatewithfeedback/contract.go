// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package donatewithfeedback

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type DonateWithFeedbackFunc struct {
	sc wasmlib.ScContractFunc
}

func NewDonateWithFeedbackFunc(ctx wasmlib.ScFuncContext) *DonateWithFeedbackFunc {
	return &DonateWithFeedbackFunc{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *DonateWithFeedbackFunc) Delay(seconds int64) *DonateWithFeedbackFunc {
	f.sc.Delay(seconds)
	return f
}

func (f *DonateWithFeedbackFunc) OfContract(contract wasmlib.ScHname) *DonateWithFeedbackFunc {
	f.sc.OfContract(contract)
	return f
}

func (f *DonateWithFeedbackFunc) Post() *DonateWithFeedbackFunc {
	f.sc.Post()
	return f
}

func (f *DonateWithFeedbackFunc) PostToChain(chainId wasmlib.ScChainId) *DonateWithFeedbackFunc {
	f.sc.PostToChain(chainId)
	return f
}

func (f *DonateWithFeedbackFunc) Donate(params MutableFuncDonateParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncDonate, params.id, &transfer)
}

func (f *DonateWithFeedbackFunc) Withdraw(params MutableFuncWithdrawParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncWithdraw, params.id, &transfer)
}

func (f *DonateWithFeedbackFunc) Donation(params MutableViewDonationParams) ImmutableViewDonationResults {
	f.sc.Run(HViewDonation, params.id, nil)
	return ImmutableViewDonationResults{id: f.sc.ResultMapId()}
}

func (f *DonateWithFeedbackFunc) DonationInfo() ImmutableViewDonationInfoResults {
	f.sc.Run(HViewDonationInfo, 0, nil)
	return ImmutableViewDonationInfoResults{id: f.sc.ResultMapId()}
}

type DonateWithFeedbackView struct {
	sc wasmlib.ScContractView
}

func NewDonateWithFeedbackView(ctx wasmlib.ScViewContext) *DonateWithFeedbackView {
	return &DonateWithFeedbackView{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *DonateWithFeedbackView) OfContract(contract wasmlib.ScHname) *DonateWithFeedbackView {
	v.sc.OfContract(contract)
	return v
}

func (v *DonateWithFeedbackView) Donation(params MutableViewDonationParams) ImmutableViewDonationResults {
	v.sc.Run(HViewDonation, params.id)
	return ImmutableViewDonationResults{id: v.sc.ResultMapId()}
}

func (v *DonateWithFeedbackView) DonationInfo() ImmutableViewDonationInfoResults {
	v.sc.Run(HViewDonationInfo, 0)
	return ImmutableViewDonationInfoResults{id: v.sc.ResultMapId()}
}
