// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use std::ptr;
use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct DonateCall {
    pub func: ScFunc,
    pub params: MutableDonateParams,
}

impl DonateCall {
    pub fn new(_ctx: &ScFuncContext) -> DonateCall {
        let mut f = DonateCall {
            func: ScFunc::zero(),
            params: MutableDonateParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_DONATE, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct WithdrawCall {
    pub func: ScFunc,
    pub params: MutableWithdrawParams,
}

impl WithdrawCall {
    pub fn new(_ctx: &ScFuncContext) -> WithdrawCall {
        let mut f = WithdrawCall {
            func: ScFunc::zero(),
            params: MutableWithdrawParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_WITHDRAW, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct DonationCall {
    pub func: ScView,
    pub params: MutableDonationParams,
    pub results: ImmutableDonationResults,
}

impl DonationCall {
    pub fn new(_ctx: &ScFuncContext) -> DonationCall {
        let mut f = DonationCall {
            func: ScView::zero(),
            params: MutableDonationParams { id: 0 },
            results: ImmutableDonationResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_DONATION, &mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> DonationCall {
        let mut f = DonationCall {
            func: ScView::zero(),
            params: MutableDonationParams { id: 0 },
            results: ImmutableDonationResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_DONATION, &mut f.params.id, &mut f.results.id);
        f
    }
}

pub struct DonationInfoCall {
    pub func: ScView,
    pub results: ImmutableDonationInfoResults,
}

impl DonationInfoCall {
    pub fn new(_ctx: &ScFuncContext) -> DonationInfoCall {
        let mut f = DonationInfoCall {
            func: ScView::zero(),
            results: ImmutableDonationInfoResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_DONATION_INFO, ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> DonationInfoCall {
        let mut f = DonationInfoCall {
            func: ScView::zero(),
            results: ImmutableDonationInfoResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_DONATION_INFO, ptr::null_mut(), &mut f.results.id);
        f
    }
}
