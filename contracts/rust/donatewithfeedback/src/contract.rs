// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct DonateWithFeedbackFunc {
    sc: ScContractFunc,
}

impl DonateWithFeedbackFunc {
    pub fn new(ctx: &ScFuncContext) -> DonateWithFeedbackFunc {
        DonateWithFeedbackFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i32) -> &mut DonateWithFeedbackFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut DonateWithFeedbackFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut DonateWithFeedbackFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut DonateWithFeedbackFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn donate(&mut self, params: MutableFuncDonateParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_DONATE, params.id, Some(transfer));
    }

    pub fn withdraw(&mut self, params: MutableFuncWithdrawParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_WITHDRAW, params.id, Some(transfer));
    }

    pub fn donation(&mut self, params: MutableViewDonationParams) -> ImmutableViewDonationResults {
        self.sc.run(HVIEW_DONATION, params.id, None);
        ImmutableViewDonationResults { id: self.sc.result_map_id() }
    }

    pub fn donation_info(&mut self) -> ImmutableViewDonationInfoResults {
        self.sc.run(HVIEW_DONATION_INFO, 0, None);
        ImmutableViewDonationInfoResults { id: self.sc.result_map_id() }
    }
}

pub struct DonateWithFeedbackView {
    sc: ScContractView,
}

impl DonateWithFeedbackView {
    pub fn new(ctx: &ScViewContext) -> DonateWithFeedbackView {
        DonateWithFeedbackView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut DonateWithFeedbackView {
        self.sc.of_contract(contract);
        self
    }

    pub fn donation(&mut self, params: MutableViewDonationParams) -> ImmutableViewDonationResults {
        self.sc.run(HVIEW_DONATION, params.id);
        ImmutableViewDonationResults { id: self.sc.result_map_id() }
    }

    pub fn donation_info(&mut self) -> ImmutableViewDonationInfoResults {
        self.sc.run(HVIEW_DONATION_INFO, 0);
        ImmutableViewDonationInfoResults { id: self.sc.result_map_id() }
    }
}
