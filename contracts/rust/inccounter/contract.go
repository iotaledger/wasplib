// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package inccounter

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type CallIncrementCall struct {
	Func wasmlib.ScFunc
}

func NewCallIncrementCall(ctx wasmlib.ScFuncContext) *CallIncrementCall {
	f := &CallIncrementCall{}
	f.Func.Init(HScName, HFuncCallIncrement, nil, nil)
	return f
}

type CallIncrementRecurse5xCall struct {
	Func wasmlib.ScFunc
}

func NewCallIncrementRecurse5xCall(ctx wasmlib.ScFuncContext) *CallIncrementRecurse5xCall {
	f := &CallIncrementRecurse5xCall{}
	f.Func.Init(HScName, HFuncCallIncrementRecurse5x, nil, nil)
	return f
}

type EndlessLoopCall struct {
	Func wasmlib.ScFunc
}

func NewEndlessLoopCall(ctx wasmlib.ScFuncContext) *EndlessLoopCall {
	f := &EndlessLoopCall{}
	f.Func.Init(HScName, HFuncEndlessLoop, nil, nil)
	return f
}

type IncrementCall struct {
	Func wasmlib.ScFunc
}

func NewIncrementCall(ctx wasmlib.ScFuncContext) *IncrementCall {
	f := &IncrementCall{}
	f.Func.Init(HScName, HFuncIncrement, nil, nil)
	return f
}

type InitCall struct {
	Func   wasmlib.ScFunc
	Params MutableInitParams
}

func NewInitCall(ctx wasmlib.ScFuncContext) *InitCall {
	f := &InitCall{}
	f.Func.Init(HScName, HFuncInit, &f.Params.id, nil)
	return f
}

type LocalStateInternalCallCall struct {
	Func wasmlib.ScFunc
}

func NewLocalStateInternalCallCall(ctx wasmlib.ScFuncContext) *LocalStateInternalCallCall {
	f := &LocalStateInternalCallCall{}
	f.Func.Init(HScName, HFuncLocalStateInternalCall, nil, nil)
	return f
}

type LocalStatePostCall struct {
	Func wasmlib.ScFunc
}

func NewLocalStatePostCall(ctx wasmlib.ScFuncContext) *LocalStatePostCall {
	f := &LocalStatePostCall{}
	f.Func.Init(HScName, HFuncLocalStatePost, nil, nil)
	return f
}

type LocalStateSandboxCallCall struct {
	Func wasmlib.ScFunc
}

func NewLocalStateSandboxCallCall(ctx wasmlib.ScFuncContext) *LocalStateSandboxCallCall {
	f := &LocalStateSandboxCallCall{}
	f.Func.Init(HScName, HFuncLocalStateSandboxCall, nil, nil)
	return f
}

type PostIncrementCall struct {
	Func wasmlib.ScFunc
}

func NewPostIncrementCall(ctx wasmlib.ScFuncContext) *PostIncrementCall {
	f := &PostIncrementCall{}
	f.Func.Init(HScName, HFuncPostIncrement, nil, nil)
	return f
}

type RepeatManyCall struct {
	Func   wasmlib.ScFunc
	Params MutableRepeatManyParams
}

func NewRepeatManyCall(ctx wasmlib.ScFuncContext) *RepeatManyCall {
	f := &RepeatManyCall{}
	f.Func.Init(HScName, HFuncRepeatMany, &f.Params.id, nil)
	return f
}

type TestLeb128Call struct {
	Func wasmlib.ScFunc
}

func NewTestLeb128Call(ctx wasmlib.ScFuncContext) *TestLeb128Call {
	f := &TestLeb128Call{}
	f.Func.Init(HScName, HFuncTestLeb128, nil, nil)
	return f
}

type WhenMustIncrementCall struct {
	Func   wasmlib.ScFunc
	Params MutableWhenMustIncrementParams
}

func NewWhenMustIncrementCall(ctx wasmlib.ScFuncContext) *WhenMustIncrementCall {
	f := &WhenMustIncrementCall{}
	f.Func.Init(HScName, HFuncWhenMustIncrement, &f.Params.id, nil)
	return f
}

type GetCounterCall struct {
	Func    wasmlib.ScView
	Results ImmutableGetCounterResults
}

func NewGetCounterCall(ctx wasmlib.ScFuncContext) *GetCounterCall {
	f := &GetCounterCall{}
	f.Func.Init(HScName, HViewGetCounter, nil, &f.Results.id)
	return f
}

func NewGetCounterCallFromView(ctx wasmlib.ScViewContext) *GetCounterCall {
	f := &GetCounterCall{}
	f.Func.Init(HScName, HViewGetCounter, nil, &f.Results.id)
	return f
}
