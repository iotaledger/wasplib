// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package inccounter

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

type IncCounterFunc struct {
	sc wasmlib.ScContractFunc
}

func NewIncCounterFunc(ctx wasmlib.ScFuncContext) *IncCounterFunc {
	return &IncCounterFunc{sc: wasmlib.NewScContractFunc(ctx, HScName)}
}

func (f *IncCounterFunc) Delay(seconds int32) *IncCounterFunc {
	f.sc.Delay(seconds)
	return f
}

func (f *IncCounterFunc) OfContract(contract wasmlib.ScHname) *IncCounterFunc {
	f.sc.OfContract(contract)
	return f
}

func (f *IncCounterFunc) Post() *IncCounterFunc {
	f.sc.Post()
	return f
}

func (f *IncCounterFunc) PostToChain(chainId wasmlib.ScChainId) *IncCounterFunc {
	f.sc.PostToChain(chainId)
	return f
}

func (f *IncCounterFunc) CallIncrement(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncCallIncrement, 0, &transfer)
}

func (f *IncCounterFunc) CallIncrementRecurse5x(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncCallIncrementRecurse5x, 0, &transfer)
}

func (f *IncCounterFunc) EndlessLoop(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncEndlessLoop, 0, &transfer)
}

func (f *IncCounterFunc) Increment(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncIncrement, 0, &transfer)
}

func (f *IncCounterFunc) Init(params MutableFuncInitParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncInit, params.id, &transfer)
}

func (f *IncCounterFunc) LocalStateInternalCall(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncLocalStateInternalCall, 0, &transfer)
}

func (f *IncCounterFunc) LocalStatePost(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncLocalStatePost, 0, &transfer)
}

func (f *IncCounterFunc) LocalStateSandboxCall(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncLocalStateSandboxCall, 0, &transfer)
}

func (f *IncCounterFunc) PostIncrement(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncPostIncrement, 0, &transfer)
}

func (f *IncCounterFunc) RepeatMany(params MutableFuncRepeatManyParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncRepeatMany, params.id, &transfer)
}

func (f *IncCounterFunc) TestLeb128(transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncTestLeb128, 0, &transfer)
}

func (f *IncCounterFunc) WhenMustIncrement(params MutableFuncWhenMustIncrementParams, transfer wasmlib.ScTransfers) {
	f.sc.Run(HFuncWhenMustIncrement, params.id, &transfer)
}

func (f *IncCounterFunc) GetCounter() ImmutableViewGetCounterResults {
	f.sc.Run(HViewGetCounter, 0, nil)
	return ImmutableViewGetCounterResults{id: f.sc.ResultMapId()}
}

type IncCounterView struct {
	sc wasmlib.ScContractView
}

func NewIncCounterView(ctx wasmlib.ScViewContext) *IncCounterView {
	return &IncCounterView{sc: wasmlib.NewScContractView(ctx, HScName)}
}

func (v *IncCounterView) OfContract(contract wasmlib.ScHname) *IncCounterView {
	v.sc.OfContract(contract)
	return v
}

func (v *IncCounterView) GetCounter() ImmutableViewGetCounterResults {
	v.sc.Run(HViewGetCounter, 0)
	return ImmutableViewGetCounterResults{id: v.sc.ResultMapId()}
}
