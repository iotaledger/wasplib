// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

pub struct MutableFuncCallIncrementParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncCallIncrementParams {
    pub(crate) id: i32,
}

pub struct MutableFuncCallIncrementRecurse5xParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncCallIncrementRecurse5xParams {
    pub(crate) id: i32,
}

pub struct MutableFuncIncrementParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncIncrementParams {
    pub(crate) id: i32,
}

pub struct MutableFuncInitParams {
    pub(crate) id: i32,
}

impl MutableFuncInitParams {
    pub fn counter(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_COUNTER))
    }
}

pub struct ImmutableFuncInitParams {
    pub(crate) id: i32,
}

impl ImmutableFuncInitParams {
    pub fn counter(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_COUNTER))
    }
}

pub struct MutableFuncLocalStateInternalCallParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncLocalStateInternalCallParams {
    pub(crate) id: i32,
}

pub struct MutableFuncLocalStatePostParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncLocalStatePostParams {
    pub(crate) id: i32,
}

pub struct MutableFuncLocalStateSandboxCallParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncLocalStateSandboxCallParams {
    pub(crate) id: i32,
}

pub struct MutableFuncLoopParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncLoopParams {
    pub(crate) id: i32,
}

pub struct MutableFuncPostIncrementParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncPostIncrementParams {
    pub(crate) id: i32,
}

pub struct MutableFuncRepeatManyParams {
    pub(crate) id: i32,
}

impl MutableFuncRepeatManyParams {
    pub fn num_repeats(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_NUM_REPEATS))
    }
}

pub struct ImmutableFuncRepeatManyParams {
    pub(crate) id: i32,
}

impl ImmutableFuncRepeatManyParams {
    pub fn num_repeats(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_NUM_REPEATS))
    }
}

pub struct MutableFuncTestLeb128Params {
    pub(crate) id: i32,
}

pub struct ImmutableFuncTestLeb128Params {
    pub(crate) id: i32,
}

pub struct MutableFuncWhenMustIncrementParams {
    pub(crate) id: i32,
}

pub struct ImmutableFuncWhenMustIncrementParams {
    pub(crate) id: i32,
}

pub struct MutableViewGetCounterParams {
    pub(crate) id: i32,
}

pub struct ImmutableViewGetCounterParams {
    pub(crate) id: i32,
}
