// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncCallIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncCallIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncCallIncrementRecurse5xResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncCallIncrementRecurse5xResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncEndlessLoopResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncEndlessLoopResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncInitResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncInitResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncLocalStateInternalCallResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncLocalStateInternalCallResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncLocalStatePostResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncLocalStatePostResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncLocalStateSandboxCallResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncLocalStateSandboxCallResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncPostIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncPostIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncRepeatManyResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncRepeatManyResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncTestLeb128Results {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncTestLeb128Results {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncWhenMustIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncWhenMustIncrementResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetCounterResults {
    pub(crate) id: i32,
}

impl ImmutableViewGetCounterResults {
    pub fn counter(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_COUNTER))
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetCounterResults {
    pub(crate) id: i32,
}

impl MutableViewGetCounterResults {
    pub fn counter(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_COUNTER))
    }
}
