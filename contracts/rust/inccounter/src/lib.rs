// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

use consts::*;
use inccounter::*;
use wasmlib::*;

mod consts;
mod inccounter;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_CALL_INCREMENT, func_call_increment_thunk);
    exports.add_func(FUNC_CALL_INCREMENT_RECURSE5X, func_call_increment_recurse5x_thunk);
    exports.add_func(FUNC_INCREMENT, func_increment_thunk);
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_LOCAL_STATE_INTERNAL_CALL, func_local_state_internal_call_thunk);
    exports.add_func(FUNC_LOCAL_STATE_POST, func_local_state_post_thunk);
    exports.add_func(FUNC_LOCAL_STATE_SANDBOX_CALL, func_local_state_sandbox_call_thunk);
    exports.add_func(FUNC_POST_INCREMENT, func_post_increment_thunk);
    exports.add_func(FUNC_REPEAT_MANY, func_repeat_many_thunk);
    exports.add_func(FUNC_TEST_LEB128, func_test_leb128_thunk);
    exports.add_func(FUNC_WHEN_MUST_INCREMENT, func_when_must_increment_thunk);
    exports.add_view(VIEW_GET_COUNTER, view_get_counter_thunk);
}

pub struct FuncCallIncrementParams {}

fn func_call_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcCallIncrement");
    let params = FuncCallIncrementParams {};
    func_call_increment(ctx, &params);
    ctx.log("inccounter.funcCallIncrement ok");
}

pub struct FuncCallIncrementRecurse5xParams {}

fn func_call_increment_recurse5x_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcCallIncrementRecurse5x");
    let params = FuncCallIncrementRecurse5xParams {};
    func_call_increment_recurse5x(ctx, &params);
    ctx.log("inccounter.funcCallIncrementRecurse5x ok");
}

pub struct FuncIncrementParams {}

fn func_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcIncrement");
    let params = FuncIncrementParams {};
    func_increment(ctx, &params);
    ctx.log("inccounter.funcIncrement ok");
}

pub struct FuncInitParams {
    pub counter: ScImmutableInt64, // value to initialize state counter with
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcInit");
    let p = ctx.params();
    let params = FuncInitParams {
        counter: p.get_int64(PARAM_COUNTER),
    };
    func_init(ctx, &params);
    ctx.log("inccounter.funcInit ok");
}

pub struct FuncLocalStateInternalCallParams {}

fn func_local_state_internal_call_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcLocalStateInternalCall");
    let params = FuncLocalStateInternalCallParams {};
    func_local_state_internal_call(ctx, &params);
    ctx.log("inccounter.funcLocalStateInternalCall ok");
}

pub struct FuncLocalStatePostParams {}

fn func_local_state_post_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcLocalStatePost");
    let params = FuncLocalStatePostParams {};
    func_local_state_post(ctx, &params);
    ctx.log("inccounter.funcLocalStatePost ok");
}

pub struct FuncLocalStateSandboxCallParams {}

fn func_local_state_sandbox_call_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcLocalStateSandboxCall");
    let params = FuncLocalStateSandboxCallParams {};
    func_local_state_sandbox_call(ctx, &params);
    ctx.log("inccounter.funcLocalStateSandboxCall ok");
}

pub struct FuncPostIncrementParams {}

fn func_post_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcPostIncrement");
    let params = FuncPostIncrementParams {};
    func_post_increment(ctx, &params);
    ctx.log("inccounter.funcPostIncrement ok");
}

pub struct FuncRepeatManyParams {
    pub num_repeats: ScImmutableInt64, // number of times to recursively call myself
}

fn func_repeat_many_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcRepeatMany");
    let p = ctx.params();
    let params = FuncRepeatManyParams {
        num_repeats: p.get_int64(PARAM_NUM_REPEATS),
    };
    func_repeat_many(ctx, &params);
    ctx.log("inccounter.funcRepeatMany ok");
}

pub struct FuncTestLeb128Params {}

fn func_test_leb128_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcTestLeb128");
    let params = FuncTestLeb128Params {};
    func_test_leb128(ctx, &params);
    ctx.log("inccounter.funcTestLeb128 ok");
}

pub struct FuncWhenMustIncrementParams {}

fn func_when_must_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcWhenMustIncrement");
    let params = FuncWhenMustIncrementParams {};
    func_when_must_increment(ctx, &params);
    ctx.log("inccounter.funcWhenMustIncrement ok");
}

pub struct ViewGetCounterParams {}

fn view_get_counter_thunk(ctx: &ScViewContext) {
    ctx.log("inccounter.viewGetCounter");
    let params = ViewGetCounterParams {};
    view_get_counter(ctx, &params);
    ctx.log("inccounter.viewGetCounter ok");
}
