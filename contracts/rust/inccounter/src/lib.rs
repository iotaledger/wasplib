// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

//@formatter:off

#![allow(dead_code)]

#![allow(unused_imports)]

use inccounter::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::state::*;

mod consts;
mod keys;
mod state;
mod inccounter;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_CALL_INCREMENT, func_call_increment_thunk);
    exports.add_func(FUNC_CALL_INCREMENT_RECURSE5X, func_call_increment_recurse5x_thunk);
    exports.add_func(FUNC_INCREMENT, func_increment_thunk);
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_LOCAL_STATE_INTERNAL_CALL, func_local_state_internal_call_thunk);
    exports.add_func(FUNC_LOCAL_STATE_POST, func_local_state_post_thunk);
    exports.add_func(FUNC_LOCAL_STATE_SANDBOX_CALL, func_local_state_sandbox_call_thunk);
    exports.add_func(FUNC_LOOP, func_loop_thunk);
    exports.add_func(FUNC_POST_INCREMENT, func_post_increment_thunk);
    exports.add_func(FUNC_REPEAT_MANY, func_repeat_many_thunk);
    exports.add_func(FUNC_TEST_LEB128, func_test_leb128_thunk);
    exports.add_func(FUNC_WHEN_MUST_INCREMENT, func_when_must_increment_thunk);
    exports.add_view(VIEW_GET_COUNTER, view_get_counter_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct FuncCallIncrementContext {
    state: IncCounterFuncState,
}

fn func_call_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcCallIncrement");
    let f = FuncCallIncrementContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_call_increment(ctx, &f);
    ctx.log("inccounter.funcCallIncrement ok");
}

pub struct FuncCallIncrementRecurse5xContext {
    state: IncCounterFuncState,
}

fn func_call_increment_recurse5x_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcCallIncrementRecurse5x");
    let f = FuncCallIncrementRecurse5xContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_call_increment_recurse5x(ctx, &f);
    ctx.log("inccounter.funcCallIncrementRecurse5x ok");
}

pub struct FuncIncrementContext {
    state: IncCounterFuncState,
}

fn func_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcIncrement");
    let f = FuncIncrementContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_increment(ctx, &f);
    ctx.log("inccounter.funcIncrement ok");
}

pub struct FuncInitParams {
    pub counter: ScImmutableInt64, // value to initialize state counter with
}

pub struct FuncInitContext {
    params: FuncInitParams,
    state:  IncCounterFuncState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcInit");
    let p = ctx.params().map_id();
    let f = FuncInitContext {
        params: FuncInitParams {
            counter: ScImmutableInt64::new(p, idx_map(IDX_PARAM_COUNTER)),
        },
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_init(ctx, &f);
    ctx.log("inccounter.funcInit ok");
}

pub struct FuncLocalStateInternalCallContext {
    state: IncCounterFuncState,
}

fn func_local_state_internal_call_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcLocalStateInternalCall");
    let f = FuncLocalStateInternalCallContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_local_state_internal_call(ctx, &f);
    ctx.log("inccounter.funcLocalStateInternalCall ok");
}

pub struct FuncLocalStatePostContext {
    state: IncCounterFuncState,
}

fn func_local_state_post_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcLocalStatePost");
    let f = FuncLocalStatePostContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_local_state_post(ctx, &f);
    ctx.log("inccounter.funcLocalStatePost ok");
}

pub struct FuncLocalStateSandboxCallContext {
    state: IncCounterFuncState,
}

fn func_local_state_sandbox_call_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcLocalStateSandboxCall");
    let f = FuncLocalStateSandboxCallContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_local_state_sandbox_call(ctx, &f);
    ctx.log("inccounter.funcLocalStateSandboxCall ok");
}

pub struct FuncLoopContext {
    state: IncCounterFuncState,
}

fn func_loop_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcLoop");
    let f = FuncLoopContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_loop(ctx, &f);
    ctx.log("inccounter.funcLoop ok");
}

pub struct FuncPostIncrementContext {
    state: IncCounterFuncState,
}

fn func_post_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcPostIncrement");
    let f = FuncPostIncrementContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_post_increment(ctx, &f);
    ctx.log("inccounter.funcPostIncrement ok");
}

pub struct FuncRepeatManyParams {
    pub num_repeats: ScImmutableInt64, // number of times to recursively call myself
}

pub struct FuncRepeatManyContext {
    params: FuncRepeatManyParams,
    state:  IncCounterFuncState,
}

fn func_repeat_many_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcRepeatMany");
    let p = ctx.params().map_id();
    let f = FuncRepeatManyContext {
        params: FuncRepeatManyParams {
            num_repeats: ScImmutableInt64::new(p, idx_map(IDX_PARAM_NUM_REPEATS)),
        },
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_repeat_many(ctx, &f);
    ctx.log("inccounter.funcRepeatMany ok");
}

pub struct FuncTestLeb128Context {
    state: IncCounterFuncState,
}

fn func_test_leb128_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcTestLeb128");
    let f = FuncTestLeb128Context {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_test_leb128(ctx, &f);
    ctx.log("inccounter.funcTestLeb128 ok");
}

pub struct FuncWhenMustIncrementContext {
    state: IncCounterFuncState,
}

fn func_when_must_increment_thunk(ctx: &ScFuncContext) {
    ctx.log("inccounter.funcWhenMustIncrement");
    let f = FuncWhenMustIncrementContext {
        state: IncCounterFuncState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_when_must_increment(ctx, &f);
    ctx.log("inccounter.funcWhenMustIncrement ok");
}

pub struct ViewGetCounterResults {
    pub counter: ScMutableInt64,
}

pub struct ViewGetCounterContext {
    results: ViewGetCounterResults,
    state:   IncCounterViewState,
}

fn view_get_counter_thunk(ctx: &ScViewContext) {
    ctx.log("inccounter.viewGetCounter");
    let r = ctx.results().map_id();
    let f = ViewGetCounterContext {
        results: ViewGetCounterResults {
            counter: ScMutableInt64::new(r, idx_map(IDX_RESULT_COUNTER)),
        },
        state: IncCounterViewState {
            state_id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    view_get_counter(ctx, &f);
    ctx.log("inccounter.viewGetCounter ok");
}

//@formatter:on
