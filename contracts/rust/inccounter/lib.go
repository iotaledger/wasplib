// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package inccounter

import "github.com/iotaledger/wasp/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCallIncrement, funcCallIncrementThunk)
	exports.AddFunc(FuncCallIncrementRecurse5x, funcCallIncrementRecurse5xThunk)
	exports.AddFunc(FuncEndlessLoop, funcEndlessLoopThunk)
	exports.AddFunc(FuncIncrement, funcIncrementThunk)
	exports.AddFunc(FuncIncrementWithDelay, funcIncrementWithDelayThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncLocalStateInternalCall, funcLocalStateInternalCallThunk)
	exports.AddFunc(FuncLocalStatePost, funcLocalStatePostThunk)
	exports.AddFunc(FuncLocalStateSandboxCall, funcLocalStateSandboxCallThunk)
	exports.AddFunc(FuncPostIncrement, funcPostIncrementThunk)
	exports.AddFunc(FuncRepeatMany, funcRepeatManyThunk)
	exports.AddFunc(FuncTestLeb128, funcTestLeb128Thunk)
	exports.AddFunc(FuncWhenMustIncrement, funcWhenMustIncrementThunk)
	exports.AddView(ViewGetCounter, viewGetCounterThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type CallIncrementContext struct {
	State MutableIncCounterState
}

func funcCallIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcCallIncrement")
	f := &CallIncrementContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcCallIncrement(ctx, f)
	ctx.Log("inccounter.funcCallIncrement ok")
}

type CallIncrementRecurse5xContext struct {
	State MutableIncCounterState
}

func funcCallIncrementRecurse5xThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcCallIncrementRecurse5x")
	f := &CallIncrementRecurse5xContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcCallIncrementRecurse5x(ctx, f)
	ctx.Log("inccounter.funcCallIncrementRecurse5x ok")
}

type EndlessLoopContext struct {
	State MutableIncCounterState
}

func funcEndlessLoopThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcEndlessLoop")
	f := &EndlessLoopContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcEndlessLoop(ctx, f)
	ctx.Log("inccounter.funcEndlessLoop ok")
}

type IncrementContext struct {
	State MutableIncCounterState
}

func funcIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcIncrement")
	f := &IncrementContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcIncrement(ctx, f)
	ctx.Log("inccounter.funcIncrement ok")
}

type IncrementWithDelayContext struct {
	Params ImmutableIncrementWithDelayParams
	State  MutableIncCounterState
}

func funcIncrementWithDelayThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcIncrementWithDelay")
	f := &IncrementWithDelayContext{
		Params: ImmutableIncrementWithDelayParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Delay().Exists(), "missing mandatory delay")
	funcIncrementWithDelay(ctx, f)
	ctx.Log("inccounter.funcIncrementWithDelay ok")
}

type InitContext struct {
	Params ImmutableInitParams
	State  MutableIncCounterState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcInit(ctx, f)
	ctx.Log("inccounter.funcInit ok")
}

type LocalStateInternalCallContext struct {
	State MutableIncCounterState
}

func funcLocalStateInternalCallThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStateInternalCall")
	f := &LocalStateInternalCallContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcLocalStateInternalCall(ctx, f)
	ctx.Log("inccounter.funcLocalStateInternalCall ok")
}

type LocalStatePostContext struct {
	State MutableIncCounterState
}

func funcLocalStatePostThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStatePost")
	f := &LocalStatePostContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcLocalStatePost(ctx, f)
	ctx.Log("inccounter.funcLocalStatePost ok")
}

type LocalStateSandboxCallContext struct {
	State MutableIncCounterState
}

func funcLocalStateSandboxCallThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStateSandboxCall")
	f := &LocalStateSandboxCallContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcLocalStateSandboxCall(ctx, f)
	ctx.Log("inccounter.funcLocalStateSandboxCall ok")
}

type PostIncrementContext struct {
	State MutableIncCounterState
}

func funcPostIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcPostIncrement")
	f := &PostIncrementContext{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcPostIncrement(ctx, f)
	ctx.Log("inccounter.funcPostIncrement ok")
}

type RepeatManyContext struct {
	Params ImmutableRepeatManyParams
	State  MutableIncCounterState
}

func funcRepeatManyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcRepeatMany")
	f := &RepeatManyContext{
		Params: ImmutableRepeatManyParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcRepeatMany(ctx, f)
	ctx.Log("inccounter.funcRepeatMany ok")
}

type TestLeb128Context struct {
	State MutableIncCounterState
}

func funcTestLeb128Thunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcTestLeb128")
	f := &TestLeb128Context{
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcTestLeb128(ctx, f)
	ctx.Log("inccounter.funcTestLeb128 ok")
}

type WhenMustIncrementContext struct {
	Params ImmutableWhenMustIncrementParams
	State  MutableIncCounterState
}

func funcWhenMustIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcWhenMustIncrement")
	f := &WhenMustIncrementContext{
		Params: ImmutableWhenMustIncrementParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcWhenMustIncrement(ctx, f)
	ctx.Log("inccounter.funcWhenMustIncrement ok")
}

type GetCounterContext struct {
	Results MutableGetCounterResults
	State   ImmutableIncCounterState
}

func viewGetCounterThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("inccounter.viewGetCounter")
	f := &GetCounterContext{
		Results: MutableGetCounterResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableIncCounterState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetCounter(ctx, f)
	ctx.Log("inccounter.viewGetCounter ok")
}
