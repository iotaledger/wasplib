// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package inccounter

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCallIncrement, funcCallIncrementThunk)
	exports.AddFunc(FuncCallIncrementRecurse5x, funcCallIncrementRecurse5xThunk)
	exports.AddFunc(FuncIncrement, funcIncrementThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncLocalStateInternalCall, funcLocalStateInternalCallThunk)
	exports.AddFunc(FuncLocalStatePost, funcLocalStatePostThunk)
	exports.AddFunc(FuncLocalStateSandboxCall, funcLocalStateSandboxCallThunk)
	exports.AddFunc(FuncPostIncrement, funcPostIncrementThunk)
	exports.AddFunc(FuncRepeatMany, funcRepeatManyThunk)
	exports.AddFunc(FuncTestLeb128, funcTestLeb128Thunk)
	exports.AddFunc(FuncWhenMustIncrement, funcWhenMustIncrementThunk)
	exports.AddView(ViewGetCounter, viewGetCounterThunk)
}

type FuncCallIncrementParams struct {
}

func funcCallIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcCallIncrement")
	params := &FuncCallIncrementParams{
	}
	funcCallIncrement(ctx, params)
	ctx.Log("inccounter.funcCallIncrement ok")
}

type FuncCallIncrementRecurse5xParams struct {
}

func funcCallIncrementRecurse5xThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcCallIncrementRecurse5x")
	params := &FuncCallIncrementRecurse5xParams{
	}
	funcCallIncrementRecurse5x(ctx, params)
	ctx.Log("inccounter.funcCallIncrementRecurse5x ok")
}

type FuncIncrementParams struct {
}

func funcIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcIncrement")
	params := &FuncIncrementParams{
	}
	funcIncrement(ctx, params)
	ctx.Log("inccounter.funcIncrement ok")
}

type FuncInitParams struct {
	Counter wasmlib.ScImmutableInt64 // value to initialize state counter with
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcInit")
	p := ctx.Params()
	params := &FuncInitParams{
		Counter: p.GetInt64(ParamCounter),
	}
	funcInit(ctx, params)
	ctx.Log("inccounter.funcInit ok")
}

type FuncLocalStateInternalCallParams struct {
}

func funcLocalStateInternalCallThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStateInternalCall")
	params := &FuncLocalStateInternalCallParams{
	}
	funcLocalStateInternalCall(ctx, params)
	ctx.Log("inccounter.funcLocalStateInternalCall ok")
}

type FuncLocalStatePostParams struct {
}

func funcLocalStatePostThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStatePost")
	params := &FuncLocalStatePostParams{
	}
	funcLocalStatePost(ctx, params)
	ctx.Log("inccounter.funcLocalStatePost ok")
}

type FuncLocalStateSandboxCallParams struct {
}

func funcLocalStateSandboxCallThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStateSandboxCall")
	params := &FuncLocalStateSandboxCallParams{
	}
	funcLocalStateSandboxCall(ctx, params)
	ctx.Log("inccounter.funcLocalStateSandboxCall ok")
}

type FuncPostIncrementParams struct {
}

func funcPostIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcPostIncrement")
	params := &FuncPostIncrementParams{
	}
	funcPostIncrement(ctx, params)
	ctx.Log("inccounter.funcPostIncrement ok")
}

type FuncRepeatManyParams struct {
	NumRepeats wasmlib.ScImmutableInt64 // number of times to recursively call myself
}

func funcRepeatManyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcRepeatMany")
	p := ctx.Params()
	params := &FuncRepeatManyParams{
		NumRepeats: p.GetInt64(ParamNumRepeats),
	}
	funcRepeatMany(ctx, params)
	ctx.Log("inccounter.funcRepeatMany ok")
}

type FuncTestLeb128Params struct {
}

func funcTestLeb128Thunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcTestLeb128")
	params := &FuncTestLeb128Params{
	}
	funcTestLeb128(ctx, params)
	ctx.Log("inccounter.funcTestLeb128 ok")
}

type FuncWhenMustIncrementParams struct {
}

func funcWhenMustIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcWhenMustIncrement")
	params := &FuncWhenMustIncrementParams{
	}
	funcWhenMustIncrement(ctx, params)
	ctx.Log("inccounter.funcWhenMustIncrement ok")
}

type ViewGetCounterParams struct {
}

func viewGetCounterThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("inccounter.viewGetCounter")
	params := &ViewGetCounterParams{
	}
	viewGetCounter(ctx, params)
	ctx.Log("inccounter.viewGetCounter ok")
}
