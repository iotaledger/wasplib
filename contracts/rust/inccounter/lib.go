// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package inccounter

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCallIncrement, funcCallIncrementThunk)
	exports.AddFunc(FuncCallIncrementRecurse5x, funcCallIncrementRecurse5xThunk)
	exports.AddFunc(FuncIncrement, funcIncrementThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncLocalStateInternalCall, funcLocalStateInternalCallThunk)
	exports.AddFunc(FuncLocalStatePost, funcLocalStatePostThunk)
	exports.AddFunc(FuncLocalStateSandboxCall, funcLocalStateSandboxCallThunk)
	exports.AddFunc(FuncLoop, funcLoopThunk)
	exports.AddFunc(FuncPostIncrement, funcPostIncrementThunk)
	exports.AddFunc(FuncRepeatMany, funcRepeatManyThunk)
	exports.AddFunc(FuncTestLeb128, funcTestLeb128Thunk)
	exports.AddFunc(FuncWhenMustIncrement, funcWhenMustIncrementThunk)
	exports.AddView(ViewGetCounter, viewGetCounterThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyId()
	}
}

type FuncCallIncrementContext struct {
	State MutableIncCounterState
}

func funcCallIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcCallIncrement")
	f := &FuncCallIncrementContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcCallIncrement(ctx, f)
	ctx.Log("inccounter.funcCallIncrement ok")
}

type FuncCallIncrementRecurse5xContext struct {
	State MutableIncCounterState
}

func funcCallIncrementRecurse5xThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcCallIncrementRecurse5x")
	f := &FuncCallIncrementRecurse5xContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcCallIncrementRecurse5x(ctx, f)
	ctx.Log("inccounter.funcCallIncrementRecurse5x ok")
}

type FuncIncrementContext struct {
	State MutableIncCounterState
}

func funcIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcIncrement")
	f := &FuncIncrementContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcIncrement(ctx, f)
	ctx.Log("inccounter.funcIncrement ok")
}

type FuncInitContext struct {
	Params ImmutableFuncInitParams
	State  MutableIncCounterState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcInit")
	f := &FuncInitContext{
		Params: ImmutableFuncInitParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcInit(ctx, f)
	ctx.Log("inccounter.funcInit ok")
}

type FuncLocalStateInternalCallContext struct {
	State MutableIncCounterState
}

func funcLocalStateInternalCallThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStateInternalCall")
	f := &FuncLocalStateInternalCallContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcLocalStateInternalCall(ctx, f)
	ctx.Log("inccounter.funcLocalStateInternalCall ok")
}

type FuncLocalStatePostContext struct {
	State MutableIncCounterState
}

func funcLocalStatePostThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStatePost")
	f := &FuncLocalStatePostContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcLocalStatePost(ctx, f)
	ctx.Log("inccounter.funcLocalStatePost ok")
}

type FuncLocalStateSandboxCallContext struct {
	State MutableIncCounterState
}

func funcLocalStateSandboxCallThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLocalStateSandboxCall")
	f := &FuncLocalStateSandboxCallContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcLocalStateSandboxCall(ctx, f)
	ctx.Log("inccounter.funcLocalStateSandboxCall ok")
}

type FuncLoopContext struct {
	State MutableIncCounterState
}

func funcLoopThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcLoop")
	f := &FuncLoopContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcLoop(ctx, f)
	ctx.Log("inccounter.funcLoop ok")
}

type FuncPostIncrementContext struct {
	State MutableIncCounterState
}

func funcPostIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcPostIncrement")
	f := &FuncPostIncrementContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcPostIncrement(ctx, f)
	ctx.Log("inccounter.funcPostIncrement ok")
}

type FuncRepeatManyContext struct {
	Params ImmutableFuncRepeatManyParams
	State  MutableIncCounterState
}

func funcRepeatManyThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcRepeatMany")
	f := &FuncRepeatManyContext{
		Params: ImmutableFuncRepeatManyParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcRepeatMany(ctx, f)
	ctx.Log("inccounter.funcRepeatMany ok")
}

type FuncTestLeb128Context struct {
	State MutableIncCounterState
}

func funcTestLeb128Thunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcTestLeb128")
	f := &FuncTestLeb128Context{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcTestLeb128(ctx, f)
	ctx.Log("inccounter.funcTestLeb128 ok")
}

type FuncWhenMustIncrementContext struct {
	State MutableIncCounterState
}

func funcWhenMustIncrementThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("inccounter.funcWhenMustIncrement")
	f := &FuncWhenMustIncrementContext{
		State: MutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcWhenMustIncrement(ctx, f)
	ctx.Log("inccounter.funcWhenMustIncrement ok")
}

type ViewGetCounterContext struct {
	Results MutableViewGetCounterResults
	State   ImmutableIncCounterState
}

func viewGetCounterThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("inccounter.viewGetCounter")
	f := &ViewGetCounterContext{
		Results: MutableViewGetCounterResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableIncCounterState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	viewGetCounter(ctx, f)
	ctx.Log("inccounter.viewGetCounter ok")
}
