// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package dividend

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncDivide, funcDivideThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncMember, funcMemberThunk)
	exports.AddFunc(FuncSetOwner, funcSetOwnerThunk)
	exports.AddView(ViewGetFactor, viewGetFactorThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyId()
	}
}

type FuncDivideContext struct {
	State MutableDividendState
}

func funcDivideThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dividend.funcDivide")
	f := &FuncDivideContext{
		State: MutableDividendState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcDivide(ctx, f)
	ctx.Log("dividend.funcDivide ok")
}

type FuncInitContext struct {
	Params ImmutableFuncInitParams
	State  MutableDividendState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dividend.funcInit")
	f := &FuncInitContext{
		Params: ImmutableFuncInitParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableDividendState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	funcInit(ctx, f)
	ctx.Log("dividend.funcInit ok")
}

type FuncMemberContext struct {
	Params ImmutableFuncMemberParams
	State  MutableDividendState
}

func funcMemberThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dividend.funcMember")
	// only defined owner can add members
	access := ctx.State().GetAgentId(wasmlib.Key("owner"))
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	f := &FuncMemberContext{
		Params: ImmutableFuncMemberParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableDividendState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Address().Exists(), "missing mandatory address")
	ctx.Require(f.Params.Factor().Exists(), "missing mandatory factor")
	funcMember(ctx, f)
	ctx.Log("dividend.funcMember ok")
}

type FuncSetOwnerContext struct {
	Params ImmutableFuncSetOwnerParams
	State  MutableDividendState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("dividend.funcSetOwner")
	// only defined owner can change owner
	access := ctx.State().GetAgentId(wasmlib.Key("owner"))
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	f := &FuncSetOwnerContext{
		Params: ImmutableFuncSetOwnerParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		State: MutableDividendState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("dividend.funcSetOwner ok")
}

type ViewGetFactorContext struct {
	Params  ImmutableViewGetFactorParams
	Results MutableViewGetFactorResults
	State   ImmutableDividendState
}

func viewGetFactorThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("dividend.viewGetFactor")
	f := &ViewGetFactorContext{
		Params: ImmutableViewGetFactorParams{
			id: wasmlib.GetObjectId(1, wasmlib.KeyParams, wasmlib.TYPE_MAP),
		},
		Results: MutableViewGetFactorResults{
			id: wasmlib.GetObjectId(1, wasmlib.KeyResults, wasmlib.TYPE_MAP),
		},
		State: ImmutableDividendState{
			id: wasmlib.GetObjectId(1, wasmlib.KeyState, wasmlib.TYPE_MAP),
		},
	}
	ctx.Require(f.Params.Address().Exists(), "missing mandatory address")
	viewGetFactor(ctx, f)
	ctx.Log("dividend.viewGetFactor ok")
}
