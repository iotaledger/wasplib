// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

use consts::*;
use dividend::*;
use wasmlib::*;

mod consts;
mod dividend;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_DIVIDE, func_divide_thunk);
    exports.add_func(FUNC_MEMBER, func_member_thunk);
    exports.add_view(VIEW_GET_FACTOR, view_get_factor_thunk);
}

pub struct FuncDivideParams {}

fn func_divide_thunk(ctx: &ScFuncContext) {
    let params = FuncDivideParams {};
    func_divide(ctx, &params);
}

//@formatter:off
pub struct FuncMemberParams {
    pub address: ScImmutableAddress,   // address of dividend recipient
    pub factor:  ScImmutableInt64,     // relative division factor
}
//@formatter:on

fn func_member_thunk(ctx: &ScFuncContext) {
    // only creator can add members
    ctx.require(ctx.caller() == ctx.contract_creator(), "no permission");

    let p = ctx.params();
    let params = FuncMemberParams {
        address: p.get_address(PARAM_ADDRESS),
        factor: p.get_int64(PARAM_FACTOR),
    };
    ctx.require(params.address.exists(), "missing mandatory address");
    ctx.require(params.factor.exists(), "missing mandatory factor");
    func_member(ctx, &params);
}

pub struct ViewGetFactorParams {
    pub address: ScImmutableAddress,   // address of dividend recipient
}

fn view_get_factor_thunk(ctx: &ScViewContext) {
    let p = ctx.params();
    let params = ViewGetFactorParams {
        address: p.get_address(PARAM_ADDRESS),
    };
    ctx.require(params.address.exists(), "missing mandatory address");
    view_get_factor(ctx, &params);
}
