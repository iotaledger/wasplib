// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

//@formatter:off

#![allow(dead_code)]

#![allow(unused_imports)]

use dividend::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod keys;
mod params;
mod results;
mod state;
mod dividend;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_DIVIDE, func_divide_thunk);
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_MEMBER, func_member_thunk);
    exports.add_func(FUNC_SET_OWNER, func_set_owner_thunk);
    exports.add_view(VIEW_GET_FACTOR, view_get_factor_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct FuncDivideContext {
    state: MutableDividendState,
}

fn func_divide_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcDivide");
    let f = FuncDivideContext {
        state: MutableDividendState {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_divide(ctx, &f);
    ctx.log("dividend.funcDivide ok");
}

pub struct FuncInitContext {
    params: ImmutableFuncInitParams,
    state:  MutableDividendState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcInit");
    let f = FuncInitContext {
        params: ImmutableFuncInitParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        state: MutableDividendState {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    func_init(ctx, &f);
    ctx.log("dividend.funcInit ok");
}

pub struct FuncMemberContext {
    params: ImmutableFuncMemberParams,
    state:  MutableDividendState,
}

fn func_member_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcMember");
    // only defined owner can add members
    let access = ctx.state().get_agent_id("owner");
    ctx.require(access.exists(), "access not set: owner");
    ctx.require(ctx.caller() == access.value(), "no permission");

    let f = FuncMemberContext {
        params: ImmutableFuncMemberParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        state: MutableDividendState {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.address().exists(), "missing mandatory address");
    ctx.require(f.params.factor().exists(), "missing mandatory factor");
    func_member(ctx, &f);
    ctx.log("dividend.funcMember ok");
}

pub struct FuncSetOwnerContext {
    params: ImmutableFuncSetOwnerParams,
    state:  MutableDividendState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcSetOwner");
    // only defined owner can change owner
    let access = ctx.state().get_agent_id("owner");
    ctx.require(access.exists(), "access not set: owner");
    ctx.require(ctx.caller() == access.value(), "no permission");

    let f = FuncSetOwnerContext {
        params: ImmutableFuncSetOwnerParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        state: MutableDividendState {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.owner().exists(), "missing mandatory owner");
    func_set_owner(ctx, &f);
    ctx.log("dividend.funcSetOwner ok");
}

pub struct ViewGetFactorContext {
    params:  ImmutableViewGetFactorParams,
    results: MutableViewGetFactorResults,
    state:   ImmutableDividendState,
}

fn view_get_factor_thunk(ctx: &ScViewContext) {
    ctx.log("dividend.viewGetFactor");
    let f = ViewGetFactorContext {
        params: ImmutableViewGetFactorParams {
            id: get_object_id(1, KEY_PARAMS, TYPE_MAP),
        },
        results: MutableViewGetFactorResults {
            id: get_object_id(1, KEY_RESULTS, TYPE_MAP),
        },
        state: ImmutableDividendState {
            id: get_object_id(1, KEY_STATE, TYPE_MAP),
        },
    };
    ctx.require(f.params.address().exists(), "missing mandatory address");
    view_get_factor(ctx, &f);
    ctx.log("dividend.viewGetFactor ok");
}

//@formatter:on
