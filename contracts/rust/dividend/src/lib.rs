// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

use consts::*;
use dividend::*;
use wasmlib::*;

mod consts;
mod dividend;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_DIVIDE, func_divide_thunk);
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_MEMBER, func_member_thunk);
    exports.add_func(FUNC_SET_OWNER, func_set_owner_thunk);
    exports.add_view(VIEW_GET_FACTOR, view_get_factor_thunk);
}

pub struct FuncDivideParams {}

fn func_divide_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcDivide");
    let params = FuncDivideParams {};
    func_divide(ctx, &params);
    ctx.log("dividend.funcDivide ok");
}

pub struct FuncInitParams {
    pub owner: ScImmutableAgentId,   // optional owner, defaults to contract creator
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcInit");
    let p = ctx.params();
    let params = FuncInitParams {
        owner: p.get_agent_id(PARAM_OWNER),
    };
    func_init(ctx, &params);
    ctx.log("dividend.funcInit ok");
}

//@formatter:off
pub struct FuncMemberParams {
    pub address: ScImmutableAddress,   // address of dividend recipient
    pub factor:  ScImmutableInt64,     // relative division factor
}
//@formatter:on

fn func_member_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcMember");
    // only defined owner can add members
    let grantee = ctx.state().get_agent_id("owner");
    ctx.require(grantee.exists(), "grantee not set: owner");
    ctx.require(ctx.caller() == grantee.value(), "no permission");

    let p = ctx.params();
    let params = FuncMemberParams {
        address: p.get_address(PARAM_ADDRESS),
        factor: p.get_int64(PARAM_FACTOR),
    };
    ctx.require(params.address.exists(), "missing mandatory address");
    ctx.require(params.factor.exists(), "missing mandatory factor");
    func_member(ctx, &params);
    ctx.log("dividend.funcMember ok");
}

pub struct FuncSetOwnerParams {
    pub owner: ScImmutableAgentId,   // new owner of smart contract
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
    ctx.log("dividend.funcSetOwner");
    // only defined owner can change owner
    let grantee = ctx.state().get_agent_id("owner");
    ctx.require(grantee.exists(), "grantee not set: owner");
    ctx.require(ctx.caller() == grantee.value(), "no permission");

    let p = ctx.params();
    let params = FuncSetOwnerParams {
        owner: p.get_agent_id(PARAM_OWNER),
    };
    ctx.require(params.owner.exists(), "missing mandatory owner");
    func_set_owner(ctx, &params);
    ctx.log("dividend.funcSetOwner ok");
}

pub struct ViewGetFactorParams {
    pub address: ScImmutableAddress,   // address of dividend recipient
}

fn view_get_factor_thunk(ctx: &ScViewContext) {
    ctx.log("dividend.viewGetFactor");
    let p = ctx.params();
    let params = ViewGetFactorParams {
        address: p.get_address(PARAM_ADDRESS),
    };
    ctx.require(params.address.exists(), "missing mandatory address");
    view_get_factor(ctx, &params);
    ctx.log("dividend.viewGetFactor ok");
}
