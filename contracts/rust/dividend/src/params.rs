// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncDivideParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncDivideParams {
    pub(crate) id: i32,
}

impl MutableFuncDivideParams {
    pub fn new() -> MutableFuncDivideParams {
        MutableFuncDivideParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncInitParams {
    pub(crate) id: i32,
}

impl ImmutableFuncInitParams {
    pub fn owner(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_OWNER))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncInitParams {
    pub(crate) id: i32,
}

impl MutableFuncInitParams {
    pub fn new() -> MutableFuncInitParams {
        MutableFuncInitParams { id: ScMutableMap::new().map_id() }
    }

    pub fn owner(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_OWNER))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncMemberParams {
    pub(crate) id: i32,
}

impl ImmutableFuncMemberParams {
    pub fn address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
    }

    pub fn factor(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_FACTOR))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncMemberParams {
    pub(crate) id: i32,
}

impl MutableFuncMemberParams {
    pub fn new() -> MutableFuncMemberParams {
        MutableFuncMemberParams { id: ScMutableMap::new().map_id() }
    }

    pub fn address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
    }

    pub fn factor(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_FACTOR))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncSetOwnerParams {
    pub(crate) id: i32,
}

impl ImmutableFuncSetOwnerParams {
    pub fn owner(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_OWNER))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncSetOwnerParams {
    pub(crate) id: i32,
}

impl MutableFuncSetOwnerParams {
    pub fn new() -> MutableFuncSetOwnerParams {
        MutableFuncSetOwnerParams { id: ScMutableMap::new().map_id() }
    }

    pub fn owner(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_OWNER))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetFactorParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetFactorParams {
    pub fn address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetFactorParams {
    pub(crate) id: i32,
}

impl MutableViewGetFactorParams {
    pub fn new() -> MutableViewGetFactorParams {
        MutableViewGetFactorParams { id: ScMutableMap::new().map_id() }
    }

    pub fn address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
    }
}
