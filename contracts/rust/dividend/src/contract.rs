// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct DividendFunc {
    sc: ScContractFunc,
}

impl DividendFunc {
    pub fn new(ctx: &ScFuncContext) -> DividendFunc {
        DividendFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i64) -> &mut DividendFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut DividendFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut DividendFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut DividendFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn divide(&mut self, transfer: ScTransfers) {
        self.sc.run(HFUNC_DIVIDE, 0, Some(transfer));
    }

    pub fn init(&mut self, params: MutableFuncInitParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_INIT, params.id, Some(transfer));
    }

    pub fn member(&mut self, params: MutableFuncMemberParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_MEMBER, params.id, Some(transfer));
    }

    pub fn set_owner(&mut self, params: MutableFuncSetOwnerParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_SET_OWNER, params.id, Some(transfer));
    }

    pub fn get_factor(&mut self, params: MutableViewGetFactorParams) -> ImmutableViewGetFactorResults {
        self.sc.run(HVIEW_GET_FACTOR, params.id, None);
        ImmutableViewGetFactorResults { id: self.sc.result_map_id() }
    }
}

pub struct DividendView {
    sc: ScContractView,
}

impl DividendView {
    pub fn new(ctx: &ScViewContext) -> DividendView {
        DividendView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut DividendView {
        self.sc.of_contract(contract);
        self
    }

    pub fn get_factor(&mut self, params: MutableViewGetFactorParams) -> ImmutableViewGetFactorResults {
        self.sc.run(HVIEW_GET_FACTOR, params.id);
        ImmutableViewGetFactorResults { id: self.sc.result_map_id() }
    }
}
