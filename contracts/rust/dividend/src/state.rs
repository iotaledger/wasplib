// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;

pub struct ArrayOfMutableAddress {
    pub(crate) obj_id: i32,
}

impl ArrayOfMutableAddress {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_address(&self, index: i32) -> ScMutableAddress {
        ScMutableAddress::new(self.obj_id, Key32(index))
    }
}

pub struct MapAddressToMutableInt64 {
    pub(crate) obj_id: i32,
}

impl MapAddressToMutableInt64 {
    pub fn clear(&self) {
        clear(self.obj_id)
    }

    pub fn get_int64(&self, key: &ScAddress) -> ScMutableInt64 {
        ScMutableInt64::new(self.obj_id, key.get_key_id())
    }
}

pub struct DividendFuncState {
    pub(crate) state_id: i32,
}

impl DividendFuncState {
    pub fn factor(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.state_id, VAR_FACTOR.get_key_id())
    }

    pub fn member_list(&self) -> ArrayOfMutableAddress {
        let arr_id = get_object_id(self.state_id, VAR_MEMBER_LIST.get_key_id(), TYPE_ARRAY | TYPE_ADDRESS);
        ArrayOfMutableAddress { obj_id: arr_id }
    }

    pub fn members(&self) -> MapAddressToMutableInt64 {
        let map_id = get_object_id(self.state_id, VAR_MEMBERS.get_key_id(), TYPE_MAP);
        MapAddressToMutableInt64 { obj_id: map_id }
    }

    pub fn owner(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.state_id, VAR_OWNER.get_key_id())
    }

    pub fn total_factor(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.state_id, VAR_TOTAL_FACTOR.get_key_id())
    }
}

pub struct ArrayOfImmutableAddress {
    pub(crate) obj_id: i32,
}

impl ArrayOfImmutableAddress {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_address(&self, index: i32) -> ScImmutableAddress {
        ScImmutableAddress::new(self.obj_id, Key32(index))
    }
}

pub struct MapAddressToImmutableInt64 {
    pub(crate) obj_id: i32,
}

impl MapAddressToImmutableInt64 {
    pub fn get_int64(&self, key: &ScAddress) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.obj_id, key.get_key_id())
    }
}

pub struct DividendViewState {
    pub(crate) state_id: i32,
}

impl DividendViewState {
    pub fn factor(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.state_id, VAR_FACTOR.get_key_id())
    }

    pub fn member_list(&self) -> ArrayOfImmutableAddress {
        let arr_id = get_object_id(self.state_id, VAR_MEMBER_LIST.get_key_id(), TYPE_ARRAY | TYPE_ADDRESS);
        ArrayOfImmutableAddress { obj_id: arr_id }
    }

    pub fn members(&self) -> MapAddressToImmutableInt64 {
        let map_id = get_object_id(self.state_id, VAR_MEMBERS.get_key_id(), TYPE_MAP);
        MapAddressToImmutableInt64 { obj_id: map_id }
    }

    pub fn owner(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.state_id, VAR_OWNER.get_key_id())
    }

    pub fn total_factor(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.state_id, VAR_TOTAL_FACTOR.get_key_id())
    }
}
