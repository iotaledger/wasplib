// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

//@formatter:off

#![allow(dead_code)]

use testwasmlib::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::state::*;

mod consts;
mod keys;
mod state;
mod testwasmlib;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_PARAM_TYPES, func_param_types_thunk);
    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct FuncParamTypesParams {
    pub address:    ScImmutableAddress,
    pub agent_id:   ScImmutableAgentId,
    pub bytes:      ScImmutableBytes,
    pub chain_id:   ScImmutableChainId,
    pub color:      ScImmutableColor,
    pub hash:       ScImmutableHash,
    pub hname:      ScImmutableHname,
    pub int64:      ScImmutableInt64,
    pub request_id: ScImmutableRequestId,
    pub string:     ScImmutableString,
}

pub struct FuncParamTypesContext {
    params: FuncParamTypesParams,
    state:  TestWasmLibFuncState,
}

fn func_param_types_thunk(ctx: &ScFuncContext) {
    ctx.log("testwasmlib.funcParamTypes");
    let p = ctx.params().map_id();
    let f = FuncParamTypesContext {
        params: FuncParamTypesParams {
            address:    ScImmutableAddress::new(p, idx_map(IDX_PARAM_ADDRESS)),
            agent_id:   ScImmutableAgentId::new(p, idx_map(IDX_PARAM_AGENT_ID)),
            bytes:      ScImmutableBytes::new(p, idx_map(IDX_PARAM_BYTES)),
            chain_id:   ScImmutableChainId::new(p, idx_map(IDX_PARAM_CHAIN_ID)),
            color:      ScImmutableColor::new(p, idx_map(IDX_PARAM_COLOR)),
            hash:       ScImmutableHash::new(p, idx_map(IDX_PARAM_HASH)),
            hname:      ScImmutableHname::new(p, idx_map(IDX_PARAM_HNAME)),
            int64:      ScImmutableInt64::new(p, idx_map(IDX_PARAM_INT64)),
            request_id: ScImmutableRequestId::new(p, idx_map(IDX_PARAM_REQUEST_ID)),
            string:     ScImmutableString::new(p, idx_map(IDX_PARAM_STRING)),
        },
        state: TestWasmLibFuncState {
            state_id: get_object_id(1, KEY_STATE.get_key_id(), TYPE_MAP),
        },
    };
    func_param_types(ctx, &f);
    ctx.log("testwasmlib.funcParamTypes ok");
}

//@formatter:on
