// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct TestWasmLibFunc {
    sc: ScContractFunc,
}

impl TestWasmLibFunc {
    pub fn new(ctx: &ScFuncContext) -> TestWasmLibFunc {
        TestWasmLibFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i32) -> &mut TestWasmLibFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut TestWasmLibFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut TestWasmLibFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut TestWasmLibFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn param_types(&mut self, params: MutableFuncParamTypesParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_PARAM_TYPES, params.id, Some(transfer));
    }

    pub fn block_record(&mut self, params: MutableViewBlockRecordParams) -> ImmutableViewBlockRecordResults {
        self.sc.run(HVIEW_BLOCK_RECORD, params.id, None);
        ImmutableViewBlockRecordResults { id: self.sc.result_map_id() }
    }

    pub fn block_records(&mut self, params: MutableViewBlockRecordsParams) -> ImmutableViewBlockRecordsResults {
        self.sc.run(HVIEW_BLOCK_RECORDS, params.id, None);
        ImmutableViewBlockRecordsResults { id: self.sc.result_map_id() }
    }
}

pub struct TestWasmLibView {
    sc: ScContractView,
}

impl TestWasmLibView {
    pub fn new(ctx: &ScViewContext) -> TestWasmLibView {
        TestWasmLibView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut TestWasmLibView {
        self.sc.of_contract(contract);
        self
    }

    pub fn block_record(&mut self, params: MutableViewBlockRecordParams) -> ImmutableViewBlockRecordResults {
        self.sc.run(HVIEW_BLOCK_RECORD, params.id);
        ImmutableViewBlockRecordResults { id: self.sc.result_map_id() }
    }

    pub fn block_records(&mut self, params: MutableViewBlockRecordsParams) -> ImmutableViewBlockRecordsResults {
        self.sc.run(HVIEW_BLOCK_RECORDS, params.id);
        ImmutableViewBlockRecordsResults { id: self.sc.result_map_id() }
    }
}
