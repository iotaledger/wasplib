// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncParamTypesParams {
    pub(crate) id: i32,
}

impl ImmutableFuncParamTypesParams {
    pub fn address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
    }

    pub fn agent_id(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, idx_map(IDX_PARAM_AGENT_ID))
    }

    pub fn bytes(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.id, idx_map(IDX_PARAM_BYTES))
    }

    pub fn chain_id(&self) -> ScImmutableChainId {
        ScImmutableChainId::new(self.id, idx_map(IDX_PARAM_CHAIN_ID))
    }

    pub fn color(&self) -> ScImmutableColor {
        ScImmutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }

    pub fn hash(&self) -> ScImmutableHash {
        ScImmutableHash::new(self.id, idx_map(IDX_PARAM_HASH))
    }

    pub fn hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.id, idx_map(IDX_PARAM_HNAME))
    }

    pub fn int16(&self) -> ScImmutableInt16 {
        ScImmutableInt16::new(self.id, idx_map(IDX_PARAM_INT16))
    }

    pub fn int32(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_INT32))
    }

    pub fn int64(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_INT64))
    }

    pub fn request_id(&self) -> ScImmutableRequestId {
        ScImmutableRequestId::new(self.id, idx_map(IDX_PARAM_REQUEST_ID))
    }

    pub fn string(&self) -> ScImmutableString {
        ScImmutableString::new(self.id, idx_map(IDX_PARAM_STRING))
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncParamTypesParams {
    pub(crate) id: i32,
}

impl MutableFuncParamTypesParams {
    pub fn new() -> MutableFuncParamTypesParams {
        MutableFuncParamTypesParams { id: ScMutableMap::new().map_id() }
    }

    pub fn address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, idx_map(IDX_PARAM_ADDRESS))
    }

    pub fn agent_id(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, idx_map(IDX_PARAM_AGENT_ID))
    }

    pub fn bytes(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.id, idx_map(IDX_PARAM_BYTES))
    }

    pub fn chain_id(&self) -> ScMutableChainId {
        ScMutableChainId::new(self.id, idx_map(IDX_PARAM_CHAIN_ID))
    }

    pub fn color(&self) -> ScMutableColor {
        ScMutableColor::new(self.id, idx_map(IDX_PARAM_COLOR))
    }

    pub fn hash(&self) -> ScMutableHash {
        ScMutableHash::new(self.id, idx_map(IDX_PARAM_HASH))
    }

    pub fn hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.id, idx_map(IDX_PARAM_HNAME))
    }

    pub fn int16(&self) -> ScMutableInt16 {
        ScMutableInt16::new(self.id, idx_map(IDX_PARAM_INT16))
    }

    pub fn int32(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_PARAM_INT32))
    }

    pub fn int64(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_PARAM_INT64))
    }

    pub fn request_id(&self) -> ScMutableRequestId {
        ScMutableRequestId::new(self.id, idx_map(IDX_PARAM_REQUEST_ID))
    }

    pub fn string(&self) -> ScMutableString {
        ScMutableString::new(self.id, idx_map(IDX_PARAM_STRING))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewBlockRecordParams {
    pub(crate) id: i32,
}

impl ImmutableViewBlockRecordParams {
    pub fn block_index(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
    }

    pub fn record_index(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_RECORD_INDEX))
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewBlockRecordParams {
    pub(crate) id: i32,
}

impl MutableViewBlockRecordParams {
    pub fn new() -> MutableViewBlockRecordParams {
        MutableViewBlockRecordParams { id: ScMutableMap::new().map_id() }
    }

    pub fn block_index(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
    }

    pub fn record_index(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_PARAM_RECORD_INDEX))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewBlockRecordsParams {
    pub(crate) id: i32,
}

impl ImmutableViewBlockRecordsParams {
    pub fn block_index(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewBlockRecordsParams {
    pub(crate) id: i32,
}

impl MutableViewBlockRecordsParams {
    pub fn new() -> MutableViewBlockRecordsParams {
        MutableViewBlockRecordsParams { id: ScMutableMap::new().map_id() }
    }

    pub fn block_index(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_PARAM_BLOCK_INDEX))
    }
}
