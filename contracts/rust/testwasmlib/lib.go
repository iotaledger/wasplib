// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package testwasmlib

import "github.com/iotaledger/wasplib/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncParamTypes, funcParamTypesThunk)
}

type FuncParamTypesParams struct {
	Address   wasmlib.ScImmutableAddress
	AgentId   wasmlib.ScImmutableAgentId
	Bytes     wasmlib.ScImmutableBytes
	ChainId   wasmlib.ScImmutableChainId
	Color     wasmlib.ScImmutableColor
	Hash      wasmlib.ScImmutableHash
	Hname     wasmlib.ScImmutableHname
	Int64     wasmlib.ScImmutableInt64
	RequestId wasmlib.ScImmutableRequestId
	String    wasmlib.ScImmutableString
}

type FuncParamTypesContext struct {
	Params FuncParamTypesParams
	State  TestWasmLibFuncState
}

func funcParamTypesThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("testwasmlib.funcParamTypes")
	p := ctx.Params().MapId()
	f := &FuncParamTypesContext{
		Params: FuncParamTypesParams{
			Address:   wasmlib.NewScImmutableAddress(p, ParamAddress.KeyId()),
			AgentId:   wasmlib.NewScImmutableAgentId(p, ParamAgentId.KeyId()),
			Bytes:     wasmlib.NewScImmutableBytes(p, ParamBytes.KeyId()),
			ChainId:   wasmlib.NewScImmutableChainId(p, ParamChainId.KeyId()),
			Color:     wasmlib.NewScImmutableColor(p, ParamColor.KeyId()),
			Hash:      wasmlib.NewScImmutableHash(p, ParamHash.KeyId()),
			Hname:     wasmlib.NewScImmutableHname(p, ParamHname.KeyId()),
			Int64:     wasmlib.NewScImmutableInt64(p, ParamInt64.KeyId()),
			RequestId: wasmlib.NewScImmutableRequestId(p, ParamRequestId.KeyId()),
			String:    wasmlib.NewScImmutableString(p, ParamString.KeyId()),
		},
		State: TestWasmLibFuncState{
			stateId: wasmlib.GetObjectId(1, wasmlib.KeyState.KeyId(), wasmlib.TYPE_MAP),
		},
	}
	funcParamTypes(ctx, f)
	ctx.Log("testwasmlib.funcParamTypes ok")
}
