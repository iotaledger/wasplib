// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package testwasmlib

import "github.com/iotaledger/wasp/packages/vm/wasmlib"

type ArrayClearCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayClearParams
}

type ArrayCreateCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayCreateParams
}

type ArraySetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArraySetParams
}

type ParamTypesCall struct {
	Func   *wasmlib.ScFunc
	Params MutableParamTypesParams
}

type ArrayLengthCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayLengthParams
	Results ImmutableArrayLengthResults
}

type ArrayValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayValueParams
	Results ImmutableArrayValueResults
}

type BlockRecordCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordParams
	Results ImmutableBlockRecordResults
}

type BlockRecordsCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordsParams
	Results ImmutableBlockRecordsResults
}

type IotaBalanceCall struct {
	Func    *wasmlib.ScView
	Results ImmutableIotaBalanceResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) ArrayClear(ctx wasmlib.ScFuncCallContext) *ArrayClearCall {
	f := &ArrayClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayClear)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc Funcs) ArrayCreate(ctx wasmlib.ScFuncCallContext) *ArrayCreateCall {
	f := &ArrayCreateCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayCreate)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc Funcs) ArraySet(ctx wasmlib.ScFuncCallContext) *ArraySetCall {
	f := &ArraySetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArraySet)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc Funcs) ParamTypes(ctx wasmlib.ScFuncCallContext) *ParamTypesCall {
	f := &ParamTypesCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncParamTypes)}
	f.Func.SetPtrs(&f.Params.id, nil)
	return f
}

func (sc Funcs) ArrayLength(ctx wasmlib.ScViewCallContext) *ArrayLengthCall {
	f := &ArrayLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayLength)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func (sc Funcs) ArrayValue(ctx wasmlib.ScViewCallContext) *ArrayValueCall {
	f := &ArrayValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayValue)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func (sc Funcs) BlockRecord(ctx wasmlib.ScViewCallContext) *BlockRecordCall {
	f := &BlockRecordCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecord)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func (sc Funcs) BlockRecords(ctx wasmlib.ScViewCallContext) *BlockRecordsCall {
	f := &BlockRecordsCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecords)}
	f.Func.SetPtrs(&f.Params.id, &f.Results.id)
	return f
}

func (sc Funcs) IotaBalance(ctx wasmlib.ScViewCallContext) *IotaBalanceCall {
	f := &IotaBalanceCall{Func: wasmlib.NewScView(ctx, HScName, HViewIotaBalance)}
	f.Func.SetPtrs(nil, &f.Results.id)
	return f
}
