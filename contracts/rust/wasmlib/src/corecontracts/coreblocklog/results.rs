// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreblocklog::*;
use crate::host::*;

#[derive(Clone, Copy)]
pub struct ImmutableViewControlAddressesResults {
    pub(crate) id: i32,
}

impl ImmutableViewControlAddressesResults {
    pub fn block_index(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, RESULT_BLOCK_INDEX.get_key_id())
    }

    pub fn governing_address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, RESULT_GOVERNING_ADDRESS.get_key_id())
    }

    pub fn state_controller_address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, RESULT_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewControlAddressesResults {
    pub(crate) id: i32,
}

impl MutableViewControlAddressesResults {
    pub fn block_index(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, RESULT_BLOCK_INDEX.get_key_id())
    }

    pub fn governing_address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, RESULT_GOVERNING_ADDRESS.get_key_id())
    }

    pub fn state_controller_address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, RESULT_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetBlockInfoResults {
    pub(crate) id: i32,
}

impl ImmutableViewGetBlockInfoResults {
    pub fn block_info(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.id, RESULT_BLOCK_INFO.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetBlockInfoResults {
    pub(crate) id: i32,
}

impl MutableViewGetBlockInfoResults {
    pub fn block_info(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.id, RESULT_BLOCK_INFO.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetLatestBlockInfoResults {
    pub(crate) id: i32,
}

impl ImmutableViewGetLatestBlockInfoResults {
    pub fn block_info(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.id, RESULT_BLOCK_INFO.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetLatestBlockInfoResults {
    pub(crate) id: i32,
}

impl MutableViewGetLatestBlockInfoResults {
    pub fn block_info(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.id, RESULT_BLOCK_INFO.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetRequestIDsForBlockResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewGetRequestIDsForBlockResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetRequestLogRecordResults {
    pub(crate) id: i32,
}

impl ImmutableViewGetRequestLogRecordResults {
    pub fn block_index(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, RESULT_BLOCK_INDEX.get_key_id())
    }

    pub fn request_index(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, RESULT_REQUEST_INDEX.get_key_id())
    }

    pub fn request_record(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.id, RESULT_REQUEST_RECORD.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetRequestLogRecordResults {
    pub(crate) id: i32,
}

impl MutableViewGetRequestLogRecordResults {
    pub fn block_index(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, RESULT_BLOCK_INDEX.get_key_id())
    }

    pub fn request_index(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, RESULT_REQUEST_INDEX.get_key_id())
    }

    pub fn request_record(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.id, RESULT_REQUEST_RECORD.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetRequestLogRecordsForBlockResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewGetRequestLogRecordsForBlockResults {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct ImmutableViewIsRequestProcessedResults {
    pub(crate) id: i32,
}

impl ImmutableViewIsRequestProcessedResults {
    pub fn request_processed(&self) -> ScImmutableString {
        ScImmutableString::new(self.id, RESULT_REQUEST_PROCESSED.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewIsRequestProcessedResults {
    pub(crate) id: i32,
}

impl MutableViewIsRequestProcessedResults {
    pub fn request_processed(&self) -> ScMutableString {
        ScMutableString::new(self.id, RESULT_REQUEST_PROCESSED.get_key_id())
    }
}
