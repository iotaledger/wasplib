// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreblocklog::*;
use crate::host::*;

#[derive(Clone, Copy)]
pub struct ImmutableGetBlockInfoParams {
    pub(crate) id: i32,
}

impl ImmutableGetBlockInfoParams {
    pub fn block_index(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableGetBlockInfoParams {
    pub(crate) id: i32,
}

impl MutableGetBlockInfoParams {
    pub fn block_index(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableGetRequestIDsForBlockParams {
    pub(crate) id: i32,
}

impl ImmutableGetRequestIDsForBlockParams {
    pub fn block_index(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableGetRequestIDsForBlockParams {
    pub(crate) id: i32,
}

impl MutableGetRequestIDsForBlockParams {
    pub fn block_index(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableGetRequestLogRecordParams {
    pub(crate) id: i32,
}

impl ImmutableGetRequestLogRecordParams {
    pub fn request_id(&self) -> ScImmutableRequestID {
        ScImmutableRequestID::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableGetRequestLogRecordParams {
    pub(crate) id: i32,
}

impl MutableGetRequestLogRecordParams {
    pub fn request_id(&self) -> ScMutableRequestID {
        ScMutableRequestID::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableGetRequestLogRecordsForBlockParams {
    pub(crate) id: i32,
}

impl ImmutableGetRequestLogRecordsForBlockParams {
    pub fn block_index(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableGetRequestLogRecordsForBlockParams {
    pub(crate) id: i32,
}

impl MutableGetRequestLogRecordsForBlockParams {
    pub fn block_index(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableIsRequestProcessedParams {
    pub(crate) id: i32,
}

impl ImmutableIsRequestProcessedParams {
    pub fn request_id(&self) -> ScImmutableRequestID {
        ScImmutableRequestID::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableIsRequestProcessedParams {
    pub(crate) id: i32,
}

impl MutableIsRequestProcessedParams {
    pub fn request_id(&self) -> ScMutableRequestID {
        ScMutableRequestID::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}
