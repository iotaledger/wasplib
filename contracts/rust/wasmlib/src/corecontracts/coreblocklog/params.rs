// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreblocklog::*;

#[derive(Clone, Copy)]
pub struct ImmutableViewControlAddressesParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewControlAddressesParams {
    pub(crate) id: i32,
}

impl MutableViewControlAddressesParams {
    pub fn new() -> MutableViewControlAddressesParams {
        MutableViewControlAddressesParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetBlockInfoParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetBlockInfoParams {
    pub fn block_index(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetBlockInfoParams {
    pub(crate) id: i32,
}

impl MutableViewGetBlockInfoParams {
    pub fn new() -> MutableViewGetBlockInfoParams {
        MutableViewGetBlockInfoParams { id: ScMutableMap::new().map_id() }
    }

    pub fn block_index(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetLatestBlockInfoParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewGetLatestBlockInfoParams {
    pub(crate) id: i32,
}

impl MutableViewGetLatestBlockInfoParams {
    pub fn new() -> MutableViewGetLatestBlockInfoParams {
        MutableViewGetLatestBlockInfoParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetRequestIDsForBlockParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetRequestIDsForBlockParams {
    pub fn block_index(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetRequestIDsForBlockParams {
    pub(crate) id: i32,
}

impl MutableViewGetRequestIDsForBlockParams {
    pub fn new() -> MutableViewGetRequestIDsForBlockParams {
        MutableViewGetRequestIDsForBlockParams { id: ScMutableMap::new().map_id() }
    }

    pub fn block_index(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetRequestLogRecordParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetRequestLogRecordParams {
    pub fn request_id(&self) -> ScImmutableRequestId {
        ScImmutableRequestId::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetRequestLogRecordParams {
    pub(crate) id: i32,
}

impl MutableViewGetRequestLogRecordParams {
    pub fn new() -> MutableViewGetRequestLogRecordParams {
        MutableViewGetRequestLogRecordParams { id: ScMutableMap::new().map_id() }
    }

    pub fn request_id(&self) -> ScMutableRequestId {
        ScMutableRequestId::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetRequestLogRecordsForBlockParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetRequestLogRecordsForBlockParams {
    pub fn block_index(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetRequestLogRecordsForBlockParams {
    pub(crate) id: i32,
}

impl MutableViewGetRequestLogRecordsForBlockParams {
    pub fn new() -> MutableViewGetRequestLogRecordsForBlockParams {
        MutableViewGetRequestLogRecordsForBlockParams { id: ScMutableMap::new().map_id() }
    }

    pub fn block_index(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_BLOCK_INDEX.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewIsRequestProcessedParams {
    pub(crate) id: i32,
}

impl ImmutableViewIsRequestProcessedParams {
    pub fn request_id(&self) -> ScImmutableRequestId {
        ScImmutableRequestId::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewIsRequestProcessedParams {
    pub(crate) id: i32,
}

impl MutableViewIsRequestProcessedParams {
    pub fn new() -> MutableViewIsRequestProcessedParams {
        MutableViewIsRequestProcessedParams { id: ScMutableMap::new().map_id() }
    }

    pub fn request_id(&self) -> ScMutableRequestId {
        ScMutableRequestId::new(self.id, PARAM_REQUEST_ID.get_key_id())
    }
}
