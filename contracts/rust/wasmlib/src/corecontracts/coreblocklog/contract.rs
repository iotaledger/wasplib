// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use crate::*;
use crate::corecontracts::coreblocklog::*;

pub struct CoreBlockLogFunc {
    sc: ScContractFunc,
}

impl CoreBlockLogFunc {
    pub fn new(ctx: &ScFuncContext) -> CoreBlockLogFunc {
        CoreBlockLogFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i32) -> &mut CoreBlockLogFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreBlockLogFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut CoreBlockLogFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut CoreBlockLogFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn get_block_info(&mut self, params: MutableViewGetBlockInfoParams) -> ImmutableViewGetBlockInfoResults {
        self.sc.run(HVIEW_GET_BLOCK_INFO, params.id, None);
        ImmutableViewGetBlockInfoResults { id: self.sc.result_map_id() }
    }

    pub fn get_latest_block_info(&mut self) -> ImmutableViewGetLatestBlockInfoResults {
        self.sc.run(HVIEW_GET_LATEST_BLOCK_INFO, 0, None);
        ImmutableViewGetLatestBlockInfoResults { id: self.sc.result_map_id() }
    }

    pub fn get_request_i_ds_for_block(&mut self, params: MutableViewGetRequestIDsForBlockParams) {
        self.sc.run(HVIEW_GET_REQUEST_I_DS_FOR_BLOCK, params.id, None);
    }

    pub fn get_request_log_record(&mut self, params: MutableViewGetRequestLogRecordParams) -> ImmutableViewGetRequestLogRecordResults {
        self.sc.run(HVIEW_GET_REQUEST_LOG_RECORD, params.id, None);
        ImmutableViewGetRequestLogRecordResults { id: self.sc.result_map_id() }
    }

    pub fn get_request_log_records_for_block(&mut self, params: MutableViewGetRequestLogRecordsForBlockParams) {
        self.sc.run(HVIEW_GET_REQUEST_LOG_RECORDS_FOR_BLOCK, params.id, None);
    }

    pub fn is_request_processed(&mut self, params: MutableViewIsRequestProcessedParams) -> ImmutableViewIsRequestProcessedResults {
        self.sc.run(HVIEW_IS_REQUEST_PROCESSED, params.id, None);
        ImmutableViewIsRequestProcessedResults { id: self.sc.result_map_id() }
    }
}

pub struct CoreBlockLogView {
    sc: ScContractView,
}

impl CoreBlockLogView {
    pub fn new(ctx: &ScViewContext) -> CoreBlockLogView {
        CoreBlockLogView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreBlockLogView {
        self.sc.of_contract(contract);
        self
    }

    pub fn get_block_info(&mut self, params: MutableViewGetBlockInfoParams) -> ImmutableViewGetBlockInfoResults {
        self.sc.run(HVIEW_GET_BLOCK_INFO, params.id);
        ImmutableViewGetBlockInfoResults { id: self.sc.result_map_id() }
    }

    pub fn get_latest_block_info(&mut self) -> ImmutableViewGetLatestBlockInfoResults {
        self.sc.run(HVIEW_GET_LATEST_BLOCK_INFO, 0);
        ImmutableViewGetLatestBlockInfoResults { id: self.sc.result_map_id() }
    }

    pub fn get_request_i_ds_for_block(&mut self, params: MutableViewGetRequestIDsForBlockParams) {
        self.sc.run(HVIEW_GET_REQUEST_I_DS_FOR_BLOCK, params.id);
    }

    pub fn get_request_log_record(&mut self, params: MutableViewGetRequestLogRecordParams) -> ImmutableViewGetRequestLogRecordResults {
        self.sc.run(HVIEW_GET_REQUEST_LOG_RECORD, params.id);
        ImmutableViewGetRequestLogRecordResults { id: self.sc.result_map_id() }
    }

    pub fn get_request_log_records_for_block(&mut self, params: MutableViewGetRequestLogRecordsForBlockParams) {
        self.sc.run(HVIEW_GET_REQUEST_LOG_RECORDS_FOR_BLOCK, params.id);
    }

    pub fn is_request_processed(&mut self, params: MutableViewIsRequestProcessedParams) -> ImmutableViewIsRequestProcessedResults {
        self.sc.run(HVIEW_IS_REQUEST_PROCESSED, params.id);
        ImmutableViewIsRequestProcessedResults { id: self.sc.result_map_id() }
    }
}
