// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

use std::ptr;

use crate::*;
use crate::corecontracts::coreblocklog::*;

pub struct ControlAddressesCall {
    pub func:    ScView,
    pub results: ImmutableControlAddressesResults,
}

pub struct GetBlockInfoCall {
    pub func:    ScView,
    pub params:  MutableGetBlockInfoParams,
    pub results: ImmutableGetBlockInfoResults,
}

pub struct GetLatestBlockInfoCall {
    pub func:    ScView,
    pub results: ImmutableGetLatestBlockInfoResults,
}

pub struct GetRequestIDsForBlockCall {
    pub func:    ScView,
    pub params:  MutableGetRequestIDsForBlockParams,
    pub results: ImmutableGetRequestIDsForBlockResults,
}

pub struct GetRequestLogRecordCall {
    pub func:    ScView,
    pub params:  MutableGetRequestLogRecordParams,
    pub results: ImmutableGetRequestLogRecordResults,
}

pub struct GetRequestLogRecordsForBlockCall {
    pub func:    ScView,
    pub params:  MutableGetRequestLogRecordsForBlockParams,
    pub results: ImmutableGetRequestLogRecordsForBlockResults,
}

pub struct IsRequestProcessedCall {
    pub func:    ScView,
    pub params:  MutableIsRequestProcessedParams,
    pub results: ImmutableIsRequestProcessedResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn control_addresses(_ctx: & dyn ScViewCallContext) -> ControlAddressesCall {
        let mut f = ControlAddressesCall {
            func:    ScView::new(HSC_NAME, HVIEW_CONTROL_ADDRESSES),
            results: ImmutableControlAddressesResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
    pub fn get_block_info(_ctx: & dyn ScViewCallContext) -> GetBlockInfoCall {
        let mut f = GetBlockInfoCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_BLOCK_INFO),
            params:  MutableGetBlockInfoParams { id: 0 },
            results: ImmutableGetBlockInfoResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
    pub fn get_latest_block_info(_ctx: & dyn ScViewCallContext) -> GetLatestBlockInfoCall {
        let mut f = GetLatestBlockInfoCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_LATEST_BLOCK_INFO),
            results: ImmutableGetLatestBlockInfoResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
    pub fn get_request_i_ds_for_block(_ctx: & dyn ScViewCallContext) -> GetRequestIDsForBlockCall {
        let mut f = GetRequestIDsForBlockCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_REQUEST_I_DS_FOR_BLOCK),
            params:  MutableGetRequestIDsForBlockParams { id: 0 },
            results: ImmutableGetRequestIDsForBlockResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
    pub fn get_request_log_record(_ctx: & dyn ScViewCallContext) -> GetRequestLogRecordCall {
        let mut f = GetRequestLogRecordCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_REQUEST_LOG_RECORD),
            params:  MutableGetRequestLogRecordParams { id: 0 },
            results: ImmutableGetRequestLogRecordResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
    pub fn get_request_log_records_for_block(_ctx: & dyn ScViewCallContext) -> GetRequestLogRecordsForBlockCall {
        let mut f = GetRequestLogRecordsForBlockCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_REQUEST_LOG_RECORDS_FOR_BLOCK),
            params:  MutableGetRequestLogRecordsForBlockParams { id: 0 },
            results: ImmutableGetRequestLogRecordsForBlockResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
    pub fn is_request_processed(_ctx: & dyn ScViewCallContext) -> IsRequestProcessedCall {
        let mut f = IsRequestProcessedCall {
            func:    ScView::new(HSC_NAME, HVIEW_IS_REQUEST_PROCESSED),
            params:  MutableIsRequestProcessedParams { id: 0 },
            results: ImmutableIsRequestProcessedResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
}

// @formatter:on
