// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreeventlog::*;

#[derive(Clone, Copy)]
pub struct ImmutableViewGetNumRecordsParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetNumRecordsParams {
    pub fn contract_hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.id, PARAM_CONTRACT_HNAME.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetNumRecordsParams {
    pub(crate) id: i32,
}

impl MutableViewGetNumRecordsParams {
    pub fn new() -> MutableViewGetNumRecordsParams {
        MutableViewGetNumRecordsParams { id: ScMutableMap::new().map_id() }
    }

    pub fn contract_hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.id, PARAM_CONTRACT_HNAME.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetRecordsParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetRecordsParams {
    pub fn contract_hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.id, PARAM_CONTRACT_HNAME.get_key_id())
    }

    pub fn from_ts(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_FROM_TS.get_key_id())
    }

    pub fn max_last_records(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_MAX_LAST_RECORDS.get_key_id())
    }

    pub fn to_ts(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_TO_TS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetRecordsParams {
    pub(crate) id: i32,
}

impl MutableViewGetRecordsParams {
    pub fn new() -> MutableViewGetRecordsParams {
        MutableViewGetRecordsParams { id: ScMutableMap::new().map_id() }
    }

    pub fn contract_hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.id, PARAM_CONTRACT_HNAME.get_key_id())
    }

    pub fn from_ts(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_FROM_TS.get_key_id())
    }

    pub fn max_last_records(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_MAX_LAST_RECORDS.get_key_id())
    }

    pub fn to_ts(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_TO_TS.get_key_id())
    }
}
