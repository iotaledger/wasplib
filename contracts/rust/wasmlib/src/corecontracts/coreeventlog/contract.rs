// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use crate::*;
use crate::corecontracts::coreeventlog::*;

pub struct CoreEventLogFunc {
    sc: ScContractFunc,
}

impl CoreEventLogFunc {
    pub fn new(ctx: &ScFuncContext) -> CoreEventLogFunc {
        CoreEventLogFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i64) -> &mut CoreEventLogFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreEventLogFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut CoreEventLogFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut CoreEventLogFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn get_num_records(&mut self, params: MutableViewGetNumRecordsParams) -> ImmutableViewGetNumRecordsResults {
        self.sc.run(HVIEW_GET_NUM_RECORDS, params.id, None);
        ImmutableViewGetNumRecordsResults { id: self.sc.result_map_id() }
    }

    pub fn get_records(&mut self, params: MutableViewGetRecordsParams) {
        self.sc.run(HVIEW_GET_RECORDS, params.id, None);
    }
}

pub struct CoreEventLogView {
    sc: ScContractView,
}

impl CoreEventLogView {
    pub fn new(ctx: &ScViewContext) -> CoreEventLogView {
        CoreEventLogView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreEventLogView {
        self.sc.of_contract(contract);
        self
    }

    pub fn get_num_records(&mut self, params: MutableViewGetNumRecordsParams) -> ImmutableViewGetNumRecordsResults {
        self.sc.run(HVIEW_GET_NUM_RECORDS, params.id);
        ImmutableViewGetNumRecordsResults { id: self.sc.result_map_id() }
    }

    pub fn get_records(&mut self, params: MutableViewGetRecordsParams) {
        self.sc.run(HVIEW_GET_RECORDS, params.id);
    }
}
