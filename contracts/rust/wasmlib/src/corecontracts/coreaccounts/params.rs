// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreaccounts::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncDepositParams {
    pub(crate) id: i32,
}

impl ImmutableFuncDepositParams {
    pub fn agent_id(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, PARAM_AGENT_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncDepositParams {
    pub(crate) id: i32,
}

impl MutableFuncDepositParams {
    pub fn new() -> MutableFuncDepositParams {
        MutableFuncDepositParams { id: ScMutableMap::new().map_id() }
    }

    pub fn agent_id(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, PARAM_AGENT_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncWithdrawParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncWithdrawParams {
    pub(crate) id: i32,
}

impl MutableFuncWithdrawParams {
    pub fn new() -> MutableFuncWithdrawParams {
        MutableFuncWithdrawParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewAccountsParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewAccountsParams {
    pub(crate) id: i32,
}

impl MutableViewAccountsParams {
    pub fn new() -> MutableViewAccountsParams {
        MutableViewAccountsParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewBalanceParams {
    pub(crate) id: i32,
}

impl ImmutableViewBalanceParams {
    pub fn agent_id(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, PARAM_AGENT_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewBalanceParams {
    pub(crate) id: i32,
}

impl MutableViewBalanceParams {
    pub fn new() -> MutableViewBalanceParams {
        MutableViewBalanceParams { id: ScMutableMap::new().map_id() }
    }

    pub fn agent_id(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, PARAM_AGENT_ID.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewTotalAssetsParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewTotalAssetsParams {
    pub(crate) id: i32,
}

impl MutableViewTotalAssetsParams {
    pub fn new() -> MutableViewTotalAssetsParams {
        MutableViewTotalAssetsParams { id: ScMutableMap::new().map_id() }
    }
}
