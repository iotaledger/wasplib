// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use std::ptr;

use crate::*;
use crate::corecontracts::coreaccounts::*;

pub struct DepositCall {
    pub func: ScFunc,
    pub params: MutableDepositParams,
}

impl DepositCall {
    pub fn new(_ctx: &ScFuncContext) -> DepositCall {
        let mut f = DepositCall {
            func: ScFunc::zero(),
            params: MutableDepositParams { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_DEPOSIT, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct WithdrawCall {
    pub func: ScFunc,
}

impl WithdrawCall {
    pub fn new(_ctx: &ScFuncContext) -> WithdrawCall {
        let mut f = WithdrawCall {
            func: ScFunc::zero(),
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_WITHDRAW, ptr::null_mut(), ptr::null_mut());
        f
    }
}

pub struct AccountsCall {
    pub func: ScView,
}

impl AccountsCall {
    pub fn new(_ctx: &ScFuncContext) -> AccountsCall {
        let mut f = AccountsCall {
            func: ScView::zero(),
        };
        f.func = ScView::new(HSC_NAME, HVIEW_ACCOUNTS, ptr::null_mut(), ptr::null_mut());
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> AccountsCall {
        let mut f = AccountsCall {
            func: ScView::zero(),
        };
        f.func = ScView::new(HSC_NAME, HVIEW_ACCOUNTS, ptr::null_mut(), ptr::null_mut());
        f
    }
}

pub struct BalanceCall {
    pub func: ScView,
    pub params: MutableBalanceParams,
}

impl BalanceCall {
    pub fn new(_ctx: &ScFuncContext) -> BalanceCall {
        let mut f = BalanceCall {
            func: ScView::zero(),
            params: MutableBalanceParams { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_BALANCE, &mut f.params.id, ptr::null_mut());
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> BalanceCall {
        let mut f = BalanceCall {
            func: ScView::zero(),
            params: MutableBalanceParams { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_BALANCE, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct TotalAssetsCall {
    pub func: ScView,
}

impl TotalAssetsCall {
    pub fn new(_ctx: &ScFuncContext) -> TotalAssetsCall {
        let mut f = TotalAssetsCall {
            func: ScView::zero(),
        };
        f.func = ScView::new(HSC_NAME, HVIEW_TOTAL_ASSETS, ptr::null_mut(), ptr::null_mut());
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> TotalAssetsCall {
        let mut f = TotalAssetsCall {
            func: ScView::zero(),
        };
        f.func = ScView::new(HSC_NAME, HVIEW_TOTAL_ASSETS, ptr::null_mut(), ptr::null_mut());
        f
    }
}
