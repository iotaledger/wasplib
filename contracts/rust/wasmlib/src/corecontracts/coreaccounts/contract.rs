// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

use std::ptr;

use crate::*;
use crate::corecontracts::coreaccounts::*;

pub struct DepositCall {
    pub func:   ScFunc,
    pub params: MutableDepositParams,
}

impl DepositCall {
    pub fn new(_ctx: &ScFuncContext) -> DepositCall {
        let mut f = DepositCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_DEPOSIT),
            params: MutableDepositParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct WithdrawCall {
    pub func: ScFunc,
}

impl WithdrawCall {
    pub fn new(_ctx: &ScFuncContext) -> WithdrawCall {
        WithdrawCall {
            func: ScFunc::new(HSC_NAME, HFUNC_WITHDRAW),
        }
    }
}

pub struct AccountsCall {
    pub func:    ScView,
    pub results: ImmutableAccountsResults,
}

impl AccountsCall {
    pub fn new(_ctx: &ScFuncContext) -> AccountsCall {
        let mut f = AccountsCall {
            func:    ScView::new(HSC_NAME, HVIEW_ACCOUNTS),
            results: ImmutableAccountsResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> AccountsCall {
        AccountsCall::new(&ScFuncContext {})
    }
}

pub struct BalanceCall {
    pub func:    ScView,
    pub params:  MutableBalanceParams,
    pub results: ImmutableBalanceResults,
}

impl BalanceCall {
    pub fn new(_ctx: &ScFuncContext) -> BalanceCall {
        let mut f = BalanceCall {
            func:    ScView::new(HSC_NAME, HVIEW_BALANCE),
            params:  MutableBalanceParams { id: 0 },
            results: ImmutableBalanceResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> BalanceCall {
        BalanceCall::new(&ScFuncContext {})
    }
}

pub struct TotalAssetsCall {
    pub func:    ScView,
    pub results: ImmutableTotalAssetsResults,
}

impl TotalAssetsCall {
    pub fn new(_ctx: &ScFuncContext) -> TotalAssetsCall {
        let mut f = TotalAssetsCall {
            func:    ScView::new(HSC_NAME, HVIEW_TOTAL_ASSETS),
            results: ImmutableTotalAssetsResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> TotalAssetsCall {
        TotalAssetsCall::new(&ScFuncContext {})
    }
}

// @formatter:on
