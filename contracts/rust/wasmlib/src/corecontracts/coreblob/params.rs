// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreblob::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncStoreBlobParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncStoreBlobParams {
    pub(crate) id: i32,
}

impl MutableFuncStoreBlobParams {
    pub fn new() -> MutableFuncStoreBlobParams {
        MutableFuncStoreBlobParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetBlobFieldParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetBlobFieldParams {
    pub fn field(&self) -> ScImmutableString {
        ScImmutableString::new(self.id, PARAM_FIELD.get_key_id())
    }

    pub fn hash(&self) -> ScImmutableHash {
        ScImmutableHash::new(self.id, PARAM_HASH.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetBlobFieldParams {
    pub(crate) id: i32,
}

impl MutableViewGetBlobFieldParams {
    pub fn new() -> MutableViewGetBlobFieldParams {
        MutableViewGetBlobFieldParams { id: ScMutableMap::new().map_id() }
    }

    pub fn field(&self) -> ScMutableString {
        ScMutableString::new(self.id, PARAM_FIELD.get_key_id())
    }

    pub fn hash(&self) -> ScMutableHash {
        ScMutableHash::new(self.id, PARAM_HASH.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetBlobInfoParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetBlobInfoParams {
    pub fn hash(&self) -> ScImmutableHash {
        ScImmutableHash::new(self.id, PARAM_HASH.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetBlobInfoParams {
    pub(crate) id: i32,
}

impl MutableViewGetBlobInfoParams {
    pub fn new() -> MutableViewGetBlobInfoParams {
        MutableViewGetBlobInfoParams { id: ScMutableMap::new().map_id() }
    }

    pub fn hash(&self) -> ScMutableHash {
        ScMutableHash::new(self.id, PARAM_HASH.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewListBlobsParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewListBlobsParams {
    pub(crate) id: i32,
}

impl MutableViewListBlobsParams {
    pub fn new() -> MutableViewListBlobsParams {
        MutableViewListBlobsParams { id: ScMutableMap::new().map_id() }
    }
}
