// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use std::ptr;
use crate::*;
use crate::corecontracts::coreblob::*;

pub struct StoreBlobCall {
    pub func: ScFunc,
    pub results: ImmutableStoreBlobResults,
}

impl StoreBlobCall {
    pub fn new(_ctx: &ScFuncContext) -> StoreBlobCall {
        let mut f = StoreBlobCall {
            func: ScFunc::zero(),
            results: ImmutableStoreBlobResults { id: 0 },
        };
        f.func = ScFunc::new(HSC_NAME, HFUNC_STORE_BLOB, ptr::null_mut(), &mut f.results.id);
        f
    }
}

pub struct GetBlobFieldCall {
    pub func: ScView,
    pub params: MutableGetBlobFieldParams,
    pub results: ImmutableGetBlobFieldResults,
}

impl GetBlobFieldCall {
    pub fn new(_ctx: &ScFuncContext) -> GetBlobFieldCall {
        let mut f = GetBlobFieldCall {
            func: ScView::zero(),
            params: MutableGetBlobFieldParams { id: 0 },
            results: ImmutableGetBlobFieldResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_GET_BLOB_FIELD, &mut f.params.id, &mut f.results.id);
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> GetBlobFieldCall {
        let mut f = GetBlobFieldCall {
            func: ScView::zero(),
            params: MutableGetBlobFieldParams { id: 0 },
            results: ImmutableGetBlobFieldResults { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_GET_BLOB_FIELD, &mut f.params.id, &mut f.results.id);
        f
    }
}

pub struct GetBlobInfoCall {
    pub func: ScView,
    pub params: MutableGetBlobInfoParams,
}

impl GetBlobInfoCall {
    pub fn new(_ctx: &ScFuncContext) -> GetBlobInfoCall {
        let mut f = GetBlobInfoCall {
            func: ScView::zero(),
            params: MutableGetBlobInfoParams { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_GET_BLOB_INFO, &mut f.params.id, ptr::null_mut());
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> GetBlobInfoCall {
        let mut f = GetBlobInfoCall {
            func: ScView::zero(),
            params: MutableGetBlobInfoParams { id: 0 },
        };
        f.func = ScView::new(HSC_NAME, HVIEW_GET_BLOB_INFO, &mut f.params.id, ptr::null_mut());
        f
    }
}

pub struct ListBlobsCall {
    pub func: ScView,
}

impl ListBlobsCall {
    pub fn new(_ctx: &ScFuncContext) -> ListBlobsCall {
        let mut f = ListBlobsCall {
            func: ScView::zero(),
        };
        f.func = ScView::new(HSC_NAME, HVIEW_LIST_BLOBS, ptr::null_mut(), ptr::null_mut());
        f
    }

    pub fn new_from_view(_ctx: &ScViewContext) -> ListBlobsCall {
        let mut f = ListBlobsCall {
            func: ScView::zero(),
        };
        f.func = ScView::new(HSC_NAME, HVIEW_LIST_BLOBS, ptr::null_mut(), ptr::null_mut());
        f
    }
}
