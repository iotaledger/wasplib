// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use crate::*;
use crate::corecontracts::coreblob::*;

pub struct CoreBlobFunc {
    sc: ScContractFunc,
}

impl CoreBlobFunc {
    pub fn new(ctx: &ScFuncContext) -> CoreBlobFunc {
        CoreBlobFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i32) -> &mut CoreBlobFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreBlobFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut CoreBlobFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut CoreBlobFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn store_blob(&mut self, transfer: ScTransfers) -> ImmutableFuncStoreBlobResults {
        self.sc.run(HFUNC_STORE_BLOB, 0, Some(transfer));
        ImmutableFuncStoreBlobResults { id: self.sc.result_map_id() }
    }

    pub fn get_blob_field(&mut self, params: MutableViewGetBlobFieldParams) -> ImmutableViewGetBlobFieldResults {
        self.sc.run(HVIEW_GET_BLOB_FIELD, params.id, None);
        ImmutableViewGetBlobFieldResults { id: self.sc.result_map_id() }
    }

    pub fn get_blob_info(&mut self, params: MutableViewGetBlobInfoParams) {
        self.sc.run(HVIEW_GET_BLOB_INFO, params.id, None);
    }

    pub fn list_blobs(&mut self) {
        self.sc.run(HVIEW_LIST_BLOBS, 0, None);
    }
}

pub struct CoreBlobView {
    sc: ScContractView,
}

impl CoreBlobView {
    pub fn new(ctx: &ScViewContext) -> CoreBlobView {
        CoreBlobView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreBlobView {
        self.sc.of_contract(contract);
        self
    }

    pub fn get_blob_field(&mut self, params: MutableViewGetBlobFieldParams) -> ImmutableViewGetBlobFieldResults {
        self.sc.run(HVIEW_GET_BLOB_FIELD, params.id);
        ImmutableViewGetBlobFieldResults { id: self.sc.result_map_id() }
    }

    pub fn get_blob_info(&mut self, params: MutableViewGetBlobInfoParams) {
        self.sc.run(HVIEW_GET_BLOB_INFO, params.id);
    }

    pub fn list_blobs(&mut self) {
        self.sc.run(HVIEW_LIST_BLOBS, 0);
    }
}
