// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreroot::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncClaimChainOwnershipParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableFuncClaimChainOwnershipParams {
    pub(crate) id: i32,
}

impl MutableFuncClaimChainOwnershipParams {
    pub fn new() -> MutableFuncClaimChainOwnershipParams {
        MutableFuncClaimChainOwnershipParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncDelegateChainOwnershipParams {
    pub(crate) id: i32,
}

impl ImmutableFuncDelegateChainOwnershipParams {
    pub fn chain_owner(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, PARAM_CHAIN_OWNER.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncDelegateChainOwnershipParams {
    pub(crate) id: i32,
}

impl MutableFuncDelegateChainOwnershipParams {
    pub fn new() -> MutableFuncDelegateChainOwnershipParams {
        MutableFuncDelegateChainOwnershipParams { id: ScMutableMap::new().map_id() }
    }

    pub fn chain_owner(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, PARAM_CHAIN_OWNER.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncDeployContractParams {
    pub(crate) id: i32,
}

impl ImmutableFuncDeployContractParams {
    pub fn description(&self) -> ScImmutableString {
        ScImmutableString::new(self.id, PARAM_DESCRIPTION.get_key_id())
    }

    pub fn name(&self) -> ScImmutableString {
        ScImmutableString::new(self.id, PARAM_NAME.get_key_id())
    }

    pub fn program_hash(&self) -> ScImmutableHash {
        ScImmutableHash::new(self.id, PARAM_PROGRAM_HASH.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncDeployContractParams {
    pub(crate) id: i32,
}

impl MutableFuncDeployContractParams {
    pub fn new() -> MutableFuncDeployContractParams {
        MutableFuncDeployContractParams { id: ScMutableMap::new().map_id() }
    }

    pub fn description(&self) -> ScMutableString {
        ScMutableString::new(self.id, PARAM_DESCRIPTION.get_key_id())
    }

    pub fn name(&self) -> ScMutableString {
        ScMutableString::new(self.id, PARAM_NAME.get_key_id())
    }

    pub fn program_hash(&self) -> ScMutableHash {
        ScMutableHash::new(self.id, PARAM_PROGRAM_HASH.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncGrantDeployPermissionParams {
    pub(crate) id: i32,
}

impl ImmutableFuncGrantDeployPermissionParams {
    pub fn deployer(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, PARAM_DEPLOYER.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncGrantDeployPermissionParams {
    pub(crate) id: i32,
}

impl MutableFuncGrantDeployPermissionParams {
    pub fn new() -> MutableFuncGrantDeployPermissionParams {
        MutableFuncGrantDeployPermissionParams { id: ScMutableMap::new().map_id() }
    }

    pub fn deployer(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, PARAM_DEPLOYER.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncRevokeDeployPermissionParams {
    pub(crate) id: i32,
}

impl ImmutableFuncRevokeDeployPermissionParams {
    pub fn deployer(&self) -> ScImmutableAgentId {
        ScImmutableAgentId::new(self.id, PARAM_DEPLOYER.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncRevokeDeployPermissionParams {
    pub(crate) id: i32,
}

impl MutableFuncRevokeDeployPermissionParams {
    pub fn new() -> MutableFuncRevokeDeployPermissionParams {
        MutableFuncRevokeDeployPermissionParams { id: ScMutableMap::new().map_id() }
    }

    pub fn deployer(&self) -> ScMutableAgentId {
        ScMutableAgentId::new(self.id, PARAM_DEPLOYER.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncSetContractFeeParams {
    pub(crate) id: i32,
}

impl ImmutableFuncSetContractFeeParams {
    pub fn hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.id, PARAM_HNAME.get_key_id())
    }

    pub fn owner_fee(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_OWNER_FEE.get_key_id())
    }

    pub fn validator_fee(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_VALIDATOR_FEE.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncSetContractFeeParams {
    pub(crate) id: i32,
}

impl MutableFuncSetContractFeeParams {
    pub fn new() -> MutableFuncSetContractFeeParams {
        MutableFuncSetContractFeeParams { id: ScMutableMap::new().map_id() }
    }

    pub fn hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.id, PARAM_HNAME.get_key_id())
    }

    pub fn owner_fee(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_OWNER_FEE.get_key_id())
    }

    pub fn validator_fee(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_VALIDATOR_FEE.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncSetDefaultFeeParams {
    pub(crate) id: i32,
}

impl ImmutableFuncSetDefaultFeeParams {
    pub fn owner_fee(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_OWNER_FEE.get_key_id())
    }

    pub fn validator_fee(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, PARAM_VALIDATOR_FEE.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncSetDefaultFeeParams {
    pub(crate) id: i32,
}

impl MutableFuncSetDefaultFeeParams {
    pub fn new() -> MutableFuncSetDefaultFeeParams {
        MutableFuncSetDefaultFeeParams { id: ScMutableMap::new().map_id() }
    }

    pub fn owner_fee(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_OWNER_FEE.get_key_id())
    }

    pub fn validator_fee(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, PARAM_VALIDATOR_FEE.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewFindContractParams {
    pub(crate) id: i32,
}

impl ImmutableViewFindContractParams {
    pub fn hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.id, PARAM_HNAME.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewFindContractParams {
    pub(crate) id: i32,
}

impl MutableViewFindContractParams {
    pub fn new() -> MutableViewFindContractParams {
        MutableViewFindContractParams { id: ScMutableMap::new().map_id() }
    }

    pub fn hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.id, PARAM_HNAME.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetChainInfoParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewGetChainInfoParams {
    pub(crate) id: i32,
}

impl MutableViewGetChainInfoParams {
    pub fn new() -> MutableViewGetChainInfoParams {
        MutableViewGetChainInfoParams { id: ScMutableMap::new().map_id() }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetFeeInfoParams {
    pub(crate) id: i32,
}

impl ImmutableViewGetFeeInfoParams {
    pub fn hname(&self) -> ScImmutableHname {
        ScImmutableHname::new(self.id, PARAM_HNAME.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableViewGetFeeInfoParams {
    pub(crate) id: i32,
}

impl MutableViewGetFeeInfoParams {
    pub fn new() -> MutableViewGetFeeInfoParams {
        MutableViewGetFeeInfoParams { id: ScMutableMap::new().map_id() }
    }

    pub fn hname(&self) -> ScMutableHname {
        ScMutableHname::new(self.id, PARAM_HNAME.get_key_id())
    }
}
