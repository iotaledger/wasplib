// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coreroot::*;
use crate::host::*;

#[derive(Clone, Copy)]
pub struct ImmutableFindContractResults {
    pub(crate) id: i32,
}

impl ImmutableFindContractResults {
    pub fn contract_found(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.id, RESULT_CONTRACT_FOUND.get_key_id())
    }

    pub fn contract_rec_data(&self) -> ScImmutableBytes {
        ScImmutableBytes::new(self.id, RESULT_CONTRACT_REC_DATA.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFindContractResults {
    pub(crate) id: i32,
}

impl MutableFindContractResults {
    pub fn contract_found(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.id, RESULT_CONTRACT_FOUND.get_key_id())
    }

    pub fn contract_rec_data(&self) -> ScMutableBytes {
        ScMutableBytes::new(self.id, RESULT_CONTRACT_REC_DATA.get_key_id())
    }
}

pub struct MapHnameToImmutableBytes {
    pub(crate) obj_id: i32,
}

impl MapHnameToImmutableBytes {
    pub fn get_bytes(&self, key: &ScHname) -> ScImmutableBytes {
        ScImmutableBytes::new(self.obj_id, key.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableGetContractRecordsResults {
    pub(crate) id: i32,
}

impl ImmutableGetContractRecordsResults {
    pub fn contract_registry(&self) -> MapHnameToImmutableBytes {
        let map_id = get_object_id(self.id, RESULT_CONTRACT_REGISTRY.get_key_id(), TYPE_MAP);
        MapHnameToImmutableBytes { obj_id: map_id }
    }
}

pub struct MapHnameToMutableBytes {
    pub(crate) obj_id: i32,
}

impl MapHnameToMutableBytes {
    pub fn clear(&self) {
        clear(self.obj_id)
    }

    pub fn get_bytes(&self, key: &ScHname) -> ScMutableBytes {
        ScMutableBytes::new(self.obj_id, key.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableGetContractRecordsResults {
    pub(crate) id: i32,
}

impl MutableGetContractRecordsResults {
    pub fn contract_registry(&self) -> MapHnameToMutableBytes {
        let map_id = get_object_id(self.id, RESULT_CONTRACT_REGISTRY.get_key_id(), TYPE_MAP);
        MapHnameToMutableBytes { obj_id: map_id }
    }
}
