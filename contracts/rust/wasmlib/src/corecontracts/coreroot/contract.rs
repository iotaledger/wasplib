// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]

use crate::*;
use crate::corecontracts::coreroot::*;

pub struct CoreRootFunc {
    sc: ScContractFunc,
}

impl CoreRootFunc {
    pub fn new(ctx: &ScFuncContext) -> CoreRootFunc {
        CoreRootFunc { sc: ScContractFunc::new(ctx, HSC_NAME) }
    }

    pub fn delay(&mut self, seconds: i64) -> &mut CoreRootFunc {
        self.sc.delay(seconds);
        self
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreRootFunc {
        self.sc.of_contract(contract);
        self
    }

    pub fn post(&mut self) -> &mut CoreRootFunc {
        self.sc.post();
        self
    }

    pub fn post_to_chain(&mut self, chain_id: ScChainId) -> &mut CoreRootFunc {
        self.sc.post_to_chain(chain_id);
        self
    }

    pub fn claim_chain_ownership(&mut self, transfer: ScTransfers) {
        self.sc.run(HFUNC_CLAIM_CHAIN_OWNERSHIP, 0, Some(transfer));
    }

    pub fn delegate_chain_ownership(&mut self, params: MutableFuncDelegateChainOwnershipParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_DELEGATE_CHAIN_OWNERSHIP, params.id, Some(transfer));
    }

    pub fn deploy_contract(&mut self, params: MutableFuncDeployContractParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_DEPLOY_CONTRACT, params.id, Some(transfer));
    }

    pub fn grant_deploy_permission(&mut self, params: MutableFuncGrantDeployPermissionParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_GRANT_DEPLOY_PERMISSION, params.id, Some(transfer));
    }

    pub fn revoke_deploy_permission(&mut self, params: MutableFuncRevokeDeployPermissionParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_REVOKE_DEPLOY_PERMISSION, params.id, Some(transfer));
    }

    pub fn set_contract_fee(&mut self, params: MutableFuncSetContractFeeParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_SET_CONTRACT_FEE, params.id, Some(transfer));
    }

    pub fn set_default_fee(&mut self, params: MutableFuncSetDefaultFeeParams, transfer: ScTransfers) {
        self.sc.run(HFUNC_SET_DEFAULT_FEE, params.id, Some(transfer));
    }

    pub fn find_contract(&mut self, params: MutableViewFindContractParams) -> ImmutableViewFindContractResults {
        self.sc.run(HVIEW_FIND_CONTRACT, params.id, None);
        ImmutableViewFindContractResults { id: self.sc.result_map_id() }
    }

    pub fn get_chain_info(&mut self) -> ImmutableViewGetChainInfoResults {
        self.sc.run(HVIEW_GET_CHAIN_INFO, 0, None);
        ImmutableViewGetChainInfoResults { id: self.sc.result_map_id() }
    }

    pub fn get_fee_info(&mut self, params: MutableViewGetFeeInfoParams) -> ImmutableViewGetFeeInfoResults {
        self.sc.run(HVIEW_GET_FEE_INFO, params.id, None);
        ImmutableViewGetFeeInfoResults { id: self.sc.result_map_id() }
    }
}

pub struct CoreRootView {
    sc: ScContractView,
}

impl CoreRootView {
    pub fn new(ctx: &ScViewContext) -> CoreRootView {
        CoreRootView { sc: ScContractView::new(ctx, HSC_NAME) }
    }

    pub fn of_contract(&mut self, contract: ScHname) -> &mut CoreRootView {
        self.sc.of_contract(contract);
        self
    }

    pub fn find_contract(&mut self, params: MutableViewFindContractParams) -> ImmutableViewFindContractResults {
        self.sc.run(HVIEW_FIND_CONTRACT, params.id);
        ImmutableViewFindContractResults { id: self.sc.result_map_id() }
    }

    pub fn get_chain_info(&mut self) -> ImmutableViewGetChainInfoResults {
        self.sc.run(HVIEW_GET_CHAIN_INFO, 0);
        ImmutableViewGetChainInfoResults { id: self.sc.result_map_id() }
    }

    pub fn get_fee_info(&mut self, params: MutableViewGetFeeInfoParams) -> ImmutableViewGetFeeInfoResults {
        self.sc.run(HVIEW_GET_FEE_INFO, params.id);
        ImmutableViewGetFeeInfoResults { id: self.sc.result_map_id() }
    }
}
