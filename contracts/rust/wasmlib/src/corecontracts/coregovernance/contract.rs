// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

use std::ptr;

use crate::*;
use crate::corecontracts::coregovernance::*;

pub struct AddAllowedStateControllerAddressCall {
    pub func:   ScFunc,
    pub params: MutableAddAllowedStateControllerAddressParams,
}

pub struct RemoveAllowedStateControllerAddressCall {
    pub func:   ScFunc,
    pub params: MutableRemoveAllowedStateControllerAddressParams,
}

pub struct RotateStateControllerCall {
    pub func:   ScFunc,
    pub params: MutableRotateStateControllerParams,
}

pub struct GetAllowedStateControllerAddressesCall {
    pub func:    ScView,
    pub results: ImmutableGetAllowedStateControllerAddressesResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn add_allowed_state_controller_address(_ctx: & dyn ScFuncCallContext) -> AddAllowedStateControllerAddressCall {
        let mut f = AddAllowedStateControllerAddressCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_ADD_ALLOWED_STATE_CONTROLLER_ADDRESS),
            params: MutableAddAllowedStateControllerAddressParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn remove_allowed_state_controller_address(_ctx: & dyn ScFuncCallContext) -> RemoveAllowedStateControllerAddressCall {
        let mut f = RemoveAllowedStateControllerAddressCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_REMOVE_ALLOWED_STATE_CONTROLLER_ADDRESS),
            params: MutableRemoveAllowedStateControllerAddressParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn rotate_state_controller(_ctx: & dyn ScFuncCallContext) -> RotateStateControllerCall {
        let mut f = RotateStateControllerCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_ROTATE_STATE_CONTROLLER),
            params: MutableRotateStateControllerParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn get_allowed_state_controller_addresses(_ctx: & dyn ScViewCallContext) -> GetAllowedStateControllerAddressesCall {
        let mut f = GetAllowedStateControllerAddressesCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_ALLOWED_STATE_CONTROLLER_ADDRESSES),
            results: ImmutableGetAllowedStateControllerAddressesResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
}

// @formatter:on
