// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::*;
use crate::corecontracts::coregovernance::*;

#[derive(Clone, Copy)]
pub struct ImmutableFuncAddAllowedStateControllerAddressParams {
    pub(crate) id: i32,
}

impl ImmutableFuncAddAllowedStateControllerAddressParams {
    pub fn state_controller_address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, PARAM_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncAddAllowedStateControllerAddressParams {
    pub(crate) id: i32,
}

impl MutableFuncAddAllowedStateControllerAddressParams {
    pub fn new() -> MutableFuncAddAllowedStateControllerAddressParams {
        MutableFuncAddAllowedStateControllerAddressParams { id: ScMutableMap::new().map_id() }
    }

    pub fn state_controller_address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, PARAM_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncRemoveAllowedStateControllerAddressParams {
    pub(crate) id: i32,
}

impl ImmutableFuncRemoveAllowedStateControllerAddressParams {
    pub fn state_controller_address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, PARAM_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncRemoveAllowedStateControllerAddressParams {
    pub(crate) id: i32,
}

impl MutableFuncRemoveAllowedStateControllerAddressParams {
    pub fn new() -> MutableFuncRemoveAllowedStateControllerAddressParams {
        MutableFuncRemoveAllowedStateControllerAddressParams { id: ScMutableMap::new().map_id() }
    }

    pub fn state_controller_address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, PARAM_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableFuncRotateStateControllerParams {
    pub(crate) id: i32,
}

impl ImmutableFuncRotateStateControllerParams {
    pub fn state_controller_address(&self) -> ScImmutableAddress {
        ScImmutableAddress::new(self.id, PARAM_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct MutableFuncRotateStateControllerParams {
    pub(crate) id: i32,
}

impl MutableFuncRotateStateControllerParams {
    pub fn new() -> MutableFuncRotateStateControllerParams {
        MutableFuncRotateStateControllerParams { id: ScMutableMap::new().map_id() }
    }

    pub fn state_controller_address(&self) -> ScMutableAddress {
        ScMutableAddress::new(self.id, PARAM_STATE_CONTROLLER_ADDRESS.get_key_id())
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableViewGetAllowedStateControllerAddressesParams {
    pub(crate) id: i32,
}

#[derive(Clone, Copy)]
pub struct MutableViewGetAllowedStateControllerAddressesParams {
    pub(crate) id: i32,
}

impl MutableViewGetAllowedStateControllerAddressesParams {
    pub fn new() -> MutableViewGetAllowedStateControllerAddressesParams {
        MutableViewGetAllowedStateControllerAddressesParams { id: ScMutableMap::new().map_id() }
    }
}
