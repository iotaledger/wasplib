// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package org.iota.wasp.contracts.tokenregistry.lib;

import de.mirkosertic.bytecoder.api.*;
import org.iota.wasp.contracts.tokenregistry.*;
import org.iota.wasp.wasmlib.context.*;
import org.iota.wasp.wasmlib.exports.*;
import org.iota.wasp.wasmlib.immutable.*;

public class TokenRegistryThunk {
    public static void main(String[] args) {
    }

    @Export("on_load")
    public static void onLoad() {
        ScExports exports = new ScExports();
        exports.AddFunc(Consts.FuncMintSupply, TokenRegistryThunk::funcMintSupplyThunk);
        exports.AddFunc(Consts.FuncTransferOwnership, TokenRegistryThunk::funcTransferOwnershipThunk);
        exports.AddFunc(Consts.FuncUpdateMetadata, TokenRegistryThunk::funcUpdateMetadataThunk);
        exports.AddView(Consts.ViewGetInfo, TokenRegistryThunk::viewGetInfoThunk);
    }

    private static void funcMintSupplyThunk(ScFuncContext ctx) {
        ctx.Log("tokenregistry.funcMintSupply");
        var p = ctx.Params();
        var params = new FuncMintSupplyParams();
        params.Description = p.GetString(Consts.ParamDescription);
        params.UserDefined = p.GetString(Consts.ParamUserDefined);
        TokenRegistry.funcMintSupply(ctx, params);
        ctx.Log("tokenregistry.funcMintSupply ok");
    }

    private static void funcTransferOwnershipThunk(ScFuncContext ctx) {
        ctx.Log("tokenregistry.funcTransferOwnership");
        //TODO the one who can transfer token ownership
        ctx.Require(ctx.Caller().equals(ctx.ContractCreator()), "no permission");

        var p = ctx.Params();
        var params = new FuncTransferOwnershipParams();
        params.Color = p.GetColor(Consts.ParamColor);
        ctx.Require(params.Color.Exists(), "missing mandatory color");
        TokenRegistry.funcTransferOwnership(ctx, params);
        ctx.Log("tokenregistry.funcTransferOwnership ok");
    }

    private static void funcUpdateMetadataThunk(ScFuncContext ctx) {
        ctx.Log("tokenregistry.funcUpdateMetadata");
        //TODO the one who can change the token info
        ctx.Require(ctx.Caller().equals(ctx.ContractCreator()), "no permission");

        var p = ctx.Params();
        var params = new FuncUpdateMetadataParams();
        params.Color = p.GetColor(Consts.ParamColor);
        ctx.Require(params.Color.Exists(), "missing mandatory color");
        TokenRegistry.funcUpdateMetadata(ctx, params);
        ctx.Log("tokenregistry.funcUpdateMetadata ok");
    }

    private static void viewGetInfoThunk(ScViewContext ctx) {
        ctx.Log("tokenregistry.viewGetInfo");
        var p = ctx.Params();
        var params = new ViewGetInfoParams();
        params.Color = p.GetColor(Consts.ParamColor);
        ctx.Require(params.Color.Exists(), "missing mandatory color");
        TokenRegistry.viewGetInfo(ctx, params);
        ctx.Log("tokenregistry.viewGetInfo ok");
    }
}
