// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

package org.iota.wasp.contracts.donatewithfeedback.lib;

import org.iota.wasp.contracts.donatewithfeedback.*;
import org.iota.wasp.wasmlib.context.*;
import org.iota.wasp.wasmlib.exports.*;
import org.iota.wasp.wasmlib.immutable.*;

public class DonateWithFeedbackThunk {
	public static void onLoad() {
		ScExports exports = new ScExports();
		exports.AddFunc("donate", DonateWithFeedbackThunk::funcDonateThunk);
		exports.AddFunc("withdraw", DonateWithFeedbackThunk::funcWithdrawThunk);
		exports.AddView("donations", DonateWithFeedbackThunk::viewDonationsThunk);
	}

	private static void funcDonateThunk(ScFuncContext ctx) {
		ScImmutableMap p = ctx.Params();
		FuncDonateParams params = new FuncDonateParams();
		params.Feedback = p.GetString(Consts.ParamFeedback);
		DonateWithFeedback.funcDonate(ctx, params);
	}

	private static void funcWithdrawThunk(ScFuncContext ctx) {
		// only SC creator can withdraw donated funds
		ctx.Require(ctx.Caller().equals(ctx.ContractCreator()), "no permission");

		ScImmutableMap p = ctx.Params();
		FuncWithdrawParams params = new FuncWithdrawParams();
		params.Amount = p.GetInt64(Consts.ParamAmount);
		DonateWithFeedback.funcWithdraw(ctx, params);
	}

	private static void viewDonationsThunk(ScViewContext ctx) {
		ViewDonationsParams params = new ViewDonationsParams();
		DonateWithFeedback.viewDonations(ctx, params);
	}
}
